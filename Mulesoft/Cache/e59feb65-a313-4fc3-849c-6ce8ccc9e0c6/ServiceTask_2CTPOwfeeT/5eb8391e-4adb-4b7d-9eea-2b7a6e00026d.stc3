;-------------------------------------------------------------------------------
; Code was generated by MuleSoft RPA Builder 6.0.15086.1
; Type is: RPA
; Copyright © MuleSoft LLC 2022
; Template Revision: $Revision: 6.0.1.0 $
; RPA-Workflow Author: msps
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; include of standard functions
;-------------------------------------------------------------------------------
#include "StcFuncLib.stc3"

;-------------------------------------------------------------------------------
; Global value Setting 
;-------------------------------------------------------------------------------
Local $FutureUse = true  ; for now the scriptfeedback is always on!

; Don't change or remove following line! 
$g_UsedWorkflowEditorVersion = "6.0.15086.1"

;-------------------------------------------------------------------------------
; Set the workflow type for this workflow
;-------------------------------------------------------------------------------
_StcSetWfeWorkfowTypeId( 3 )

;-------------------------------------------------------------------------------
; Registering of runtime package cache paths (must be before Init is called!)
;-------------------------------------------------------------------------------

__StcRegisterRuntimePackageModul( "CommonRuntime_6_0_057BEB3330D7CDF6BEB5F9453118434D")  ; Source on WFE generated this script: $item.Value   


;-------------------------------------------------------------------------------
; Registering of runtime package cache paths (must be before Init is called!)
;-------------------------------------------------------------------------------

;--------------------------------------------------------------------------------

Local $MaxStcLogfile = 1 ;1MB
InitStcFunclib($MaxStcLogfile, $FutureUse, 0)

StcSetScreenShotExtension(".bmp")                                     ; default store as BMP (productive)

writelog("Info - Script was built by X1DS Rev.  : " & $g_UsedWorkflowEditorVersion & " []" & " at 6:08:04 PM ; Tuesday, November 1, 2022 (local time)" )
writelog("Info - Script was built on machine    : johnzhong-pc, OS Typ/Version: " & "Windows 10 x64 v10.0.19044" )
writelog("--------------------------------------------------------------------------------------------------------------")


;-------------------------------------------------------------------------------
;STC-Guard Konfiguration
;-------------------------------------------------------------------------------
__SetStcGuardOperationMode( True )    ; enable or disable Guard by project settings.
__StcRegisterKillByStcGuard( "")
__StcRegisterKillOnExit("" )
__StcRegisterKeepAliveList( "" )


;-------------------------------------------------------------------------------
;   Measurement values
;-------------------------------------------------------------------------------
; counter to count the number of tries
$enter = 1


;-------------------------------------------------------------------------------
;   Global Master Data Settings
;-------------------------------------------------------------------------------
$WorkflowName = "Get Unique ID and export to template" ;StcServerMasterDataVariable( "Workflowname", "STRING",  "Get Unique ID and export to template"  )
; For now the Applname ist not configurable in case of RPA type Workflows! 
; So in all cases where the application name is part of an output we should write: n/a !
$ApplName = "<n/a>"


;-------------------------------------------------------------------------------
;  Image processing settings       
;-------------------------------------------------------------------------------
StcEnableAutoBitsPerPixelFallback()                     


;-------------------------------------------------------------------------------
;  External Library Includes       
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
; Check if project uses AIS Functions. If so we call a special init to 
; precompile needed code. Otherwise first pattern search take more time than othhers!
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
;   Start of scheduler and measurement
; 
;-------------------------------------------------------------------------------
schedule()  ; !!! Ths is the main entry!!!!
   
;-------------------------------------------------------------------------------
; Start of Workflow
;   Measurement Workflows
;-------------------------------------------------------------------------------
Func measurement ()

  Local $LoopErrorHandling = 0
  Local $DoNotExecute = False

  __StcAisGlobalConfigs( $g__StcUseLegacyStaticAnalyseImages)
  
  OnWorkflowStart( "5eb8391e-4adb-4b7d-9eea-2b7a6e00026d",  STC_GetWorkflowProtocolTemplate() )

  ;---------------------------------------------------------------------------
  ;  Master Daten Section
  ;-------------------------------------------------------------------------------
  ActionStepFeedbackEx( "Get Unique ID and export to template ()", "Activity", "5eb8391e-4adb-4b7d-9eea-2b7a6e00026d", "Info", "Process name    : OSRA-22 case.", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Get Unique ID and export to template ()", "Activity", "5eb8391e-4adb-4b7d-9eea-2b7a6e00026d", "Info", "Activity name   : Get Unique ID and export to template.", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Get Unique ID and export to template ()", "Activity", "5eb8391e-4adb-4b7d-9eea-2b7a6e00026d", "Info", "Workflow type is: " & StcGetWfeWorkflowType() & ".", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Get Unique ID and export to template ()", "Activity", "5eb8391e-4adb-4b7d-9eea-2b7a6e00026d", "Info", "Executed by user: '" & @UserName & "' at machine name: '" & @ComputerName & "'. OS-Version: " & @OSVersion & ".", @ScriptLineNumber ) 

  ;-------------------------------------------------------------------------------
  ;   Measurement Point INIT-Section 
  ;-------------------------------------------------------------------------------

  ; Simple Measurement Point Registration 
   
   ; Timer related Measurement Point Registration
   
   
 ;-----------------------------------------------------------------------
 ;# Start of Initialization Section: Workflow Initialization;
 ;-----------------------------------------------------------------------
 Local $__gStcInitSectionSuccess = True ; may set to false in one of the herein called init section AS
     
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Activity Parameters"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "707fe316-5062-4e5c-bfd4-689a7cb8e829", "Activity_Parameters", False, "EhNormal", @ScriptLineNumber)
   If True Then
   $LogfileIdent = 2 
   $TransStep = ("Activity Parameters")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of Activity Parameter Definitions: Activity Parameters;
   ;-----------------------------------------------------------------------
   Local $__AcitivtyParameter_Path = StcGetLogFileFolder() & "\InputActivityParameters.json"
   Local $__AcitivtyParameter_Success = __StcInitInParameters($__AcitivtyParameter_Path, "707fe316-5062-4e5c-bfd4-689a7cb8e829", @ScriptLineNumber, "Activity Parameters"    ) 
   Local $__AcitivtyParameter_Value ; the last retrieved value as it is used within the variable system. Intrinic is as it is, complex is Jason
   Local $__ActivityParameter_Display ; the value i an always readable format.
   
   If $__AcitivtyParameter_Success Then
   Local $__AcitivtyParameter_ReadSuccess = True;
      ; List of in variables 
      Local $__Success = __StcRpaGetActivityParameterValue("folderPath", 1, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":1,""StringValue"":""C:\\RPADemo\\OSRA22""},""Name"":""folderPath"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "707fe316-5062-4e5c-bfd4-689a7cb8e829", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_folderPath = $__AcitivtyParameter_Value
      Local $__Success = __StcRpaGetActivityParameterValue("nUniqueCounter", 0, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":0,""IntValue"":0},""Name"":""nUniqueCounter"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "707fe316-5062-4e5c-bfd4-689a7cb8e829", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_nUniqueCounter = $__AcitivtyParameter_Value
      Local $__Success = __StcRpaGetActivityParameterValue("tempValue", 0, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":0,""IntValue"":0},""Name"":""tempValue"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "707fe316-5062-4e5c-bfd4-689a7cb8e829", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_tempValue = $__AcitivtyParameter_Value
   If Not $__AcitivtyParameter_ReadSuccess then  $__gStcInitSectionSuccess = False  ; set global error at init flag!
   
   
   ; Register process out variables:
   __StcRpaRegisterOutParams( "Activity_Parameters_folderPath", "folderPath" )
   Global $Activity_Parameters_folderPath_Changed = False
   __StcRpaRegisterOutParams( "Activity_Parameters_nUniqueCounter", "nUniqueCounter" )
   Global $Activity_Parameters_nUniqueCounter_Changed = False
   __StcRpaRegisterOutParams( "Activity_Parameters_tempValue", "tempValue" )
   Global $Activity_Parameters_tempValue_Changed = False
   Else
      $__gStcInitSectionSuccess=False  ; set global error at init flag!
   Endif
   
   $Run = CheckErrorHandling(1, $__AcitivtyParameter_Success ? 1 : -1 , "707fe316-5062-4e5c-bfd4-689a7cb8e829", @ScriptLineNumber, "Activity Parameters"  ) 
   
   
   ;-----------------------------------------------------------------------
   ;## End of Activity Parameter Definitions: Activity Parameters;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "707fe316-5062-4e5c-bfd4-689a7cb8e829", true )
        
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Pattern Gallery"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "66b3dfd6-7006-4d51-ae9b-c0a68c16401f", "Pattern_Gallery", True, "EhNormal", @ScriptLineNumber)
   If _StcVarSysValidateVarReference( "Pattern_Gallery", "66b3dfd6-7006-4d51-ae9b-c0a68c16401f", @ScriptLineNumber, "EhNormal" ) Then
   $LogfileIdent = 2 
   $TransStep = ("Pattern Gallery")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of transaction step: Pattern Gallery;
   ;-----------------------------------------------------------------------
   $ErrorHandling = 1
   
   	
   
   ;-----------------------------------------------------------------------
   ;## End of transaction step: Pattern Gallery;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "66b3dfd6-7006-4d51-ae9b-c0a68c16401f", true )
        
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Settings"
   
   $OutboundVar_BasePathOut = Default 
     
   Global $AutoProp_BasePath = "%temp%", $AutoProp_BasePath_HasVarMapping = False 
   Global $AutoProp_RemoveBasePathSubfolderOnExit = True, $AutoProp_RemoveBasePathSubfolderOnExit_HasVarMapping = False   
   Global $AutoProp_GenerateSubFolder = True, $AutoProp_GenerateSubFolder_HasVarMapping = False   
   Global $AutoProp_UseAllowedPathsLimitation = False, $AutoProp_UseAllowedPathsLimitation_HasVarMapping = False   
   Global $AutoProp_ProxySettingAsInt = 0, $AutoProp_ProxySettingAsInt_HasVarMapping = False   
   Global $AutoProp_IsUseProxyAuthChecked = False, $AutoProp_IsUseProxyAuthChecked_HasVarMapping = False   
   Global $AutoProp_ProxyUrl = "", $AutoProp_ProxyUrl_HasVarMapping = False 
   Global $AutoProp_ProxyAccount = "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":"""",""Token"":"""",""Password"":"""",""CryptUser"":"""",""CryptPassword"":""""},""Name"":""Name"",""Id"":""3febb286-0f91-4876-8933-c840716fc144"",""Access"":""RW"",""Tags"":null}", $AutoProp_ProxyAccount_HasVarMapping = False   
   Global $AutoProp_ProxyAccountAsString = "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":"""",""Token"":"""",""Password"":"""",""CryptUser"":"""",""CryptPassword"":""""},""Name"":""Name"",""Id"":""3febb286-0f91-4876-8933-c840716fc144"",""Access"":""RW"",""Tags"":null}", $AutoProp_ProxyAccountAsString_HasVarMapping = False 
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "76cfe1c2-e082-41cb-8a22-66b8349a671c", "Settings", True, "EhNormal", @ScriptLineNumber)
   If _StcVarSysValidateVarReference( "Settings", "76cfe1c2-e082-41cb-8a22-66b8349a671c", @ScriptLineNumber, "EhNormal" ) Then
   $LogfileIdent = 2 
   $TransStep = ("Settings")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of transaction step: Settings;
   ;-----------------------------------------------------------------------
   $__gStcRemoveBasePathSubfolderOnExit = $AutoProp_RemoveBasePathSubfolderOnExit
   $translatedBasePath = TranslateText($AutoProp_BasePath)
   
   ;Handle run-sub folder generation & removal
   if $AutoProp_GenerateSubFolder then 
   $OutboundVar_BasePathOut = $translatedBasePath & "\" & $StcRunGuid & "\"
   ActionStepFeedbackEx("Workflow Settings","Action","76cfe1c2-e082-41cb-8a22-66b8349a671c", "Info", "An additional subfolder: " & $StcRunGuid &" will be generated for the current workflow run.",0)
   _NgCoreLogAnnotationText( "76cfe1c2-e082-41cb-8a22-66b8349a671c", "An additional subfolder: " & $StcRunGuid &" was generated for the current workflow run.")
   If True then
   ActionStepFeedbackEx("Workflow Settings","Action","76cfe1c2-e082-41cb-8a22-66b8349a671c", "Info", "Removing Base Path subfolder on exit is enabled.",0)
   _NgCoreLogAnnotationText( "76cfe1c2-e082-41cb-8a22-66b8349a671c", "Removing Base Path subfolder on exit was enabled.")
   else
   ActionStepFeedbackEx("Workflow Settings","Action","76cfe1c2-e082-41cb-8a22-66b8349a671c", "Info", "Removing Base Path subfolder on exit is disabled.",0)
   EndIf
   
   else
   
   $OutboundVar_BasePathOut = $translatedBasePath & "\"
   
   EndIf
   
   
   
   ;Base Path registration
   If FileExists($translatedBasePath) Then
   
   	StcSetBasePathFolder($OutboundVar_BasePathOut)
   
   	Local $p_ResultText
   	Local $__Success = True ; local check for NgCore Call success
   	$__Success = __StcNgRegisterBasePath($OutboundVar_BasePathOut, $p_ResultText, "76cfe1c2-e082-41cb-8a22-66b8349a671c",  @ScriptLineNumber, "Settings")
   
   	Local $__BasePathFeedbackType = $__Success ? "Info" : "Error"
   	Local $__BasePathMessage = $__Success ? "StwsBasePath registration for the current run succeeded: '" & $OutboundVar_BasePathOut & "'" _
   			  : ("StwsBasePath registration for the current run failed. Error details: " & $p_ResultText)
   
   	ActionStepFeedbackEx("Workflow Settings","Action","76cfe1c2-e082-41cb-8a22-66b8349a671c", $__BasePathFeedbackType, $__BasePathMessage, 0)
   	_NgCoreLogAnnotationText( "76cfe1c2-e082-41cb-8a22-66b8349a671c", $__BasePathMessage)
   
   	;Allowed paths registration
   	
   	If $__Success Then
   					__DisableAllowedPathsLimitation("76cfe1c2-e082-41cb-8a22-66b8349a671c",  @ScriptLineNumber, "Settings")
   			writelog("Allowed Path Limitation for File Operations is disabled")
   			ActionStepFeedbackEx("Workflow Settings","Action","76cfe1c2-e082-41cb-8a22-66b8349a671c", "Info", "Allowed Path Limitation for File Operations is disabled.",0)
   		
   		$__Success = __StcNgRegisterProxySettings($AutoProp_ProxySettingAsInt, $AutoProp_ProxyUrl, $AutoProp_IsUseProxyAuthChecked, $AutoProp_ProxyAccount, "76cfe1c2-e082-41cb-8a22-66b8349a671c",  @ScriptLineNumber, "Settings")
   	EndIf
   
   	; if one of the allowed pahts calls failed, we go to error state, but only if error handling is enabled:
   	$__gStcInitSectionSuccess = CheckErrorHandling(1, $__Success ? 1 : -1 , "76cfe1c2-e082-41cb-8a22-66b8349a671c", @ScriptLineNumber, "Settings" ) < 0 ? False : True
   	$__gStcGenerateSubBasePathFolder = $AutoProp_GenerateSubFolder
   
   	$Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "76cfe1c2-e082-41cb-8a22-66b8349a671c", @ScriptLineNumber, "Settings"  ) 
   
   Else
   
   	ActionStepFeedbackEx("Workflow Settings","Action","76cfe1c2-e082-41cb-8a22-66b8349a671c", "Error", "Base path does not exist: '" & $translatedBasePath & "'", 0)
   	_NgCoreLogAnnotationText( "76cfe1c2-e082-41cb-8a22-66b8349a671c", "Base path does not exist: '" & $translatedBasePath & "'")
   	$__gStcInitSectionSuccess = False
   	$Run = -1;
   
   EndIf
   
   
   ;-----------------------------------------------------------------------
   ;## End of transaction step: Settings;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
     Global $Settings_BasePath = $OutboundVar_BasePathOut  ; declare variable source. Will be referenced by other action steps 
   
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "76cfe1c2-e082-41cb-8a22-66b8349a671c", true )
       
 OnEndOfInitSection( "fd74f7b8-1fb7-48f7-bede-4b9d6f303148", true )
 ; Now it's save to enable the protector, because it may use variables defined by SBVs!
 StcProtectorEnable()
 ;-----------------------------------------------------------------------
 ;# End of Initialization Section: Workflow Initialization;
 ;-----------------------------------------------------------------------
  

   
 ;----------------<-----------------------------------------------------------
 ;--------------<
 ;------------<   Measurement: <Activity Workflow>
 ;--------------< 
 ;----------------<-----------------------------------------------------------
    Global $MeasurementName = "Activity Workflow"
    Global $Pass_Activity_Workflow
    Global $UsedErrorCycles = 0
    Global $g_LastControlBlockLevelName = ""
    Global $g_ControlBlockLevelName = "MainMeasurement"
    Global $PrepareCodeSuccess = True
    Global $MeasurementOverallTimeTimer = TimerStart()
    
    ; Set Default current measurement iteration!
    $enter = 1
 
    ; set default uuid as default uuid for actioin feedback:
    ActionFeedbackSetDefaultUuid("cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed")
    ; Inform user about the disabled STC-Guard. In case of Design Mode run, the Guard may also disabled!
    If $StcDisableGuard Then ActionStepFeedbackEx( "StcGuardMode", "Action", default, "Warning", "The STC Guard is disabled by project setting.!", @ScriptLineNumber )
 
    
    StcSetGeneralTimeout( 45, True ) ;called internally!
    $g_StcMaxConfiguredExecutionTries = 1   ; internal STC funclib used value
    Local $errorcycles = $g_StcMaxConfiguredExecutionTries              ;  old legacy name, may removed in the future!
    ActionStepFeedbackEx( "Activity Workflow", "Workflow", "cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed", "Info", "///-[ Workflow: 'Activity Workflow' started ]-\\\", @ScriptLineNumber ) 
    If StcIsDesignModeActive()  Then
       If $g_StcMaxConfiguredExecutionTries <> 1 Then
         $g_StcMaxConfiguredExecutionTries = 1
         ActionStepFeedbackEx( "Activity Workflow", "Workflow", "cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed", "Warning", "The workflow was started from WorkflowEditor in Design mode. Retries reduced to 1.", @ScriptLineNumber ) 
       EndIf
    EndIf
    Local $retrydelay = 60
 
    OnMeasurementStart( $MeasurementName, "cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed" )
    
 
    
    ;<<<<<<<<<<<<<       P r e p a r e  -- S e c t i o n    >>>>>>>>>>>>>>>>>>>>
    ; Some action steps may have prepare code which must be executed before the measurement starts.
        
     ;----------------------------------------------------------
     ;   >>>> Prepare Code for ReadFile Activity <<<<
     ;----------------------------------------------------------
     Local $File_controlled_Loop1_RecordCount = 0
     Local $File_controlled_Loop1_ColumnCount = 0
     
     Local $File_controlled_Loop1_ColumnNames, $File_controlled_Loop1_ColumTypes, $File_controlled_Loop1_FilterString, $File_controlled_Loop1_FilterUseRegex
     Dim $File_controlled_Loop1_ColumnNames[1]
     Dim $File_controlled_Loop1_ColumTypes[1] 
     Dim $File_controlled_Loop1_FilterString[1] 
     Dim $File_controlled_Loop1_FilterUseRegex[1] 
     
     $File_controlled_Loop1_ColumnNames[0] = "Shipment Id,Charge Type,POD,Container #,Available Time,Start Time,End Time,No of Days"
     $File_controlled_Loop1_ColumTypes[0]  = "STRING"
     $File_controlled_Loop1_FilterString[0]= ""
     $File_controlled_Loop1_FilterUseRegex[0]= "False"
     
     Local $AdditionalErrText = "" 
     Local $File_controlled_Loop1_Filename = "C:\Users\msps\Downloads\Addendum Template - Valid Shipment.csv"
     Global $File_controlled_Loop1_PrepareCodeSuccess = False
     
      
     $File_controlled_Loop1_ColumnCount = 1
     $File_controlled_Loop1_RecordCount = 9
     Dim $File_controlled_Loop1_Lines[9][1]
        ;---------------------------
        $File_controlled_Loop1_Lines[0][0] = "7873489,Detention,HJHGT,GA6778JK89,9/23/2022,9/23/2022,9/30/2022,1"
        ;---------------------------
        $File_controlled_Loop1_Lines[1][0] = "7873490,Detention,CJHGT,GA6778JK90,9/24/2022,9/24/2022,10/1/2022,2"
        ;---------------------------
        $File_controlled_Loop1_Lines[2][0] = "7873490,Detention,HWSD,GA6778JK91,9/25/2022,9/25/2022,10/2/2022,3"
        ;---------------------------
        $File_controlled_Loop1_Lines[3][0] = "7873492,Detention,HJHGT,GA6778JK92,9/26/2022,9/26/2022,10/3/2022,4"
        ;---------------------------
        $File_controlled_Loop1_Lines[4][0] = "7873492,Detention,BBHGT,GA6778JK93,9/27/2022,9/27/2022,10/4/2022,5"
        ;---------------------------
        $File_controlled_Loop1_Lines[5][0] = "7873492,Detention,HWSD,GA6778JK94,9/28/2022,9/28/2022,10/5/2022,6"
        ;---------------------------
        $File_controlled_Loop1_Lines[6][0] = "7873496,Detention,BBHGT,GA6778JK96,9/30/2022,9/30/2022,10/7/2022,8"
        ;---------------------------
        $File_controlled_Loop1_Lines[7][0] = "7873499,Detention,BBHGT,GA6778JK99,10/3/2022,10/3/2022,10/10/2022,11"
        ;---------------------------
        $File_controlled_Loop1_Lines[8][0] = "7873501,Detention,HJHGT,GA6778JK101,10/5/2022,10/5/2022,10/12/2022,13"
       
     If @error  Then
         ActionStepFeedbackEx( "File controlled Loop1", "ReadFromFile", "a337be02-28e3-4881-a3dc-4ca3f8979c60", "Error", StcAsReadTableGetErrorText($File_controlled_Loop1_RecordCount, @extended, $AdditionalErrText ), @ScriptLineNumber )   
         $File_controlled_Loop1_RecordCount = 0 ; in case of any error File_controlled_Loop1_RecordCount is a negative value. so set it back to 0!
     Else
         $File_controlled_Loop1_PrepareCodeSuccess = True
         Dim $File_controlled_Loop1_ShuffleTab[$File_controlled_Loop1_RecordCount]
     
         For $i=0 To $File_controlled_Loop1_RecordCount-1
             $File_controlled_Loop1_ShuffleTab[$i] = $i
         Next
     ;Record Count: 0
     EndIf
     ;----------------------------------------------------------
     
 
       
    ;----------------------------------------------------------
    ;   >>>> Prepare Code for ReadFile Activity <<<<
    ;----------------------------------------------------------
    Local $File_controlled_Loop_RecordCount = 0
    Local $File_controlled_Loop_ColumnCount = 0
    
    Local $File_controlled_Loop_ColumnNames, $File_controlled_Loop_ColumTypes, $File_controlled_Loop_FilterString, $File_controlled_Loop_FilterUseRegex
    Dim $File_controlled_Loop_ColumnNames[1]
    Dim $File_controlled_Loop_ColumTypes[1] 
    Dim $File_controlled_Loop_FilterString[1] 
    Dim $File_controlled_Loop_FilterUseRegex[1] 
    
    $File_controlled_Loop_ColumnNames[0] = "UniqueRow"
    $File_controlled_Loop_ColumTypes[0]  = "INT"
    $File_controlled_Loop_FilterString[0]= ""
    $File_controlled_Loop_FilterUseRegex[0]= "False"
    
    Local $AdditionalErrText = "" 
    Local $File_controlled_Loop_Filename = "C:\RPADemo\uniquefile.csv"
    Global $File_controlled_Loop_PrepareCodeSuccess = False
    
     
    $File_controlled_Loop_ColumnCount = 1
    $File_controlled_Loop_RecordCount = 6
    Dim $File_controlled_Loop_Lines[6][1]
       ;---------------------------
       $File_controlled_Loop_Lines[0][0] = "7873489"
       ;---------------------------
       $File_controlled_Loop_Lines[1][0] = "7873490"
       ;---------------------------
       $File_controlled_Loop_Lines[2][0] = "7873492"
       ;---------------------------
       $File_controlled_Loop_Lines[3][0] = "7873496"
       ;---------------------------
       $File_controlled_Loop_Lines[4][0] = "7873499"
       ;---------------------------
       $File_controlled_Loop_Lines[5][0] = "7873501"
      
    If @error  Then
        ActionStepFeedbackEx( "File controlled Loop", "ReadFromFile", "b690cb5e-f492-44ea-9ff5-b3a222ada79e", "Error", StcAsReadTableGetErrorText($File_controlled_Loop_RecordCount, @extended, $AdditionalErrText ), @ScriptLineNumber )   
        $File_controlled_Loop_RecordCount = 0 ; in case of any error File_controlled_Loop_RecordCount is a negative value. so set it back to 0!
    Else
        $File_controlled_Loop_PrepareCodeSuccess = True
        Dim $File_controlled_Loop_ShuffleTab[$File_controlled_Loop_RecordCount]
    
        For $i=0 To $File_controlled_Loop_RecordCount-1
            $File_controlled_Loop_ShuffleTab[$i] = $i
        Next
    ;Record Count: 0
    EndIf
    ;----------------------------------------------------------
    
 
 
 
    Do
       Local  $x = 0
       $Run = 1  ; don't make that local or global !!!
 
       ; if prepare code failed, so do abort workflow before it was started!
       If Not $PrepareCodeSuccess Then $Run = -1
         
       ;---------------------------------------------------------------------------
       ; Applications values
       ;---------------------------------------------------------------------------
       
             
       _StcTraDaHandleErrors() ; check here if TraceData Bridge error has occurred! If so script will be terminated!
 
       
       ;---------------------------------------------------------------------------
       ; Check if one of the InitSection AS has failed. If so, write action step feadback a terminate workflow run!
       If Not $__gStcInitSectionSuccess  Then
         ActionStepFeedbackEx( "Activity Workflow", "Workflow", "cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed", "Error", "One of the steps in the initialize section has failed, so further execution is not possible!", @ScriptLineNumber ) 
         $Run = -1 ; abort further execution!
       EndIf
 
       ;---------------------------------------------------------------------------
       ; Start of Workflow
       ;---------------------------------------------------------------------------
       $Errortext = ""
   
       If $run > 0 AND NOT OnCheckAbortState() Then
          OnMeasurementBlockStart("Transaction", "4988ec15-b4a8-4636-819c-ab7d07d91c29", 1, "Transaction")
            
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Transaction"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "4988ec15-b4a8-4636-819c-ab7d07d91c29", "Transaction", False, "$Dbg.Item.ActivityErrorHandling", @ScriptLineNumber)
   If True Then
   $LogfileIdent = 2 
   $TransStep = ("Transaction")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;---------------------------------------------------------------------------
   ;## Start of Transaction: Transaction;
   ;---------------------------------------------------------------------------
   
   OnTransactionStart("Transaction", "4988ec15-b4a8-4636-819c-ab7d07d91c29")
   $g_LastControlBlockLevelName = $g_ControlBlockLevelName
   $g_ControlBlockLevelName = "Transaction"
   
   $__gStcTransactionSqx += 1
   $g_TransAction = "Transaction" 
   $TransStep = "Transaction"
   
   If CheckBlockIteration() Then
      OnActionStart("Managed", "3b7f238c-f3ba-49ba-8ca9-f8eb7a898c9c", 2, "Managed")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Managed"
      
        
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "3b7f238c-f3ba-49ba-8ca9-f8eb7a898c9c", "Managed", True, "Normal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Managed", "3b7f238c-f3ba-49ba-8ca9-f8eb7a898c9c", @ScriptLineNumber, "Normal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Managed")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of : Managed;
      ;-----------------------------------------------------------------------
      $LogfileIdent = 3
      $g_LastControlBlockLevelName = $g_ControlBlockLevelName
      $g_ControlBlockLevelName = "Managed"
      OnEnterManagedBlock()
      While NOT OnCheckAbortState() ; Catch-Block-Loop
         ;-------------------------------------------------------------------
         ; Try section
         ;-------------------------------------------------------------------
         writelog("[DoAction.Enter]",3);
         While 1     ; Try-Block-Loop
      
            If CheckBlockIteration() Then
              OnActionStart("Delete File", "d025d9e9-c759-40a3-ae3f-e10c26654799", 3, "Delete File")
                   
           ;---------<[ Auto generated WFE debug prefix section!  ]>------
           _StcVarSysResetValidation()
           $AsLastResultValue = $AsResultValue
           $AsLastResultInfo  = $AsResultInfo
           $AsResultValue = 0
           $AsResultInfo  = "no Info"
           $g_LastAction = "Delete File"
           
           $OutboundVar_IsDeleted = Default 
           $OutboundVar_FileNameOut = Default 
           $OutboundVar_DirectoryPathOut = Default 
             
           Global $AutoProp_ForceErrorIfFileDoesntExists = False, $AutoProp_ForceErrorIfFileDoesntExists_HasVarMapping = False   
           Global $AutoProp_DirectoryPath = "C:\RPADemo", $AutoProp_DirectoryPath_HasVarMapping = False 
           Global $AutoProp_FileName = "uniquefile.csv", $AutoProp_FileName_HasVarMapping = False 
           Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
           Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
           
           _DbgSetCurrentLevel( 5 )
           OnPrefixCodeExecuted( "d025d9e9-c759-40a3-ae3f-e10c26654799", "Delete_File", True, "EhNormal", @ScriptLineNumber)
           If _StcVarSysValidateVarReference( "Delete_File", "d025d9e9-c759-40a3-ae3f-e10c26654799", @ScriptLineNumber, "EhNormal" ) Then
           $LogfileIdent = 5 
           $TransStep = ("Delete File")
           Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
           $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
           ;---------<[ End of debug prefix section!  ]>------------------
           
           ;-----------------------------------------------------------------------
           ;##### Start of transaction step: Delete File;
           ;-----------------------------------------------------------------------
           $delete_file_timeout = $AutoProp_UseGeneralTimeout ? StcGetGeneralTimeout() : $AutoProp_Timeout
           if $AutoProp_ForceErrorIfFileDoesntExists then 
           _NgCoreLogAnnotationText( "d025d9e9-c759-40a3-ae3f-e10c26654799", "Force error if file doesn't exists is enabled.")
           else
           _NgCoreLogAnnotationText( "d025d9e9-c759-40a3-ae3f-e10c26654799", "Force error if file doesn't exists is disabled.")
           EndIf
           Local $translatedFileName = TranslateText($AutoProp_FileName)
           
           Local $p_IsDeleted, $translatedDirectoryPath = TranslateText($AutoProp_DirectoryPath)
           Local $__Success = __StcNgDeleteFile(String($translatedDirectoryPath), _
           									String($translatedFileName), _
           									$delete_file_timeout, _
           									$AutoProp_ForceErrorIfFileDoesntExists, _
           									$p_IsDeleted, _
           									"d025d9e9-c759-40a3-ae3f-e10c26654799",  @ScriptLineNumber, "Delete File"  )  
           $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "d025d9e9-c759-40a3-ae3f-e10c26654799", @ScriptLineNumber, "Delete File"  ) 
           $OutboundVar_DirectoryPathOut = $translatedDirectoryPath
           $OutboundVar_FileNameOut = $translatedFileName
           $OutboundVar_IsDeleted = $p_IsDeleted = "true" ? true : false
           
           $ErrorHandling = 1
           ;-----------------------------------------------------------------------
           ;##### End of transaction step: Delete File;
           ;-----------------------------------------------------------------------
           
           
           EndIf  
             Global $Delete_File_IsDeleted = $OutboundVar_IsDeleted  ; declare variable source. Will be referenced by other action steps 
            Global $Delete_File_File_Name = $OutboundVar_FileNameOut  ; declare variable source. Will be referenced by other action steps 
            Global $Delete_File_Directory_Path = $OutboundVar_DirectoryPathOut  ; declare variable source. Will be referenced by other action steps 
           
           ;---------<[ End of debug suffix section!  ]>------------------
      
              OnActionEnd("Delete File", $run, "d025d9e9-c759-40a3-ae3f-e10c26654799", 3, "Delete File")
              If $run < 0 Then 
                 OnExitDoActionManagedBlock("4dd5ba05-121a-477e-8c25-36c5c5778583")
                 writelog("[DoAction.End   Delete File: Delete File] Managed block detects failure | Action Step Delete File failed | OnAction jumps to OnError Block",3);
                 ExitLoop 1
              EndIf
            EndIf 
      
            writelog("[DoAction.End] Leave DoAction with no error!",3);
            OnExitDoActionManagedBlock("4dd5ba05-121a-477e-8c25-36c5c5778583")
            ExitLoop 2
         WEnd     ; Try-Block-Loop End
      
         
         ;-------------------------------------------------------------------
         ; Catch section
         ;-------------------------------------------------------------------
         $Run = 1
      
         writelog("[OnError.Enter]",3);
         While NOT OnCheckAbortState() ;  Local Catch-Loop, loop over only if abort state is NOT reached!
                                       ;  This is only if the DoAction has executed an "Exit Workflow" AS!
      
            OnActionStart("Force OK State", "65648b04-aeb1-4c29-aee5-a335fa900059", 3, "Force OK State")
                 
           ;---------<[ Auto generated WFE debug prefix section!  ]>------
           _StcVarSysResetValidation()
           $AsLastResultValue = $AsResultValue
           $AsLastResultInfo  = $AsResultInfo
           $AsResultValue = 0
           $AsResultInfo  = "no Info"
           $g_LastAction = "Force OK State"
           
             
           
           _DbgSetCurrentLevel( 5 )
           OnPrefixCodeExecuted( "65648b04-aeb1-4c29-aee5-a335fa900059", "Force_OK_State", False, "EhNormal", @ScriptLineNumber)
           If True Then
           $LogfileIdent = 5 
           $TransStep = ("Force OK State")
           Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
           $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
           ;---------<[ End of debug prefix section!  ]>------------------
           
           ;-----------------------------------------------------------------------
           ;##### Start of transaction step: Force OK State;
           ;-----------------------------------------------------------------------
           $ErrorHandling = 1
           
           StcResetErrorState()
           
           ;-----------------------------------------------------------------------
           ;##### End of transaction step: Force OK State;
           ;-----------------------------------------------------------------------
           
           
           EndIf  
            
           ;---------<[ End of debug suffix section!  ]>------------------
      
            OnActionEnd("Force OK State", $run, "65648b04-aeb1-4c29-aee5-a335fa900059", 3, "Force OK State")
            If OnCheckAbortState() Then  ; Check if "Exit Workflow" was called. If so, leave block immediately 
              writelog("[OnError.End   Exit Workflow executed in OnError Block]",3);
              ExitLoop 2
            Endif 
            If $run < 0 Then
              writelog("[OnError.End   Failure in OnError Block]",3);
              OnExitDoErrorManagedBlock("f424351a-c4f5-40a2-8d65-dbcc3918d755")
              ExitLoop 2
            EndIf
      
      
      
            writelog("[OnError.End] Leave OnError with no further errors.",3);
            OnExitDoErrorManagedBlock("f424351a-c4f5-40a2-8d65-dbcc3918d755")
            ExitLoop 2
         WEnd  ; Local Catch-Loop End
      WEnd  ; Catch-Block-Loop End
      
      
      ;-------------------------------------------------------------------
      ; Finally section
      ;-------------------------------------------------------------------
      If NOT OnCheckAbortState() Then
          Local $RunValueAtLevel_3 = $Run  ; DoAlways is error state neutral, so store value for current level
          $Run = 1
      
          writelog("[DoAlways.Enter] Following actions executed with no error handling by default!",3);
          While 1    ; Always-Block-Loop
      
         ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
      
          writelog("[DoAlways.End",3);
          ExitLoop 1
          WEnd ; Always-Block-Loop
          $Run = $RunValueAtLevel_3  ; DoAlways is error state neutral, so get back value for this level
      
          $g_ControlBlockLevelName = $g_LastControlBlockLevelName 
          
          OnExitDoAlwaysManagedBlock("091671d8-c2f1-4e38-8d68-46d72f1d4ce9")  
      EndIf
      
      
      
      OnLeaveManagedBlock()
      ;-----------------------------------------------------------------------
      ;### End of : Managed;
      ;-----------------------------------------------------------------------
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Managed", $run, "3b7f238c-f3ba-49ba-8ca9-f8eb7a898c9c", 2, "Managed")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("Write to Text File1", "ec6287cf-627a-4e2f-be57-7a4a670dc704", 2, "Write to Text File")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Write to Text File1"
      
      $OutboundVar_TextToWriteOut = Default 
      $OutboundVar_IsWritten = Default 
      $OutboundVar_FileNameOut = Default 
      $OutboundVar_DirectoryPathOut = Default 
        
      Global $AutoProp_TextToWrite = "UniqueRow", $AutoProp_TextToWrite_HasVarMapping = False 
      Global $AutoProp_OverwriteFileContent = False, $AutoProp_OverwriteFileContent_HasVarMapping = False   
      Global $AutoProp_CreateIfNotExists = True, $AutoProp_CreateIfNotExists_HasVarMapping = False   
      Global $AutoProp_AddNewLine = True, $AutoProp_AddNewLine_HasVarMapping = False   
      Global $AutoProp_DirectoryPath = "C:\RPADemo", $AutoProp_DirectoryPath_HasVarMapping = False 
      Global $AutoProp_FileName = "uniquefile.csv", $AutoProp_FileName_HasVarMapping = False 
      Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
      Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "ec6287cf-627a-4e2f-be57-7a4a670dc704", "Write_to_Text_File1", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Write_to_Text_File1", "ec6287cf-627a-4e2f-be57-7a4a670dc704", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Write to Text File1")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Write to Text File1;
      ;-----------------------------------------------------------------------
      $write_file_timeout = $AutoProp_UseGeneralTimeout ? StcGetGeneralTimeout() : $AutoProp_Timeout
      
      Local $p_IsWritten, $translatedDirectoryPath = TranslateText($AutoProp_DirectoryPath)
      Local $translatedFileName = TranslateText($AutoProp_FileName)
      
      
      Local $__Success = __StcNgWriteToTextFile(  String($translatedFileName), _
      											String($translatedDirectoryPath), _
      											$AutoProp_CreateIfNotExists, _
      											$p_IsWritten, _
      											String($AutoProp_TextToWrite), _
      											$AutoProp_OverwriteFileContent, _
      											$AutoProp_AddNewLine, _
      											$write_file_timeout, _
      											"ec6287cf-627a-4e2f-be57-7a4a670dc704",  @ScriptLineNumber, "Write to Text File1")  
      
      $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "ec6287cf-627a-4e2f-be57-7a4a670dc704", @ScriptLineNumber, "Write to Text File1"  ) 
      $OutboundVar_DirectoryPathOut = $translatedDirectoryPath
      $OutboundVar_FileNameOut = $translatedFileName
      $OutboundVar_TextToWriteOut = $AutoProp_TextToWrite
      $OutboundVar_IsWritten = $p_IsWritten = "true" ? true : false
      
      $ErrorHandling = 1
      ;-----------------------------------------------------------------------
      ;### End of transaction step: Write to Text File1;
      ;-----------------------------------------------------------------------
      
      
      EndIf  
        Global $Write_to_Text_File1_Text_To_Write = $OutboundVar_TextToWriteOut  ; declare variable source. Will be referenced by other action steps 
       Global $Write_to_Text_File1_IsWritten = $OutboundVar_IsWritten  ; declare variable source. Will be referenced by other action steps 
       Global $Write_to_Text_File1_File_Name = $OutboundVar_FileNameOut  ; declare variable source. Will be referenced by other action steps 
       Global $Write_to_Text_File1_Directory_Path = $OutboundVar_DirectoryPathOut  ; declare variable source. Will be referenced by other action steps 
      
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Write to Text File1", $run, "ec6287cf-627a-4e2f-be57-7a4a670dc704", 2, "Write to Text File")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("Get Unique Row Value", "5e4aa0df-c984-45aa-bd53-3b6b3c2d6ec0", 2, "Group")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Get Unique Row Value (Group)"
      
        
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "5e4aa0df-c984-45aa-bd53-3b6b3c2d6ec0", "Get_Unique_Row_Value_28Group29", False, "EhNormal", @ScriptLineNumber)
      If True Then
      $LogfileIdent = 3 
      $TransStep = ("Get Unique Row Value (Group)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Get Unique Row Value (Group);
      ;-----------------------------------------------------------------------
      $g_LastControlBlockLevelName = $g_ControlBlockLevelName
      $g_ControlBlockLevelName = "Get Unique Row Value (Group)"
      
        ;       
                  If CheckBlockIteration() Then
                     OnActionStart("File controlled Loop1", "a337be02-28e3-4881-a3dc-4ca3f8979c60", 3, "File controlled Loop")
                         
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "File controlled Loop1"
          
            
          Global $AutoProp_UseTypeTextOnly = False, $AutoProp_UseTypeTextOnly_HasVarMapping = False   
          Global $AutoProp_RandomFileRead = False, $AutoProp_RandomFileRead_HasVarMapping = False   
          Global $AutoProp_HasHeaderLine = True, $AutoProp_HasHeaderLine_HasVarMapping = False   
          Global $AutoProp_FileAndPath = "C:\Users\msps\Downloads\Addendum Template - Valid Shipment.csv", $AutoProp_FileAndPath_HasVarMapping = False 
          Global $AutoProp_IsIn3rdParty = False, $AutoProp_IsIn3rdParty_HasVarMapping = False   
          Global $AutoProp_LimitIterations = False, $AutoProp_LimitIterations_HasVarMapping = False   
          Global $AutoProp_IterationCount = 1, $AutoProp_IterationCount_HasVarMapping = False   
          Global $AutoProp_UseSeperateExecutionPath = False, $AutoProp_UseSeperateExecutionPath_HasVarMapping = False   
          Global $AutoProp_SeperateExecutionPath = "", $AutoProp_SeperateExecutionPath_HasVarMapping = False 
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "a337be02-28e3-4881-a3dc-4ca3f8979c60", "File_controlled_Loop1", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "File_controlled_Loop1", "a337be02-28e3-4881-a3dc-4ca3f8979c60", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("File controlled Loop1")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: File controlled Loop1;
          ;-----------------------------------------------------------------------
          Local $File_controlled_Loop1__ErrorHandling = 1  ; 0 is None, 1 is Normal
          Local $File_controlled_Loop1__StartedLoopIterations = 0
          
          if( $File_controlled_Loop1_PrepareCodeSuccess ) Then
             Local $LoopErrorHandling = 2
          
             Local $File_controlled_Loop1_Record = 0 
             Local $File_controlled_Loop1_Col = 0
             Global $File_controlled_Loop1_ColumnsActual
             Dim   $File_controlled_Loop1_ColumnsActual[$File_controlled_Loop1_ColumnCount]
          
             ; Now iterate over all records!
             For $File_controlled_Loop1_Record=0  TO $File_controlled_Loop1_RecordCount-1
                  writelog("[Read File. Loop Count is: " & $File_controlled_Loop1_Record & "]")
                  $File_controlled_Loop1__StartedLoopIterations += 1
                  OnStartLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                  
                   Local $CurrentLine = ""
                   ; Assign the columns for the current record:
                   For $File_controlled_Loop1_Col = 0 To $File_controlled_Loop1_ColumnCount-1
                       ; First check Type!
                       Local $StrVar = $File_controlled_Loop1_Lines[$File_controlled_Loop1_ShuffleTab[$File_controlled_Loop1_Record]][$File_controlled_Loop1_Col]
                       Local $var = StcConvertStrType( $StrVar, $File_controlled_Loop1_ColumTypes[$File_controlled_Loop1_Col] )
                       If @error Then
                          ActionStepFeedbackEx( "File controlled Loop1", "ReadFromFile", "a337be02-28e3-4881-a3dc-4ca3f8979c60", "Error", "Detect Column '" & $File_controlled_Loop1_ColumnNames[$File_controlled_Loop1_Col] & "' witch Datatype mismatch at record: " & $File_controlled_Loop1_ShuffleTab[$File_controlled_Loop1_Record]+1 & ". Found '" & $StrVar & "' which is not a " & $File_controlled_Loop1_ColumTypes[$File_controlled_Loop1_Col]  , @ScriptLineNumber )    
                          $File_controlled_Loop1_ColumnsActual[$File_controlled_Loop1_Col] = 0
                          $run = -1
                          ExitLoop 
                       Else
                          $File_controlled_Loop1_ColumnsActual[$File_controlled_Loop1_Col] = $Var
                       EndIf
                       $CurrentLine &= "'" & $File_controlled_Loop1_ColumnNames[$File_controlled_Loop1_Col] & "': " &  $var & ";  " 
                   Next
                   ActionStepFeedbackEx( "File controlled Loop1", "ReadFromFile", "a337be02-28e3-4881-a3dc-4ca3f8979c60", "Info", "Execute Block with following variables: " & $CurrentLine , @ScriptLineNumber )          
          
                   Global $File_controlled_Loop1_Columns, $File_controlled_Loop1_Columns_Header
                   Dim $File_controlled_Loop1_Columns[$File_controlled_Loop1_ColumnCount], $File_controlled_Loop1_Columns_Header[$File_controlled_Loop1_ColumnCount]
                        Global $File_controlled_Loop1_Shipment_Id2CCharge_Type2CPOD2CContainer_232CAvailable_Time2CStart_Time2CEnd_Time2CNo_of_Days = $File_controlled_Loop1_ColumnsActual[0]
                     $File_controlled_Loop1_Columns[0] = $File_controlled_Loop1_ColumnsActual[0]
          		   $File_controlled_Loop1_Columns_Header[0] = $File_controlled_Loop1_ColumnNames[0]
                      
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop1_ColumnSize  = $File_controlled_Loop1_ColumnCount
                     OnActionStart("String to Array1", "9ff0a3e6-da82-4803-98c1-113f8f89d8e4", 4, "String to Array")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "String to Array1"
               
               $OutboundVar_ResultAsArray = Default 
                 
               Global $AutoProp_InputString = _StcVarSysResolveVarReference( "File_controlled_Loop1_Shipment_Id2CCharge_Type2CPOD2CContainer_232CAvailable_Time2CStart_Time2CEnd_Time2CNo_of_Days"), $AutoProp_InputString_HasVarMapping = True 
               Global $AutoProp_Separator = ",", $AutoProp_Separator_HasVarMapping = False 
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "9ff0a3e6-da82-4803-98c1-113f8f89d8e4", "String_to_Array1", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "String_to_Array1", "9ff0a3e6-da82-4803-98c1-113f8f89d8e4", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("String to Array1")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: String to Array1;
               ;-----------------------------------------------------------------------
               
               Global $String_to_Array1_out_ResultAsArray
               
               Local $__Success = __StcNgSplitStringToArray(   $AutoProp_InputString, _
                                                               TranslateText($AutoProp_Separator), _
                                                               $String_to_Array1_out_ResultAsArray, _
                                                               "9ff0a3e6-da82-4803-98c1-113f8f89d8e4",  @ScriptLineNumber, "String to Array1")
               
               
               $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "9ff0a3e6-da82-4803-98c1-113f8f89d8e4", @ScriptLineNumber, "String to Array1"  ) 
               
               $OutboundVar_ResultAsArray = $String_to_Array1_out_ResultAsArray
               
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: String to Array1;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                 Global $String_to_Array1_ResultAsArray = $OutboundVar_ResultAsArray  ; declare variable source. Will be referenced by other action steps 
               
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("String to Array1", $run, "9ff0a3e6-da82-4803-98c1-113f8f89d8e4", 4, "String to Array")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at String to Array: String to Array1",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at String to Array: String to Array1",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop1_ColumnSize  = $File_controlled_Loop1_ColumnCount
                     OnActionStart("Read from Array1", "2a1a0199-fc8a-4898-bfe5-029efc96894f", 4, "Read from Array")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Read from Array1"
               
               $OutboundVar_OutValueAsString = Default 
               $OutboundVar_OutValueAsInt = Default 
               $OutboundVar_OutValueAsDouble = Default 
               $OutboundVar_OutValueAsBool = Default 
                 
               Global $AutoProp_Array = _StcVarSysResolveVarReference( "String_to_Array1_ResultAsArray"), $AutoProp_Array_HasVarMapping = True 
               Global $AutoProp_Index = 1, $AutoProp_Index_HasVarMapping = False   
               Global $AutoProp_GetAsCsv = False, $AutoProp_GetAsCsv_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "2a1a0199-fc8a-4898-bfe5-029efc96894f", "Read_from_Array1", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Read_from_Array1", "2a1a0199-fc8a-4898-bfe5-029efc96894f", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Read from Array1")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Read from Array1;
               ;-----------------------------------------------------------------------
               
               Global $Read_from_Array1_out_Succeeded
               Global $Read_from_Array1_out_ValueAsString
               
               Local $__Success = __StcNgVsGetValueAtIndex( _
                                                       $AutoProp_Array, _
                                                       $AutoProp_Index, _
                                                       $AutoProp_GetAsCsv, _
                                                       $Read_from_Array1_out_ValueAsString, _
                                                       $Read_from_Array1_out_Succeeded, _
                                                       "2a1a0199-fc8a-4898-bfe5-029efc96894f",  @ScriptLineNumber, "Read from Array1")  
               $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "2a1a0199-fc8a-4898-bfe5-029efc96894f", @ScriptLineNumber, "Read from Array1"  ) 
               
               $OutboundVar_OutValueAsString = $Read_from_Array1_out_ValueAsString
               $OutboundVar_OutValueAsInt    = Int($Read_from_Array1_out_ValueAsString)
               $OutboundVar_OutValueAsDouble = Number($Read_from_Array1_out_ValueAsString)
               ; To Bool, we search for True in String, otherwise False by default!
               $OutboundVar_OutValueAsBool = $OutboundVar_OutValueAsInt > 0 OR StringInStr( $Read_from_Array1_out_ValueAsString, "true", 2 ) > 0
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Read from Array1;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                 Global $Read_from_Array1_AsString = $OutboundVar_OutValueAsString  ; declare variable source. Will be referenced by other action steps 
                Global $Read_from_Array1_AsInt = $OutboundVar_OutValueAsInt  ; declare variable source. Will be referenced by other action steps 
                Global $Read_from_Array1_AsDouble = $OutboundVar_OutValueAsDouble  ; declare variable source. Will be referenced by other action steps 
                Global $Read_from_Array1_AsBool = $OutboundVar_OutValueAsBool  ; declare variable source. Will be referenced by other action steps 
               
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("Read from Array1", $run, "2a1a0199-fc8a-4898-bfe5-029efc96894f", 4, "Read from Array")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Read from Array: Read from Array1",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Read from Array: Read from Array1",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop1_ColumnSize  = $File_controlled_Loop1_ColumnCount
                     OnActionStart("Managed", "a2e44da5-b32e-4ddf-92e1-6cb29cc0134e", 4, "Managed")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Managed"
               
                 
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "a2e44da5-b32e-4ddf-92e1-6cb29cc0134e", "Managed", True, "Normal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Managed", "a2e44da5-b32e-4ddf-92e1-6cb29cc0134e", @ScriptLineNumber, "Normal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Managed")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of : Managed;
               ;-----------------------------------------------------------------------
               $LogfileIdent = 5
               $g_LastControlBlockLevelName = $g_ControlBlockLevelName
               $g_ControlBlockLevelName = "Managed"
               OnEnterManagedBlock()
               While NOT OnCheckAbortState() ; Catch-Block-Loop
                  ;-------------------------------------------------------------------
                  ; Try section
                  ;-------------------------------------------------------------------
                  writelog("[DoAction.Enter]",5);
                  While 1     ; Try-Block-Loop
               
                     If CheckBlockIteration() Then
                       OnActionStart("Check Value", "6160f6ce-9f32-438d-9dcd-034305d5c3f7", 5, "Check Value")
                              
                      ;---------<[ Auto generated WFE debug prefix section!  ]>------
                      _StcVarSysResetValidation()
                      $AsLastResultValue = $AsResultValue
                      $AsLastResultInfo  = $AsResultInfo
                      $AsResultValue = 0
                      $AsResultInfo  = "no Info"
                      $g_LastAction = "Check Value"
                      
                      $OutboundVar_CompareResult = Default 
                        
                      Global $AutoProp_CompareValueLeft = _StcVarSysResolveVarReference( "Read_from_Array1_AsInt"), $AutoProp_CompareValueLeft_HasVarMapping = True 
                      Global $AutoProp_CompareValueRight = _StcVarSysResolveVarReference( "Activity_Parameters_tempValue"), $AutoProp_CompareValueRight_HasVarMapping = True 
                      Global $AutoProp_CompareModeAsInt = 0, $AutoProp_CompareModeAsInt_HasVarMapping = False   
                      Global $AutoProp_CompareOperatorAsInt = 0, $AutoProp_CompareOperatorAsInt_HasVarMapping = False   
                      
                      _DbgSetCurrentLevel( 7 )
                      OnPrefixCodeExecuted( "6160f6ce-9f32-438d-9dcd-034305d5c3f7", "Check_Value", True, "EhNormal", @ScriptLineNumber)
                      If _StcVarSysValidateVarReference( "Check_Value", "6160f6ce-9f32-438d-9dcd-034305d5c3f7", @ScriptLineNumber, "EhNormal" ) Then
                      $LogfileIdent = 7 
                      $TransStep = ("Check Value")
                      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
                      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
                      ;---------<[ End of debug prefix section!  ]>------------------
                      
                      ;-----------------------------------------------------------------------
                      ;####### Start of transaction step: Check Value;
                      ;-----------------------------------------------------------------------
                      $ErrorHandling = 1
                      
                      $run = StcAsCompareValues( $OutboundVar_CompareResult, $AutoProp_CompareValueLeft, $AutoProp_CompareValueRight, $AutoProp_CompareModeAsInt, $AutoProp_CompareOperatorAsInt, "6160f6ce-9f32-438d-9dcd-034305d5c3f7", @ScriptLineNumber, "Check Value")        
                      StcSetResultValue($OutboundVar_CompareResult)
                      StcSetResultInfo("Last compare")
                      
                      
                      ;-----------------------------------------------------------------------
                      ;####### End of transaction step: Check Value;
                      ;-----------------------------------------------------------------------
                      
                      
                      EndIf  
                        Global $Check_Value_Compare_Result = $OutboundVar_CompareResult  ; declare variable source. Will be referenced by other action steps 
                      
                      ;---------<[ End of debug suffix section!  ]>------------------
               
                       OnActionEnd("Check Value", $run, "6160f6ce-9f32-438d-9dcd-034305d5c3f7", 5, "Check Value")
                       If $run < 0 Then 
                          OnExitDoActionManagedBlock("411acc04-b10a-42a1-9737-cd99240f77e9")
                          writelog("[DoAction.End   Check Value: Check Value] Managed block detects failure | Action Step Check Value failed | OnAction jumps to OnError Block",5);
                          ExitLoop 1
                       EndIf
                     EndIf 
               
                     writelog("[DoAction.End] Leave DoAction with no error!",5);
                     OnExitDoActionManagedBlock("411acc04-b10a-42a1-9737-cd99240f77e9")
                     ExitLoop 2
                  WEnd     ; Try-Block-Loop End
               
                  
                  ;-------------------------------------------------------------------
                  ; Catch section
                  ;-------------------------------------------------------------------
                  $Run = 1
               
                  writelog("[OnError.Enter]",5);
                  While NOT OnCheckAbortState() ;  Local Catch-Loop, loop over only if abort state is NOT reached!
                                                ;  This is only if the DoAction has executed an "Exit Workflow" AS!
               
                     OnActionStart("Force OK State", "585b55d5-ca5b-4518-bbd1-9682964eca24", 5, "Force OK State")
                            
                      ;---------<[ Auto generated WFE debug prefix section!  ]>------
                      _StcVarSysResetValidation()
                      $AsLastResultValue = $AsResultValue
                      $AsLastResultInfo  = $AsResultInfo
                      $AsResultValue = 0
                      $AsResultInfo  = "no Info"
                      $g_LastAction = "Force OK State"
                      
                        
                      
                      _DbgSetCurrentLevel( 7 )
                      OnPrefixCodeExecuted( "585b55d5-ca5b-4518-bbd1-9682964eca24", "Force_OK_State", False, "EhNormal", @ScriptLineNumber)
                      If True Then
                      $LogfileIdent = 7 
                      $TransStep = ("Force OK State")
                      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
                      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
                      ;---------<[ End of debug prefix section!  ]>------------------
                      
                      ;-----------------------------------------------------------------------
                      ;####### Start of transaction step: Force OK State;
                      ;-----------------------------------------------------------------------
                      $ErrorHandling = 1
                      
                      StcResetErrorState()
                      
                      ;-----------------------------------------------------------------------
                      ;####### End of transaction step: Force OK State;
                      ;-----------------------------------------------------------------------
                      
                      
                      EndIf  
                       
                      ;---------<[ End of debug suffix section!  ]>------------------
               
                     OnActionEnd("Force OK State", $run, "585b55d5-ca5b-4518-bbd1-9682964eca24", 5, "Force OK State")
                     If OnCheckAbortState() Then  ; Check if "Exit Workflow" was called. If so, leave block immediately 
                       writelog("[OnError.End   Exit Workflow executed in OnError Block]",5);
                       ExitLoop 2
                     Endif 
                     If $run < 0 Then
                       writelog("[OnError.End   Failure in OnError Block]",5);
                       OnExitDoErrorManagedBlock("252ba3c9-2aca-4759-a3b5-fae33b6de237")
                       ExitLoop 2
                     EndIf
               
               
               
                     writelog("[OnError.End] Leave OnError with no further errors.",5);
                     OnExitDoErrorManagedBlock("252ba3c9-2aca-4759-a3b5-fae33b6de237")
                     ExitLoop 2
                  WEnd  ; Local Catch-Loop End
               WEnd  ; Catch-Block-Loop End
               
               
               ;-------------------------------------------------------------------
               ; Finally section
               ;-------------------------------------------------------------------
               If NOT OnCheckAbortState() Then
                   Local $RunValueAtLevel_5 = $Run  ; DoAlways is error state neutral, so store value for current level
                   $Run = 1
               
                   writelog("[DoAlways.Enter] Following actions executed with no error handling by default!",5);
                   While 1    ; Always-Block-Loop
               
                  ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
               
                   writelog("[DoAlways.End",5);
                   ExitLoop 1
                   WEnd ; Always-Block-Loop
                   $Run = $RunValueAtLevel_5  ; DoAlways is error state neutral, so get back value for this level
               
                   $g_ControlBlockLevelName = $g_LastControlBlockLevelName 
                   
                   OnExitDoAlwaysManagedBlock("1364b037-3878-4704-b623-4a88ff5a9855")  
               EndIf
               
               
               
               OnLeaveManagedBlock()
               ;-----------------------------------------------------------------------
               ;##### End of : Managed;
               ;-----------------------------------------------------------------------
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("Managed", $run, "a2e44da5-b32e-4ddf-92e1-6cb29cc0134e", 4, "Managed")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Managed: Managed",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Managed: Managed",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
                  
          	   ; Actionstep: 'Message Box' is  disabled . No code generated!
             
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop1_ColumnSize  = $File_controlled_Loop1_ColumnCount
                     OnActionStart("Select Case", "377acb79-4c84-4d03-9195-c0c4496ead9c", 4, "Select Case")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Select Case (Select Case with Type <Alphanumeric>)"
               
                 
               Global $AutoProp_InboundCompareValueString = _StcVarSysResolveVarReference( "Check_Value_Compare_Result"), $AutoProp_InboundCompareValueString_HasVarMapping = True 
               Global $AutoProp_InboundCompareValueInt = 0, $AutoProp_InboundCompareValueInt_HasVarMapping = False   
               Global $AutoProp_InboundCompareValueBool = False, $AutoProp_InboundCompareValueBool_HasVarMapping = False   
               Global $AutoProp_InboundCompareValueFloat = 0, $AutoProp_InboundCompareValueFloat_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "377acb79-4c84-4d03-9195-c0c4496ead9c", "Select_Case_28Select_Case_with_Type_3CAlphanumeric3E29", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Select_Case_28Select_Case_with_Type_3CAlphanumeric3E29", "377acb79-4c84-4d03-9195-c0c4496ead9c", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Select Case (Select Case with Type <Alphanumeric>)")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               
               ;-----------------------------------------------------------------------
               ;##### Start of Select Select Case step: Select Case (Select Case with Type <Alphanumeric>);
               ;-----------------------------------------------------------------------
               ; need prefix because Select Case can be nested:
               Local $Select_Case__ErrorHandling = 1  ; 0 is None, 1 is Normal
               Local $Select_Case__InboundValue = Default
               Local $Select_Case__CaseType = Default
               
                     $Select_Case__CaseType = "Alphanumeric"
                     If $AutoProp_InboundCompareValueString_HasVarMapping Then 
                        $Select_Case__InboundValue = $AutoProp_InboundCompareValueString
                     ElseIf $AutoProp_InboundCompareValueFloat_HasVarMapping Then 
                        $Select_Case__InboundValue =  String($AutoProp_InboundCompareValueFloat)
                     ElseIf $AutoProp_InboundCompareValueInt_HasVarMapping Then 
                        $Select_Case__InboundValue = String($AutoProp_InboundCompareValueInt)
                     ElseIf $AutoProp_InboundCompareValueBool_HasVarMapping Then 
                        $Select_Case__InboundValue = String($AutoProp_InboundCompareValueBool)
                     EndIf
                             
               If Default = $Select_Case__InboundValue Then
                  ActionStepFeedbackEx( "Select Case (Select Case with Type <Alphanumeric>)", "Select Case", "377acb79-4c84-4d03-9195-c0c4496ead9c", "Error", "No input variable for Select Case type '" & $Select_Case__CaseType & "' defined. Also not possibe to convert another input variable to this type.", @ScriptLineNumber ) 
                  StcSetErrorState() 
               Else   
                             
               ;-------------------------------------------------------------------
               ; 'Select Case' Action Block
               ;-------------------------------------------------------------------
               Select 
               
                     ;+++++ [Case Block]--------------------------------------------------------------------------------------
                     Case StcCompareString(  "False",  "Fullmatch", $Select_Case__InboundValue, 50, "377acb79-4c84-4d03-9195-c0c4496ead9c")
                     ActionStepFeedbackEx("Select Case (Select Case with Type <Alphanumeric>)", "Select Case", "377acb79-4c84-4d03-9195-c0c4496ead9c", "Info", "Select<String>:  'False' Fullmatch '" & $Select_Case__InboundValue & "'.", @ScriptLineNumber) 
                     ; [END] Variable System internal assignment:
                     ; 2
               
                     If CheckBlockIteration() Then
                            OnActionStart("Write to Text File", "4a7de065-a10b-4ad8-bbc4-3eba3ca1aac5", 5, "Write to Text File")
                                   
                      ;---------<[ Auto generated WFE debug prefix section!  ]>------
                      _StcVarSysResetValidation()
                      $AsLastResultValue = $AsResultValue
                      $AsLastResultInfo  = $AsResultInfo
                      $AsResultValue = 0
                      $AsResultInfo  = "no Info"
                      $g_LastAction = "Write to Text File"
                      
                      $OutboundVar_TextToWriteOut = Default 
                      $OutboundVar_IsWritten = Default 
                      $OutboundVar_FileNameOut = Default 
                      $OutboundVar_DirectoryPathOut = Default 
                        
                      Global $AutoProp_TextToWrite = _StcVarSysResolveVarReference( "Read_from_Array1_AsString"), $AutoProp_TextToWrite_HasVarMapping = True 
                      Global $AutoProp_OverwriteFileContent = False, $AutoProp_OverwriteFileContent_HasVarMapping = False   
                      Global $AutoProp_CreateIfNotExists = True, $AutoProp_CreateIfNotExists_HasVarMapping = False   
                      Global $AutoProp_AddNewLine = True, $AutoProp_AddNewLine_HasVarMapping = False   
                      Global $AutoProp_DirectoryPath = "C:\RPADemo", $AutoProp_DirectoryPath_HasVarMapping = False 
                      Global $AutoProp_FileName = "uniquefile.csv", $AutoProp_FileName_HasVarMapping = False 
                      Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
                      Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
                      
                      _DbgSetCurrentLevel( 7 )
                      OnPrefixCodeExecuted( "4a7de065-a10b-4ad8-bbc4-3eba3ca1aac5", "Write_to_Text_File", True, "EhNormal", @ScriptLineNumber)
                      If _StcVarSysValidateVarReference( "Write_to_Text_File", "4a7de065-a10b-4ad8-bbc4-3eba3ca1aac5", @ScriptLineNumber, "EhNormal" ) Then
                      $LogfileIdent = 7 
                      $TransStep = ("Write to Text File")
                      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
                      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
                      ;---------<[ End of debug prefix section!  ]>------------------
                      
                      ;-----------------------------------------------------------------------
                      ;####### Start of transaction step: Write to Text File;
                      ;-----------------------------------------------------------------------
                      $write_file_timeout = $AutoProp_UseGeneralTimeout ? StcGetGeneralTimeout() : $AutoProp_Timeout
                      
                      Local $p_IsWritten, $translatedDirectoryPath = TranslateText($AutoProp_DirectoryPath)
                      Local $translatedFileName = TranslateText($AutoProp_FileName)
                      
                      
                      Local $__Success = __StcNgWriteToTextFile(  String($translatedFileName), _
                      											String($translatedDirectoryPath), _
                      											$AutoProp_CreateIfNotExists, _
                      											$p_IsWritten, _
                      											String($AutoProp_TextToWrite), _
                      											$AutoProp_OverwriteFileContent, _
                      											$AutoProp_AddNewLine, _
                      											$write_file_timeout, _
                      											"4a7de065-a10b-4ad8-bbc4-3eba3ca1aac5",  @ScriptLineNumber, "Write to Text File")  
                      
                      $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "4a7de065-a10b-4ad8-bbc4-3eba3ca1aac5", @ScriptLineNumber, "Write to Text File"  ) 
                      $OutboundVar_DirectoryPathOut = $translatedDirectoryPath
                      $OutboundVar_FileNameOut = $translatedFileName
                      $OutboundVar_TextToWriteOut = $AutoProp_TextToWrite
                      $OutboundVar_IsWritten = $p_IsWritten = "true" ? true : false
                      
                      $ErrorHandling = 1
                      ;-----------------------------------------------------------------------
                      ;####### End of transaction step: Write to Text File;
                      ;-----------------------------------------------------------------------
                      
                      
                      EndIf  
                        Global $Write_to_Text_File_Text_To_Write = $OutboundVar_TextToWriteOut  ; declare variable source. Will be referenced by other action steps 
                       Global $Write_to_Text_File_IsWritten = $OutboundVar_IsWritten  ; declare variable source. Will be referenced by other action steps 
                       Global $Write_to_Text_File_File_Name = $OutboundVar_FileNameOut  ; declare variable source. Will be referenced by other action steps 
                       Global $Write_to_Text_File_Directory_Path = $OutboundVar_DirectoryPathOut  ; declare variable source. Will be referenced by other action steps 
                      
                      ;---------<[ End of debug suffix section!  ]>------------------
               
                            OnActionEnd("Write to Text File", $run, "4a7de065-a10b-4ad8-bbc4-3eba3ca1aac5", 5, "Write to Text File")
                     EndIf
               
                     If CheckBlockIteration() Then
                            OnActionStart("Math Operations", "baae14c6-cfcd-47dc-9d13-110357542c6d", 5, "Math Operations")
                                   
                      ;---------<[ Auto generated WFE debug prefix section!  ]>------
                      _StcVarSysResetValidation()
                      $AsLastResultValue = $AsResultValue
                      $AsLastResultInfo  = $AsResultInfo
                      $AsResultValue = 0
                      $AsResultInfo  = "no Info"
                      $g_LastAction = "Math Operations ({a}={a}+1)"
                      
                      $OutboundVar_ResultAsInt = Default 
                        
                      Global $AutoProp_Variable1 = _StcVarSysResolveVarReference( "Activity_Parameters_nUniqueCounter"), $AutoProp_Variable1_HasVarMapping = True 
                      Global $AutoProp_Variable2 = 0, $AutoProp_Variable2_HasVarMapping = False   
                      Global $AutoProp_Variable3 = 0, $AutoProp_Variable3_HasVarMapping = False   
                      Global $AutoProp_Variable4 = 0, $AutoProp_Variable4_HasVarMapping = False   
                      Global $AutoProp_Variable5 = 0, $AutoProp_Variable5_HasVarMapping = False   
                      Global $AutoProp_Variable6 = 0, $AutoProp_Variable6_HasVarMapping = False   
                      Global $AutoProp_Variable7 = 0, $AutoProp_Variable7_HasVarMapping = False   
                      Global $AutoProp_Variable8 = 0, $AutoProp_Variable8_HasVarMapping = False   
                      Global $AutoProp_Variable9 = 0, $AutoProp_Variable9_HasVarMapping = False   
                      Global $AutoProp_Variable10 = 0, $AutoProp_Variable10_HasVarMapping = False   
                      Global $AutoProp_MathExpressionInUserInputFormat = "{a}={a}+1", $AutoProp_MathExpressionInUserInputFormat_HasVarMapping = False 
                      Global $AutoProp_OutboundVariableTypeAsInt = 1, $AutoProp_OutboundVariableTypeAsInt_HasVarMapping = False   
                      Global $AutoProp_MathExpression = "va0=va0+1", $AutoProp_MathExpression_HasVarMapping = False 
                      
                      _DbgSetCurrentLevel( 7 )
                      OnPrefixCodeExecuted( "baae14c6-cfcd-47dc-9d13-110357542c6d", "Math_Operations_287Ba7D3D7Ba7D2B129", True, "EhNormal", @ScriptLineNumber)
                      If _StcVarSysValidateVarReference( "Math_Operations_287Ba7D3D7Ba7D2B129", "baae14c6-cfcd-47dc-9d13-110357542c6d", @ScriptLineNumber, "EhNormal" ) Then
                      $LogfileIdent = 7 
                      $TransStep = ("Math Operations ({a}={a}+1)")
                      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
                      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
                      ;---------<[ End of debug prefix section!  ]>------------------
                      
                      ;-----------------------------------------------------------------------
                      ;####### Start of transaction step: Math Operations ({a}={a}+1);
                      ;-----------------------------------------------------------------------
                      
                      Global $Math_Operations_out_Success
                      Global $Math_Operations_out_ResultAsFloat
                      Global $Math_Operations_out_ResultAsInt
                      Global $Math_Operations_out_ErrorCode
                      
                      Local $__Success = __StcNgPerformMathOperation( _
                                                  $AutoProp_Variable1, _
                                                  $AutoProp_Variable2, _
                                                  $AutoProp_Variable3, _
                                                  $AutoProp_Variable4, _
                                                  $AutoProp_Variable5, _
                                                  $AutoProp_Variable6, _
                                                  $AutoProp_Variable7, _
                                                  $AutoProp_Variable8, _
                                                  $AutoProp_Variable9, _
                                                  $AutoProp_Variable10, _
                      							$AutoProp_MathExpression, _
                      							$AutoProp_OutboundVariableTypeAsInt, _
                                                  $Math_Operations_out_Success, _
                                                  $Math_Operations_out_ResultAsFloat, _
                                                  $Math_Operations_out_ResultAsInt, _
                                                  $Math_Operations_out_ErrorCode, _
                                                  "baae14c6-cfcd-47dc-9d13-110357542c6d",  @ScriptLineNumber, "Math Operations ({a}={a}+1)")  
                      $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "baae14c6-cfcd-47dc-9d13-110357542c6d", @ScriptLineNumber, "Math Operations ({a}={a}+1)"  ) 
                      
                      $OutboundVar_ResultAsFloat = $Math_Operations_out_ResultAsFloat
                      $OutboundVar_ResultAsInt = $Math_Operations_out_ResultAsInt
                      
                      $AsResultValue = $AutoProp_OutboundVariableTypeAsInt == 0 ? $OutboundVar_ResultAsFloat : $OutboundVar_ResultAsInt           ; the result of the calculation as float or int, depending on outbound variable type (0 stands for float, 1 stands for int)
                      $AsResultInfo = "Expression Result"
                      ;-----------------------------------------------------------------------
                      ;####### End of transaction step: Math Operations ({a}={a}+1);
                      ;-----------------------------------------------------------------------
                      
                      
                      EndIf  
                        Global $Math_Operations_ResultAsInt = $OutboundVar_ResultAsInt  ; declare variable source. Will be referenced by other action steps 
                      
                      ;---------<[ End of debug suffix section!  ]>------------------
               
                            OnActionEnd("Math Operations", $run, "baae14c6-cfcd-47dc-9d13-110357542c6d", 5, "Math Operations")
                     EndIf
                       
                     OnEndOfSwitchBlock( "89543260-db11-4911-812e-d9bb03116d5f" )
               
                     ;+++++ [Case Else Block]--------------------------------------------------------------------------------------
                     Case Else
                           If "String" <> "Bool" Then 
                                 ActionStepFeedbackEx("Select Case (Select Case with Type <Alphanumeric>)", "Select Case", "377acb79-4c84-4d03-9195-c0c4496ead9c", "Warning", "Execute DoElse block. No matching case for '" & $Select_Case__InboundValue & "' found.", @ScriptLineNumber) 
                           EndIf
               
                     ; [END] Variable System internal assignment:
                     StcResetErrorState() ; Error state depends on following steps. If no steps defined, the error state will be set later.
               
               
                     If CheckBlockIteration() Then
                            OnActionStart("Force OK State", "7b412665-6d2a-449d-9b51-d305a77e1138", 5, "Force OK State")
                                   
                      ;---------<[ Auto generated WFE debug prefix section!  ]>------
                      _StcVarSysResetValidation()
                      $AsLastResultValue = $AsResultValue
                      $AsLastResultInfo  = $AsResultInfo
                      $AsResultValue = 0
                      $AsResultInfo  = "no Info"
                      $g_LastAction = "Force OK State"
                      
                        
                      
                      _DbgSetCurrentLevel( 7 )
                      OnPrefixCodeExecuted( "7b412665-6d2a-449d-9b51-d305a77e1138", "Force_OK_State", False, "EhNormal", @ScriptLineNumber)
                      If True Then
                      $LogfileIdent = 7 
                      $TransStep = ("Force OK State")
                      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
                      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
                      ;---------<[ End of debug prefix section!  ]>------------------
                      
                      ;-----------------------------------------------------------------------
                      ;####### Start of transaction step: Force OK State;
                      ;-----------------------------------------------------------------------
                      $ErrorHandling = 1
                      
                      StcResetErrorState()
                      
                      ;-----------------------------------------------------------------------
                      ;####### End of transaction step: Force OK State;
                      ;-----------------------------------------------------------------------
                      
                      
                      EndIf  
                       
                      ;---------<[ End of debug suffix section!  ]>------------------
               
                            OnActionEnd("Force OK State", $run, "7b412665-6d2a-449d-9b51-d305a77e1138", 5, "Force OK State")
                     EndIf
                       OnEndOfSwitchErrorBlock("6ee0c13b-47bd-4d56-9271-e1ec43517703")
               EndSelect
               
               EndIf
                  ;-------------------------------------------------------------------
                  ; 'Select Case' End of Case sections
                  ;-------------------------------------------------------------------
               
               
                  ;-------------------------------------------------------------------
                  ; 'Switch Case' End of OnElse section
                  ;-------------------------------------------------------------------
                  $Run = CheckErrorHandling($Select_Case__ErrorHandling, $Run, "377acb79-4c84-4d03-9195-c0c4496ead9c", @ScriptLineNumber, "Select Case (Select Case with Type <Alphanumeric>)" ) 
               ;-----------------------------------------------------------------------
               ;##### End of Pattern Select step: Select Case (Select Case with Type <Alphanumeric>);
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("Select Case", $run, "377acb79-4c84-4d03-9195-c0c4496ead9c", 4, "Select Case")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Select Case: Select Case",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Select Case: Select Case",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop1_ColumnSize  = $File_controlled_Loop1_ColumnCount
                     OnActionStart("Set Temp Value", "25aaa937-373d-47fa-8cf7-016d38af9380", 4, "Set Variable")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Set Temp Value (Set Variable)"
               
                 
               Global $AutoProp_ModifiedVariable = _StcVarSysResolveVarReference( "Activity_Parameters_tempValue"), $AutoProp_ModifiedVariable_HasVarMapping = True 
               Global $AutoProp_NewValue = _StcVarSysResolveVarReference( "Read_from_Array1_AsInt"), $AutoProp_NewValue_HasVarMapping = True 
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "25aaa937-373d-47fa-8cf7-016d38af9380", "Set_Temp_Value_28Set_Variable29", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Set_Temp_Value_28Set_Variable29", "25aaa937-373d-47fa-8cf7-016d38af9380", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Set Temp Value (Set Variable)")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Set Temp Value (Set Variable);
               ;-----------------------------------------------------------------------
               ;
               ; Possible Properties: Name:'AutoProp_ModifiedVariable'   VarValue:'Activity_Parameters_tempValue'  Type:'VARIABLE'  InternalTye:'System.String'
               ; Source Data Type: INT
                If $AutoProp_ModifiedVariable_HasVarMapping Then 
               	 Local $__StcOldVarValue = StcStringTruncate( String($Activity_Parameters_tempValue) )
               	 Local $__StcModifiedVariableName = "Activity_Parameters_tempValue"
               	      $Activity_Parameters_tempValue = Int($AutoProp_NewValue) 	 	 	 	 	      
                    If IsDeclared( "Activity_Parameters_tempValue" & "_Changed") Then Assign( "Activity_Parameters_tempValue" & "_Changed", "True", 4)
               
               	 Local $__StcNewVarValue = StcStringTruncate( String($Activity_Parameters_tempValue) )
                EndIf
                ; Possible Properties: Name:'AutoProp_NewValue'   VarValue:'Read_from_Array1_AsInt'  Type:'VARIABLE'  InternalTye:'System.String'
               ; Source Data Type: INT
               
               Local $__StcLocalMessageText = "Variable '" & $__StcModifiedVariableName & "' was set to '" & $__StcNewVarValue & "'. Old value was: '" & $__StcOldVarValue & "'."
               ActionStepFeedbackEx("Set Temp Value (Set Variable)", "Set Variable", "25aaa937-373d-47fa-8cf7-016d38af9380", "Info", $__StcLocalMessageText, @ScriptLineNumber) 
               _NgCoreLogAnnotationText("25aaa937-373d-47fa-8cf7-016d38af9380", $__StcLocalMessageText )	
               $__StcLocalMessageText = ""
               StcResetErrorState() ; for now we have no error conditions!
               $Run = CheckErrorHandling(1, $run, "25aaa937-373d-47fa-8cf7-016d38af9380", @ScriptLineNumber, "Set Temp Value (Set Variable)"  ) 
               $AsResultValue= $__StcNewVarValue
               $AsResultInfo = "New Variable content:"  
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Set Temp Value (Set Variable);
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("Set Temp Value", $run, "25aaa937-373d-47fa-8cf7-016d38af9380", 4, "Set Variable")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Set Variable: Set Temp Value",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Set Variable: Set Temp Value",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop1_ColumnSize  = $File_controlled_Loop1_ColumnCount
                     OnActionStart("Set UniqueCounter Variable", "8805fb1b-8ee5-4129-8c7e-74325818b0df", 4, "Set Variable")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Set UniqueCounter Variable (Set Variable)"
               
                 
               Global $AutoProp_ModifiedVariable = _StcVarSysResolveVarReference( "Activity_Parameters_nUniqueCounter"), $AutoProp_ModifiedVariable_HasVarMapping = True 
               Global $AutoProp_NewValue = _StcVarSysResolveVarReference( "Math_Operations_ResultAsInt"), $AutoProp_NewValue_HasVarMapping = True 
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "8805fb1b-8ee5-4129-8c7e-74325818b0df", "Set_UniqueCounter_Variable_28Set_Variable29", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Set_UniqueCounter_Variable_28Set_Variable29", "8805fb1b-8ee5-4129-8c7e-74325818b0df", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Set UniqueCounter Variable (Set Variable)")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Set UniqueCounter Variable (Set Variable);
               ;-----------------------------------------------------------------------
               ;
               ; Possible Properties: Name:'AutoProp_ModifiedVariable'   VarValue:'Activity_Parameters_nUniqueCounter'  Type:'VARIABLE'  InternalTye:'System.String'
               ; Source Data Type: INT
                If $AutoProp_ModifiedVariable_HasVarMapping Then 
               	 Local $__StcOldVarValue = StcStringTruncate( String($Activity_Parameters_nUniqueCounter) )
               	 Local $__StcModifiedVariableName = "Activity_Parameters_nUniqueCounter"
               	      $Activity_Parameters_nUniqueCounter = Int($AutoProp_NewValue) 	 	 	 	 	      
                    If IsDeclared( "Activity_Parameters_nUniqueCounter" & "_Changed") Then Assign( "Activity_Parameters_nUniqueCounter" & "_Changed", "True", 4)
               
               	 Local $__StcNewVarValue = StcStringTruncate( String($Activity_Parameters_nUniqueCounter) )
                EndIf
                ; Possible Properties: Name:'AutoProp_NewValue'   VarValue:'Math_Operations_ResultAsInt'  Type:'VARIABLE'  InternalTye:'System.String'
               ; Source Data Type: INT
               
               Local $__StcLocalMessageText = "Variable '" & $__StcModifiedVariableName & "' was set to '" & $__StcNewVarValue & "'. Old value was: '" & $__StcOldVarValue & "'."
               ActionStepFeedbackEx("Set UniqueCounter Variable (Set Variable)", "Set Variable", "8805fb1b-8ee5-4129-8c7e-74325818b0df", "Info", $__StcLocalMessageText, @ScriptLineNumber) 
               _NgCoreLogAnnotationText("8805fb1b-8ee5-4129-8c7e-74325818b0df", $__StcLocalMessageText )	
               $__StcLocalMessageText = ""
               StcResetErrorState() ; for now we have no error conditions!
               $Run = CheckErrorHandling(1, $run, "8805fb1b-8ee5-4129-8c7e-74325818b0df", @ScriptLineNumber, "Set UniqueCounter Variable (Set Variable)"  ) 
               $AsResultValue= $__StcNewVarValue
               $AsResultInfo = "New Variable content:"  
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Set UniqueCounter Variable (Set Variable);
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("Set UniqueCounter Variable", $run, "8805fb1b-8ee5-4129-8c7e-74325818b0df", 4, "Set Variable")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Set Variable: Set UniqueCounter Variable",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Set Variable: Set UniqueCounter Variable",4)
                            OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
             
               ;ActionStepFeedbackEx( "File controlled Loop1", "BreakLoop", "a337be02-28e3-4881-a3dc-4ca3f8979c60", "Info", "Loop passed " & $File_controlled_Loop1_Record+1 & " time(s) of " & $File_controlled_Loop1_RecordCount & ".", @ScriptLineNumber )   
               OnEndLoopIteration("a337be02-28e3-4881-a3dc-4ca3f8979c60") 
               If $BreakNextLoop Then exitloop
               writelog("[Pass Loop: $operatorName: " & $File_controlled_Loop1_Record & "]",4)
             Next
          Else   
             ActionStepFeedbackEx( "File controlled Loop1", "ReadFromFile", "a337be02-28e3-4881-a3dc-4ca3f8979c60", "Error", "Loop operation not executed, because loop init failed! Script Execution aborted.", @ScriptLineNumber )          
             StcSetErrorState()
          EndIf ; check for $File_controlled_Loop1_PrepareCodeSuccess   
          
          OnEndLoopExecuted( "a337be02-28e3-4881-a3dc-4ca3f8979c60", $File_controlled_Loop1__StartedLoopIterations, $File_controlled_Loop1_RecordCount )
          
          $run = CheckErrorHandling($File_controlled_Loop1__ErrorHandling, $run, "a337be02-28e3-4881-a3dc-4ca3f8979c60", @ScriptLineNumber, "File controlled Loop1" ) 
          
          
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: File controlled Loop1;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                     OnActionEnd("File controlled Loop1", $run, "a337be02-28e3-4881-a3dc-4ca3f8979c60", 3, "File controlled Loop")
                  EndIf
                         
                  If CheckBlockIteration() Then
                     OnActionStart("Unique", "a27cd91e-0511-4cef-a9b3-f630d45649eb", 3, "Message Box")
                         
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Unique (Message Box)"
          
            
          Global $AutoProp_Title = "Unique", $AutoProp_Title_HasVarMapping = False 
          Global $AutoProp_Text = _StcVarSysResolveVarReference( "Activity_Parameters_nUniqueCounter"), $AutoProp_Text_HasVarMapping = True 
          Global $AutoProp_Timeout = 10, $AutoProp_Timeout_HasVarMapping = False   
          Global $AutoProp_UseTimeout = True, $AutoProp_UseTimeout_HasVarMapping = False   
          Global $AutoProp_WinFlags = 4096, $AutoProp_WinFlags_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "a27cd91e-0511-4cef-a9b3-f630d45649eb", "Unique_28Message_Box29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Unique_28Message_Box29", "a27cd91e-0511-4cef-a9b3-f630d45649eb", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Unique (Message Box)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
           
          ;-----------------------------------------------------------------------
          ;#### Start of XXXX MessageBox step: Unique (Message Box);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          If $run > 0 Then
             If $AutoProp_UseTimeout Then
                StcAsMsgBox($AutoProp_WinFlags, $AutoProp_Title, $AutoProp_Text, $AutoProp_Timeout)
                ActionStepFeedbackEx( "Unique (Message Box)", "MessageBox", "a27cd91e-0511-4cef-a9b3-f630d45649eb", "Info", "Messagebox '" & $AutoProp_Title & "' displayed. Closed automatically after " & $AutoProp_Timeout & "seconds. ", @ScriptLineNumber )
             Else
                StcAsMsgBox($AutoProp_WinFlags, $AutoProp_Title, $AutoProp_Text)
                ActionStepFeedbackEx( "Unique (Message Box)", "MessageBox", "a27cd91e-0511-4cef-a9b3-f630d45649eb", "Warning", "Messagebox '" & $AutoProp_Title & "' displayed. No auto close activated! Must be closed manually by user action.", @ScriptLineNumber )
             Endif
             _NgCoreLogAnnotationText( "a27cd91e-0511-4cef-a9b3-f630d45649eb", "Text: " & $AutoProp_Text)
          EndIf
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Unique (Message Box);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                     OnActionEnd("Unique", $run, "a27cd91e-0511-4cef-a9b3-f630d45649eb", 3, "Message Box")
                  EndIf
                      
      $g_ControlBlockLevelName = $g_LastControlBlockLevelName;
      
      ;-----------------------------------------------------------------------
      ;### End of transaction step: Get Unique Row Value (Group);
      ;-----------------------------------------------------------------------
      
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Get Unique Row Value", $run, "5e4aa0df-c984-45aa-bd53-3b6b3c2d6ec0", 2, "Group")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("Run Program", "4c0a4f8e-98cc-4963-9ec2-8bab775ab50b", 2, "Run Program")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Run Program (Run Program EXCEL.EXE)"
      
      $OutboundVar_PID = Default 
      $OutboundVar_Executable = Default 
      $OutboundVar_WorkingDir = Default 
      $OutboundVar_WHwnd = Default 
        
      Global $AutoProp_WindowFlagState = "Maximized", $AutoProp_WindowFlagState_HasVarMapping = False 
      Global $AutoProp_FileName = "C:\Program Files\Microsoft Office\root\Office16\EXCEL.EXE", $AutoProp_FileName_HasVarMapping = False 
      Global $AutoProp_CommandLineParameters = """Addendum Template - Valid Shipment.csv""", $AutoProp_CommandLineParameters_HasVarMapping = False 
      Global $AutoProp_WorkingDirectory = "C:\Users\msps\Downloads\", $AutoProp_WorkingDirectory_HasVarMapping = False 
      Global $AutoProp_RunIn3rdParty = False, $AutoProp_RunIn3rdParty_HasVarMapping = False   
      Global $AutoProp_WaitForWindowVisible = True, $AutoProp_WaitForWindowVisible_HasVarMapping = False   
      Global $AutoProp_WindowTitleToWaitFor = "Addendum Template.*", $AutoProp_WindowTitleToWaitFor_HasVarMapping = False 
      Global $AutoProp_UseRegEx = True, $AutoProp_UseRegEx_HasVarMapping = False   
      Global $AutoProp_UseCredentials = False, $AutoProp_UseCredentials_HasVarMapping = False   
      Global $AutoProp_InteractiveLogonWithProfile = False, $AutoProp_InteractiveLogonWithProfile_HasVarMapping = False   
      Global $AutoProp_InheritEnvironment = False, $AutoProp_InheritEnvironment_HasVarMapping = False   
      Global $AutoProp_CredentialUsername = "", $AutoProp_CredentialUsername_HasVarMapping = False 
      Global $AutoProp_CredentialPassword = "", $AutoProp_CredentialPassword_HasVarMapping = False 
      Global $AutoProp_CredentialDomain = "", $AutoProp_CredentialDomain_HasVarMapping = False 
      Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
      Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "4c0a4f8e-98cc-4963-9ec2-8bab775ab50b", "Run_Program_28Run_Program_EXCEL2EEXE29", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Run_Program_28Run_Program_EXCEL2EEXE29", "4c0a4f8e-98cc-4963-9ec2-8bab775ab50b", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Run Program (Run Program EXCEL.EXE)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Run Program (Run Program EXCEL.EXE);
      ;-----------------------------------------------------------------------
      $ErrorHandling = 1
      If $AutoProp_RunIn3rdParty Then
        Local $filename = @ScriptDir & "\3rdParty\" & $AutoProp_FileName
      Else
        Local $filename = $AutoProp_FileName
      EndIf
      Switch $AutoProp_WindowFlagState
          case "Normal"
              Local $WindowState = @SW_SHOWNORMAL
          case "Maximized"
              Local $WindowState = @SW_MAXIMIZE
          case "Minimized"
              Local $WindowState = @SW_MINIMIZE
          case Else 
              Local $WindowState = @SW_SHOWNORMAL
      EndSwitch
                                                                                     
      If $AutoProp_UseGeneralTimeout Then 
         $win_wait_timeout = StcGetGeneralTimeout()
      Else
         $win_wait_timeout = $AutoProp_Timeout 
      EndIf
      
      Local $__windowTitle = $AutoProp_WindowTitleToWaitFor
      If $AutoProp_UseRegEx Then $__windowTitle = _ExpandToTitleRegEx($__windowTitle)
      Local $commandLineParameters = TranslateText($AutoProp_CommandLineParameters) 
      Local $__PID=0, $__WinHandle=0, $__WorkingDir=""
      Local $ret = StcAsRun($filename & " " & $commandLineParameters, $AutoProp_WorkingDirectory, $WindowState, _
                            "4c0a4f8e-98cc-4963-9ec2-8bab775ab50b", @ScriptLineNumber,"Run Program (Run Program EXCEL.EXE)", _
      					  $AutoProp_WaitForWindowVisible, $__windowTitle, $win_wait_timeout, _
      					  $AutoProp_UseCredentials, $AutoProp_CredentialUsername, $AutoProp_CredentialPassword, $AutoProp_CredentialDomain, $AutoProp_InheritEnvironment, $AutoProp_InteractiveLogonWithProfile, _
      					  $__WinHandle, $__WorkingDir)
      $AsResultValue = $ret
      If ($ret = 0)  OR  ($AutoProp_WaitForWindowVisible AND  $__WinHandle = 0 ) Then  
         $Run = -1
         $AsResultInfo  = "The process could not be started."
      Else
         $Run = 1
         $AsResultInfo  = "The process was started with PID: "
      EndIf    
      $Run = CheckErrorHandling(1, $Run, "4c0a4f8e-98cc-4963-9ec2-8bab775ab50b", @ScriptLineNumber, "Run Program (Run Program EXCEL.EXE)"  ) 
      $OutboundVar_PID = "PID:" & $AsResultValue
      $OutboundVar_Executable = $AutoProp_FileName
      $OutboundVar_WorkingDir = $__WorkingDir
      $OutboundVar_WHwnd = $__WinHandle
      ;"file://#var#=@ScriptDir;\3rdParty\test.txt"
      ;-----------------------------------------------------------------------
      ;### End of transaction step: Run Program (Run Program EXCEL.EXE);
      ;-----------------------------------------------------------------------
      
      
      EndIf  
        Global $Run_Program_Process_ID = $OutboundVar_PID  ; declare variable source. Will be referenced by other action steps 
       Global $Run_Program_Executable = $OutboundVar_Executable  ; declare variable source. Will be referenced by other action steps 
       Global $Run_Program_Working_Dir = $OutboundVar_WorkingDir  ; declare variable source. Will be referenced by other action steps 
       Global $Run_Program_Process_Window_Handle = $OutboundVar_WHwnd  ; declare variable source. Will be referenced by other action steps 
      
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Run Program", $run, "4c0a4f8e-98cc-4963-9ec2-8bab775ab50b", 2, "Run Program")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("Sleep2", "f6fc3c0c-2638-418d-b21c-be5c97ffddb5", 2, "Sleep")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Sleep2 (Sleep 2000ms)"
      
        
      Global $AutoProp_SleepInterval = 2000, $AutoProp_SleepInterval_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "f6fc3c0c-2638-418d-b21c-be5c97ffddb5", "Sleep2_28Sleep_2000ms29", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Sleep2_28Sleep_2000ms29", "f6fc3c0c-2638-418d-b21c-be5c97ffddb5", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Sleep2 (Sleep 2000ms)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Sleep2 (Sleep 2000ms);
      ;-----------------------------------------------------------------------
      $ErrorHandling = 1
      Sleep ($AutoProp_SleepInterval) 
      _NgCoreLogAnnotationText( "f6fc3c0c-2638-418d-b21c-be5c97ffddb5", "Sleep was executed with a timeout of: " & $AutoProp_SleepInterval & "ms")
      $AsResultValue = $AutoProp_SleepInterval
      $AsResultInfo = "SleepTime in ms:"
      ;-----------------------------------------------------------------------
      ;### End of transaction step: Sleep2 (Sleep 2000ms);
      ;-----------------------------------------------------------------------
      
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Sleep2", $run, "f6fc3c0c-2638-418d-b21c-be5c97ffddb5", 2, "Sleep")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("Format  CSV File", "3ab98710-2b6f-46e8-a21d-a033ee6d57da", 2, "Keystrokes")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Format  CSV File (Keystrokes)"
      
        
      Global $AutoProp_UseCommonWindowTitle = False, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
      Global $AutoProp_CommonWindowTitle = "DefaultShipmentTracker - Excel", $AutoProp_CommonWindowTitle_HasVarMapping = False 
      Global $AutoProp_Pause = 10, $AutoProp_Pause_HasVarMapping = False   
      
           Global $AutoProp_Content[14] 
              Global $AutoProp_WindowTitle[14] 
              Global $AutoProp_WindowText[14] 
                                                                                                                                                                                                                                                $AutoProp_Content[0] = "{DOWN}"                         
              $AutoProp_WindowTitle[0] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[0] = ""                         
                $AutoProp_Content[1] = "{CTRLDOWN}"                         
              $AutoProp_WindowTitle[1] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[1] = ""                         
                $AutoProp_Content[2] = "{SHIFTDOWN}"                         
              $AutoProp_WindowTitle[2] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[2] = ""                         
                $AutoProp_Content[3] = "{RIGHT}"                         
              $AutoProp_WindowTitle[3] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[3] = ""                         
                $AutoProp_Content[4] = "{DOWN}"                         
              $AutoProp_WindowTitle[4] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[4] = ""                         
                $AutoProp_Content[5] = "{CTRLUP}"                         
              $AutoProp_WindowTitle[5] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[5] = ""                         
                $AutoProp_Content[6] = "{SHIFTUP}"                         
              $AutoProp_WindowTitle[6] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[6] = ""                         
                $AutoProp_Content[7] = "{ALTDOWN}"                         
              $AutoProp_WindowTitle[7] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[7] = ""                         
                $AutoProp_Content[8] = "ho"                         
              $AutoProp_WindowTitle[8] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[8] = ""                         
                $AutoProp_Content[9] = "i"                         
              $AutoProp_WindowTitle[9] = ""                         
              $AutoProp_WindowText[9] = ""                         
                $AutoProp_Content[10] = "{ALTUP}"                         
              $AutoProp_WindowTitle[10] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[10] = ""                         
                $AutoProp_Content[11] = "{LEFT}{UP}"                         
              $AutoProp_WindowTitle[11] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[11] = ""                         
                $AutoProp_Content[12] = "{SHIFTDOWN}{SPACE}{SHIFTUP}"                         
              $AutoProp_WindowTitle[12] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[12] = ""                         
                $AutoProp_Content[13] = "{CTRLDOWN}{SHIFTDOWN}l{SHIFTUP}{CTRLUP}"                         
              $AutoProp_WindowTitle[13] = "Addendum Template - Valid Shipment - Excel"                         
              $AutoProp_WindowText[13] = ""                         
        Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
      Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
      Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
      Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "3ab98710-2b6f-46e8-a21d-a033ee6d57da", "Format__CSV_File_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Format__CSV_File_28Keystrokes29", "3ab98710-2b6f-46e8-a21d-a033ee6d57da", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Format  CSV File (Keystrokes)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of Transaction step: Format  CSV File (Keystrokes);
      ;-----------------------------------------------------------------------
      $ErrorHandling = 1
      
      For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
          Local $windowText = ""
          Local $windowTitle = $AutoProp_WindowTitle[$idx]
          If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
          If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
          If @error = 1 Then ActionStepFeedbackEx( "Format  CSV File (Keystrokes)", "KeyStroke", "3ab98710-2b6f-46e8-a21d-a033ee6d57da", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
          If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
          StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "3ab98710-2b6f-46e8-a21d-a033ee6d57da", @ScriptLineNumber, "Format  CSV File (Keystrokes)" )
      Next
      ;-----------------------------------------------------------------------
      ;### End of Transaction step: Format  CSV File (Keystrokes);
      ;-----------------------------------------------------------------------
      
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Format  CSV File", $run, "3ab98710-2b6f-46e8-a21d-a033ee6d57da", 2, "Keystrokes")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("File controlled Loop", "b690cb5e-f492-44ea-9ff5-b3a222ada79e", 2, "File controlled Loop")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "File controlled Loop"
      
        
      Global $AutoProp_UseTypeTextOnly = False, $AutoProp_UseTypeTextOnly_HasVarMapping = False   
      Global $AutoProp_RandomFileRead = False, $AutoProp_RandomFileRead_HasVarMapping = False   
      Global $AutoProp_HasHeaderLine = True, $AutoProp_HasHeaderLine_HasVarMapping = False   
      Global $AutoProp_FileAndPath = "C:\RPADemo\uniquefile.csv", $AutoProp_FileAndPath_HasVarMapping = False 
      Global $AutoProp_IsIn3rdParty = False, $AutoProp_IsIn3rdParty_HasVarMapping = False   
      Global $AutoProp_LimitIterations = False, $AutoProp_LimitIterations_HasVarMapping = False   
      Global $AutoProp_IterationCount = 1, $AutoProp_IterationCount_HasVarMapping = False   
      Global $AutoProp_UseSeperateExecutionPath = False, $AutoProp_UseSeperateExecutionPath_HasVarMapping = False   
      Global $AutoProp_SeperateExecutionPath = "", $AutoProp_SeperateExecutionPath_HasVarMapping = False 
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "b690cb5e-f492-44ea-9ff5-b3a222ada79e", "File_controlled_Loop", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "File_controlled_Loop", "b690cb5e-f492-44ea-9ff5-b3a222ada79e", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("File controlled Loop")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: File controlled Loop;
      ;-----------------------------------------------------------------------
      Local $File_controlled_Loop__ErrorHandling = 1  ; 0 is None, 1 is Normal
      Local $File_controlled_Loop__StartedLoopIterations = 0
      
      if( $File_controlled_Loop_PrepareCodeSuccess ) Then
         Local $LoopErrorHandling = 2
      
         Local $File_controlled_Loop_Record = 0 
         Local $File_controlled_Loop_Col = 0
         Global $File_controlled_Loop_ColumnsActual
         Dim   $File_controlled_Loop_ColumnsActual[$File_controlled_Loop_ColumnCount]
      
         ; Now iterate over all records!
         For $File_controlled_Loop_Record=0  TO $File_controlled_Loop_RecordCount-1
              writelog("[Read File. Loop Count is: " & $File_controlled_Loop_Record & "]")
              $File_controlled_Loop__StartedLoopIterations += 1
              OnStartLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
              
               Local $CurrentLine = ""
               ; Assign the columns for the current record:
               For $File_controlled_Loop_Col = 0 To $File_controlled_Loop_ColumnCount-1
                   ; First check Type!
                   Local $StrVar = $File_controlled_Loop_Lines[$File_controlled_Loop_ShuffleTab[$File_controlled_Loop_Record]][$File_controlled_Loop_Col]
                   Local $var = StcConvertStrType( $StrVar, $File_controlled_Loop_ColumTypes[$File_controlled_Loop_Col] )
                   If @error Then
                      ActionStepFeedbackEx( "File controlled Loop", "ReadFromFile", "b690cb5e-f492-44ea-9ff5-b3a222ada79e", "Error", "Detect Column '" & $File_controlled_Loop_ColumnNames[$File_controlled_Loop_Col] & "' witch Datatype mismatch at record: " & $File_controlled_Loop_ShuffleTab[$File_controlled_Loop_Record]+1 & ". Found '" & $StrVar & "' which is not a " & $File_controlled_Loop_ColumTypes[$File_controlled_Loop_Col]  , @ScriptLineNumber )    
                      $File_controlled_Loop_ColumnsActual[$File_controlled_Loop_Col] = 0
                      $run = -1
                      ExitLoop 
                   Else
                      $File_controlled_Loop_ColumnsActual[$File_controlled_Loop_Col] = $Var
                   EndIf
                   $CurrentLine &= "'" & $File_controlled_Loop_ColumnNames[$File_controlled_Loop_Col] & "': " &  $var & ";  " 
               Next
               ActionStepFeedbackEx( "File controlled Loop", "ReadFromFile", "b690cb5e-f492-44ea-9ff5-b3a222ada79e", "Info", "Execute Block with following variables: " & $CurrentLine , @ScriptLineNumber )          
      
               Global $File_controlled_Loop_Columns, $File_controlled_Loop_Columns_Header
               Dim $File_controlled_Loop_Columns[$File_controlled_Loop_ColumnCount], $File_controlled_Loop_Columns_Header[$File_controlled_Loop_ColumnCount]
                    Global $File_controlled_Loop_UniqueRow = $File_controlled_Loop_ColumnsActual[0]
                 $File_controlled_Loop_Columns[0] = $File_controlled_Loop_ColumnsActual[0]
      		   $File_controlled_Loop_Columns_Header[0] = $File_controlled_Loop_ColumnNames[0]
                  
              
      	   ; Actionstep: 'Keystrokes' is  disabled . No code generated!
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Copy File", "b5a0cb1a-ed22-4bd5-9264-c8193189782d", 3, "Copy File")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Copy File"
          
          $OutboundVar_IsCopied = Default 
          $OutboundVar_DirectoryPathToOut = Default 
          $OutboundVar_NewFileNameOut = Default 
          $OutboundVar_FileNameOut = Default 
          $OutboundVar_DirectoryPathOut = Default 
            
          Global $AutoProp_DirectoryPathTo = "{$Activity_Parameters_folderPath}\Working Dir", $AutoProp_DirectoryPathTo_HasVarMapping = False 
          Global $AutoProp_OverwriteExistingFile = False, $AutoProp_OverwriteExistingFile_HasVarMapping = False   
          Global $AutoProp_UseDifferentFileName = False, $AutoProp_UseDifferentFileName_HasVarMapping = False   
          Global $AutoProp_NewFileName = "", $AutoProp_NewFileName_HasVarMapping = False 
          Global $AutoProp_DirectoryPath = _StcVarSysResolveVarReference( "Activity_Parameters_folderPath"), $AutoProp_DirectoryPath_HasVarMapping = True 
          Global $AutoProp_FileName = "ShipmentExcel_Template.xlsx", $AutoProp_FileName_HasVarMapping = False 
          Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
          Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "b5a0cb1a-ed22-4bd5-9264-c8193189782d", "Copy_File", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Copy_File", "b5a0cb1a-ed22-4bd5-9264-c8193189782d", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Copy File")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Copy File;
          ;-----------------------------------------------------------------------
          $copy_file_timeout = $AutoProp_UseGeneralTimeout ? StcGetGeneralTimeout() : $AutoProp_Timeout
          
          Local $p_IsCopied, $translatedDirectoryPath = TranslateText($AutoProp_DirectoryPath), $translatedDirectoryPathTo = TranslateText($AutoProp_DirectoryPathTo)
          Local $translatedFileName = TranslateText($AutoProp_FileName) 
          
          Local $__Success = __StcNgCopyFile( String($translatedFileName), _
          									String($translatedDirectoryPath), _
          									String($translatedDirectoryPathTo), _
          									String($AutoProp_NewFileName), _
          									$AutoProp_UseDifferentFileName, _
          									$AutoProp_OverwriteExistingFile, _
          									$p_IsCopied, _
          									$copy_file_timeout, _
          									"b5a0cb1a-ed22-4bd5-9264-c8193189782d",  @ScriptLineNumber, "Copy File")  
          
          $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "b5a0cb1a-ed22-4bd5-9264-c8193189782d", @ScriptLineNumber, "Copy File"  ) 
          $OutboundVar_DirectoryPathOut = $translatedDirectoryPath
          $OutboundVar_DirectoryPathToOut = $translatedDirectoryPathTo
          $OutboundVar_FileNameOut = $translatedFileName
          $OutboundVar_IsCopied = $p_IsCopied = "true" ? true : false
          
          If $AutoProp_UseDifferentFileName Then
          	$OutboundVar_NewFileNameOut = $AutoProp_NewFileName
          Else
          	$OutboundVar_NewFileNameOut = $AutoProp_FileName
          EndIf
          	
          
          $ErrorHandling = 1
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Copy File;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Copy_File_IsCopied = $OutboundVar_IsCopied  ; declare variable source. Will be referenced by other action steps 
           Global $Copy_File_Destination_directory = $OutboundVar_DirectoryPathToOut  ; declare variable source. Will be referenced by other action steps 
           Global $Copy_File_New_File_Name = $OutboundVar_NewFileNameOut  ; declare variable source. Will be referenced by other action steps 
           Global $Copy_File_File_Name = $OutboundVar_FileNameOut  ; declare variable source. Will be referenced by other action steps 
           Global $Copy_File_Directory_Path = $OutboundVar_DirectoryPathOut  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Copy File", $run, "b5a0cb1a-ed22-4bd5-9264-c8193189782d", 3, "Copy File")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Copy File: Copy File",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Copy File: Copy File",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Filter Row and Copy Row", "3330cc19-7229-467c-be3f-f967d6196f85", 3, "Keystrokes")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Filter Row and Copy Row (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = False, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "Addendum Template - Valid Shipment - Excel", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 50, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[18] 
                  Global $AutoProp_WindowTitle[18] 
                  Global $AutoProp_WindowText[18] 
                                                                                                                                                                                                                                                                                                                        $AutoProp_Content[0] = "{ALTDOWN}"                         
                  $AutoProp_WindowTitle[0] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "{DOWN}"                         
                  $AutoProp_WindowTitle[1] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{ALTUP}"                         
                  $AutoProp_WindowTitle[2] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "{DOWN}"                         
                  $AutoProp_WindowTitle[3] = ""                         
                  $AutoProp_WindowText[3] = ""                         
                    $AutoProp_Content[4] = "{DOWN}"                         
                  $AutoProp_WindowTitle[4] = ""                         
                  $AutoProp_WindowText[4] = ""                         
                    $AutoProp_Content[5] = "{DOWN}"                         
                  $AutoProp_WindowTitle[5] = ""                         
                  $AutoProp_WindowText[5] = ""                         
                    $AutoProp_Content[6] = "{DOWN}"                         
                  $AutoProp_WindowTitle[6] = ""                         
                  $AutoProp_WindowText[6] = ""                         
                    $AutoProp_Content[7] = "{DOWN}"                         
                  $AutoProp_WindowTitle[7] = ""                         
                  $AutoProp_WindowText[7] = ""                         
                    $AutoProp_Content[8] = "{DOWN}"                         
                  $AutoProp_WindowTitle[8] = ""                         
                  $AutoProp_WindowText[8] = ""                         
                    $AutoProp_Content[9] = "{DOWN}"                         
                  $AutoProp_WindowTitle[9] = ""                         
                  $AutoProp_WindowText[9] = ""                         
                    $AutoProp_Content[10] = "{DOWN}"                         
                  $AutoProp_WindowTitle[10] = ""                         
                  $AutoProp_WindowText[10] = ""                         
                    $AutoProp_Content[11] = "{$File_controlled_Loop_UniqueRow}"                         
                  $AutoProp_WindowTitle[11] = ""                         
                  $AutoProp_WindowText[11] = ""                         
                    $AutoProp_Content[12] = "{ENTER}"                         
                  $AutoProp_WindowTitle[12] = ""                         
                  $AutoProp_WindowText[12] = ""                         
                    $AutoProp_Content[13] = "{DOWN}"                         
                  $AutoProp_WindowTitle[13] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[13] = ""                         
                    $AutoProp_Content[14] = "{CTRLDOWN}{SHIFTDOWN}{END}{SHIFTUP}{CTRLUP}"                         
                  $AutoProp_WindowTitle[14] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[14] = ""                         
                    $AutoProp_Content[15] = "{CTRLDOWN}"                         
                  $AutoProp_WindowTitle[15] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[15] = ""                         
                    $AutoProp_Content[16] = "c"                         
                  $AutoProp_WindowTitle[16] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[16] = ""                         
                    $AutoProp_Content[17] = "{CTRLUP}"                         
                  $AutoProp_WindowTitle[17] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[17] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "3330cc19-7229-467c-be3f-f967d6196f85", "Filter_Row_and_Copy_Row_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Filter_Row_and_Copy_Row_28Keystrokes29", "3330cc19-7229-467c-be3f-f967d6196f85", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Filter Row and Copy Row (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Filter Row and Copy Row (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Filter Row and Copy Row (Keystrokes)", "KeyStroke", "3330cc19-7229-467c-be3f-f967d6196f85", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "3330cc19-7229-467c-be3f-f967d6196f85", @ScriptLineNumber, "Filter Row and Copy Row (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Filter Row and Copy Row (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Filter Row and Copy Row", $run, "3330cc19-7229-467c-be3f-f967d6196f85", 3, "Keystrokes")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Keystrokes: Filter Row and Copy Row",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Keystrokes: Filter Row and Copy Row",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Managed", "34b34440-8278-4e5e-9281-10b8bd047520", 3, "Managed")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Managed"
          
            
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "34b34440-8278-4e5e-9281-10b8bd047520", "Managed", True, "Normal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Managed", "34b34440-8278-4e5e-9281-10b8bd047520", @ScriptLineNumber, "Normal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Managed")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of : Managed;
          ;-----------------------------------------------------------------------
          $LogfileIdent = 4
          $g_LastControlBlockLevelName = $g_ControlBlockLevelName
          $g_ControlBlockLevelName = "Managed"
          OnEnterManagedBlock()
          While NOT OnCheckAbortState() ; Catch-Block-Loop
             ;-------------------------------------------------------------------
             ; Try section
             ;-------------------------------------------------------------------
             writelog("[DoAction.Enter]",4);
             While 1     ; Try-Block-Loop
          
                If CheckBlockIteration() Then
                  OnActionStart("Open Excel template File", "3e91d066-dc2e-4766-b679-3046affe7c03", 4, "Run Program")
                        
                ;---------<[ Auto generated WFE debug prefix section!  ]>------
                _StcVarSysResetValidation()
                $AsLastResultValue = $AsResultValue
                $AsLastResultInfo  = $AsResultInfo
                $AsResultValue = 0
                $AsResultInfo  = "no Info"
                $g_LastAction = "Open Excel template File (Run Program EXCEL.EXE)"
                
                $OutboundVar_PID = Default 
                $OutboundVar_Executable = Default 
                $OutboundVar_WorkingDir = Default 
                $OutboundVar_WHwnd = Default 
                  
                Global $AutoProp_WindowFlagState = "Maximized", $AutoProp_WindowFlagState_HasVarMapping = False 
                Global $AutoProp_FileName = "C:\Program Files\Microsoft Office\root\Office16\EXCEL.EXE", $AutoProp_FileName_HasVarMapping = False 
                Global $AutoProp_CommandLineParameters = "ShipmentExcel_Template.xlsx", $AutoProp_CommandLineParameters_HasVarMapping = False 
                Global $AutoProp_WorkingDirectory = "{$Activity_Parameters_folderPath}\Working Dir", $AutoProp_WorkingDirectory_HasVarMapping = False 
                Global $AutoProp_RunIn3rdParty = False, $AutoProp_RunIn3rdParty_HasVarMapping = False   
                Global $AutoProp_WaitForWindowVisible = True, $AutoProp_WaitForWindowVisible_HasVarMapping = False   
                Global $AutoProp_WindowTitleToWaitFor = "ShipmentExcel_Template.*", $AutoProp_WindowTitleToWaitFor_HasVarMapping = False 
                Global $AutoProp_UseRegEx = True, $AutoProp_UseRegEx_HasVarMapping = False   
                Global $AutoProp_UseCredentials = False, $AutoProp_UseCredentials_HasVarMapping = False   
                Global $AutoProp_InteractiveLogonWithProfile = False, $AutoProp_InteractiveLogonWithProfile_HasVarMapping = False   
                Global $AutoProp_InheritEnvironment = False, $AutoProp_InheritEnvironment_HasVarMapping = False   
                Global $AutoProp_CredentialUsername = "", $AutoProp_CredentialUsername_HasVarMapping = False 
                Global $AutoProp_CredentialPassword = "", $AutoProp_CredentialPassword_HasVarMapping = False 
                Global $AutoProp_CredentialDomain = "", $AutoProp_CredentialDomain_HasVarMapping = False 
                Global $AutoProp_UseGeneralTimeout = False, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
                Global $AutoProp_Timeout = 5, $AutoProp_Timeout_HasVarMapping = False   
                
                _DbgSetCurrentLevel( 6 )
                OnPrefixCodeExecuted( "3e91d066-dc2e-4766-b679-3046affe7c03", "Open_Excel_template_File_28Run_Program_EXCEL2EEXE29", True, "EhNormal", @ScriptLineNumber)
                If _StcVarSysValidateVarReference( "Open_Excel_template_File_28Run_Program_EXCEL2EEXE29", "3e91d066-dc2e-4766-b679-3046affe7c03", @ScriptLineNumber, "EhNormal" ) Then
                $LogfileIdent = 6 
                $TransStep = ("Open Excel template File (Run Program EXCEL.EXE)")
                Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
                $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
                ;---------<[ End of debug prefix section!  ]>------------------
                
                ;-----------------------------------------------------------------------
                ;###### Start of transaction step: Open Excel template File (Run Program EXCEL.EXE);
                ;-----------------------------------------------------------------------
                $ErrorHandling = 1
                If $AutoProp_RunIn3rdParty Then
                  Local $filename = @ScriptDir & "\3rdParty\" & $AutoProp_FileName
                Else
                  Local $filename = $AutoProp_FileName
                EndIf
                Switch $AutoProp_WindowFlagState
                    case "Normal"
                        Local $WindowState = @SW_SHOWNORMAL
                    case "Maximized"
                        Local $WindowState = @SW_MAXIMIZE
                    case "Minimized"
                        Local $WindowState = @SW_MINIMIZE
                    case Else 
                        Local $WindowState = @SW_SHOWNORMAL
                EndSwitch
                                                                                               
                If $AutoProp_UseGeneralTimeout Then 
                   $win_wait_timeout = StcGetGeneralTimeout()
                Else
                   $win_wait_timeout = $AutoProp_Timeout 
                EndIf
                
                Local $__windowTitle = $AutoProp_WindowTitleToWaitFor
                If $AutoProp_UseRegEx Then $__windowTitle = _ExpandToTitleRegEx($__windowTitle)
                Local $commandLineParameters = TranslateText($AutoProp_CommandLineParameters) 
                Local $__PID=0, $__WinHandle=0, $__WorkingDir=""
                Local $ret = StcAsRun($filename & " " & $commandLineParameters, $AutoProp_WorkingDirectory, $WindowState, _
                                      "3e91d066-dc2e-4766-b679-3046affe7c03", @ScriptLineNumber,"Open Excel template File (Run Program EXCEL.EXE)", _
                					  $AutoProp_WaitForWindowVisible, $__windowTitle, $win_wait_timeout, _
                					  $AutoProp_UseCredentials, $AutoProp_CredentialUsername, $AutoProp_CredentialPassword, $AutoProp_CredentialDomain, $AutoProp_InheritEnvironment, $AutoProp_InteractiveLogonWithProfile, _
                					  $__WinHandle, $__WorkingDir)
                $AsResultValue = $ret
                If ($ret = 0)  OR  ($AutoProp_WaitForWindowVisible AND  $__WinHandle = 0 ) Then  
                   $Run = -1
                   $AsResultInfo  = "The process could not be started."
                Else
                   $Run = 1
                   $AsResultInfo  = "The process was started with PID: "
                EndIf    
                $Run = CheckErrorHandling(1, $Run, "3e91d066-dc2e-4766-b679-3046affe7c03", @ScriptLineNumber, "Open Excel template File (Run Program EXCEL.EXE)"  ) 
                $OutboundVar_PID = "PID:" & $AsResultValue
                $OutboundVar_Executable = $AutoProp_FileName
                $OutboundVar_WorkingDir = $__WorkingDir
                $OutboundVar_WHwnd = $__WinHandle
                ;"file://#var#=@ScriptDir;\3rdParty\test.txt"
                ;-----------------------------------------------------------------------
                ;###### End of transaction step: Open Excel template File (Run Program EXCEL.EXE);
                ;-----------------------------------------------------------------------
                
                
                EndIf  
                  Global $Open_Excel_template_File_Process_ID = $OutboundVar_PID  ; declare variable source. Will be referenced by other action steps 
                 Global $Open_Excel_template_File_Executable = $OutboundVar_Executable  ; declare variable source. Will be referenced by other action steps 
                 Global $Open_Excel_template_File_Working_Dir = $OutboundVar_WorkingDir  ; declare variable source. Will be referenced by other action steps 
                 Global $Open_Excel_template_File_Process_Window_Handle = $OutboundVar_WHwnd  ; declare variable source. Will be referenced by other action steps 
                
                ;---------<[ End of debug suffix section!  ]>------------------
          
                  OnActionEnd("Open Excel template File", $run, "3e91d066-dc2e-4766-b679-3046affe7c03", 4, "Run Program")
                  If $run < 0 Then 
                     OnExitDoActionManagedBlock("acc00e26-c959-4bf5-9e7a-2a8f2ad91f18")
                     writelog("[DoAction.End   Run Program: Open Excel template File] Managed block detects failure | Action Step Open Excel template File failed | OnAction jumps to OnError Block",4);
                     ExitLoop 1
                  EndIf
                EndIf 
          
                writelog("[DoAction.End] Leave DoAction with no error!",4);
                OnExitDoActionManagedBlock("acc00e26-c959-4bf5-9e7a-2a8f2ad91f18")
                ExitLoop 2
             WEnd     ; Try-Block-Loop End
          
             
             ;-------------------------------------------------------------------
             ; Catch section
             ;-------------------------------------------------------------------
             $Run = 1
          
             writelog("[OnError.Enter]",4);
             While NOT OnCheckAbortState() ;  Local Catch-Loop, loop over only if abort state is NOT reached!
                                           ;  This is only if the DoAction has executed an "Exit Workflow" AS!
          
                OnActionStart("Force OK State", "74798e12-1ce8-4e59-8e50-210261322406", 4, "Force OK State")
                      
                ;---------<[ Auto generated WFE debug prefix section!  ]>------
                _StcVarSysResetValidation()
                $AsLastResultValue = $AsResultValue
                $AsLastResultInfo  = $AsResultInfo
                $AsResultValue = 0
                $AsResultInfo  = "no Info"
                $g_LastAction = "Force OK State"
                
                  
                
                _DbgSetCurrentLevel( 6 )
                OnPrefixCodeExecuted( "74798e12-1ce8-4e59-8e50-210261322406", "Force_OK_State", False, "EhNormal", @ScriptLineNumber)
                If True Then
                $LogfileIdent = 6 
                $TransStep = ("Force OK State")
                Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
                $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
                ;---------<[ End of debug prefix section!  ]>------------------
                
                ;-----------------------------------------------------------------------
                ;###### Start of transaction step: Force OK State;
                ;-----------------------------------------------------------------------
                $ErrorHandling = 1
                
                StcResetErrorState()
                
                ;-----------------------------------------------------------------------
                ;###### End of transaction step: Force OK State;
                ;-----------------------------------------------------------------------
                
                
                EndIf  
                 
                ;---------<[ End of debug suffix section!  ]>------------------
          
                OnActionEnd("Force OK State", $run, "74798e12-1ce8-4e59-8e50-210261322406", 4, "Force OK State")
                If OnCheckAbortState() Then  ; Check if "Exit Workflow" was called. If so, leave block immediately 
                  writelog("[OnError.End   Exit Workflow executed in OnError Block]",4);
                  ExitLoop 2
                Endif 
                If $run < 0 Then
                  writelog("[OnError.End   Failure in OnError Block]",4);
                  OnExitDoErrorManagedBlock("94ed252d-02b0-4ec8-8ff3-f85168ef289c")
                  ExitLoop 2
                EndIf
          
          
          
                writelog("[OnError.End] Leave OnError with no further errors.",4);
                OnExitDoErrorManagedBlock("94ed252d-02b0-4ec8-8ff3-f85168ef289c")
                ExitLoop 2
             WEnd  ; Local Catch-Loop End
          WEnd  ; Catch-Block-Loop End
          
          
          ;-------------------------------------------------------------------
          ; Finally section
          ;-------------------------------------------------------------------
          If NOT OnCheckAbortState() Then
              Local $RunValueAtLevel_4 = $Run  ; DoAlways is error state neutral, so store value for current level
              $Run = 1
          
              writelog("[DoAlways.Enter] Following actions executed with no error handling by default!",4);
              While 1    ; Always-Block-Loop
          
             ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
          
              writelog("[DoAlways.End",4);
              ExitLoop 1
              WEnd ; Always-Block-Loop
              $Run = $RunValueAtLevel_4  ; DoAlways is error state neutral, so get back value for this level
          
              $g_ControlBlockLevelName = $g_LastControlBlockLevelName 
              
              OnExitDoAlwaysManagedBlock("8f3ac6ed-9ebd-4198-a3d7-5a7609fcc597")  
          EndIf
          
          
          
          OnLeaveManagedBlock()
          ;-----------------------------------------------------------------------
          ;#### End of : Managed;
          ;-----------------------------------------------------------------------
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Managed", $run, "34b34440-8278-4e5e-9281-10b8bd047520", 3, "Managed")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Managed: Managed",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Managed: Managed",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Window Wait", "7aae312a-9794-4dd3-92d9-bc11adb98c3a", 3, "Window Wait")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Window Wait (Window Wait for Appear 'ShipmentExcel_Template  -  Protected...)"
          
          $OutboundVar_WHwnd = Default 
          $OutboundVar_PID = Default 
            
          Global $AutoProp_WaitForState = 1, $AutoProp_WaitForState_HasVarMapping = False   
          Global $AutoProp_WindowTitle = "ShipmentExcel_Template  -  Protected View - Excel", $AutoProp_WindowTitle_HasVarMapping = False 
          Global $AutoProp_WindowText = "", $AutoProp_WindowText_HasVarMapping = False 
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_WaitDelay = 50, $AutoProp_WaitDelay_HasVarMapping = False   
          Global $AutoProp_CustomWaitDelay = True, $AutoProp_CustomWaitDelay_HasVarMapping = False   
          Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
          Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "7aae312a-9794-4dd3-92d9-bc11adb98c3a", "Window_Wait_28Window_Wait_for_Appear_27ShipmentExcel_Template__2D__Protected2E2E2E29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Window_Wait_28Window_Wait_for_Appear_27ShipmentExcel_Template__2D__Protected2E2E2E29", "7aae312a-9794-4dd3-92d9-bc11adb98c3a", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Window Wait (Window Wait for Appear 'ShipmentExcel_Template  -  Protected...)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;------------------------------------------------------------------------
          ;#### Start of transaction step: Window Wait (Window Wait for Appear 'ShipmentExcel_Template  -  Protected...);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          If $AutoProp_UseGeneralTimeout Then
             $win_wait_timeout = StcGetGeneralTimeout()
          Else
             $win_wait_timeout = $AutoProp_Timeout
          EndIf
          ; 
          Local $__windowTitle = $AutoProp_WindowTitle
          If $AutoProp_UseRegEx Then $__windowTitle = _ExpandToTitleRegEx($__windowTitle)
          If @error = 1 Then 
             ActionStepFeedbackEx( "Window Wait (Window Wait for Appear 'ShipmentExcel_Template  -  Protected...)", "WindowWait", "7aae312a-9794-4dd3-92d9-bc11adb98c3a", "Error", "The window text '" & $__windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
             $Run = CheckErrorHandling($ErrorHandling, -1, "7aae312a-9794-4dd3-92d9-bc11adb98c3a", @ScriptLineNumber, "Window Wait (Window Wait for Appear 'ShipmentExcel_Template  -  Protected...)" ) 
          Else
             Local $__windowText=""
             If $AutoProp_UseWindowText Then $__windowText = $AutoProp_WindowText 
             Local $__WindowWaitDelay =  $AutoProp_CustomWaitDelay ? $AutoProp_WaitDelay : -1
             $Run = StcAsWindowCheck($AutoProp_WaitForState, $__windowTitle, $__windowText, $win_wait_timeout, $__WindowWaitDelay, $g_TransAction, "7aae312a-9794-4dd3-92d9-bc11adb98c3a", @ScriptLineNumber, "Window Wait (Window Wait for Appear 'ShipmentExcel_Template  -  Protected...)" )
             $OutboundVar_WHWnd = __StcGetResultValue()
             $Run = CheckErrorHandling($ErrorHandling, $Run, "7aae312a-9794-4dd3-92d9-bc11adb98c3a", @ScriptLineNumber, "Window Wait (Window Wait for Appear 'ShipmentExcel_Template  -  Protected...)" ) 
             If StcIsStringWindowHandle( $OutboundVar_WHWnd ) Then 
                $OutboundVar_PID = "PID:" & WinGetProcess( HWnd($OutboundVar_WHWnd) )
             Else
                $OutboundVar_PID =  "PID:0"
             EndIf
          Endif
          ; AsResultValue/Info will be set within function!
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Window Wait (Window Wait for Appear 'ShipmentExcel_Template  -  Protected...);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Window_Wait_Window_Handle = $OutboundVar_WHwnd  ; declare variable source. Will be referenced by other action steps 
           Global $Window_Wait_Process_ID = $OutboundVar_PID  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Window Wait", $run, "7aae312a-9794-4dd3-92d9-bc11adb98c3a", 3, "Window Wait")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Window Wait: Window Wait",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Window Wait: Window Wait",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Enable Editing", "3b0e7fce-2525-4e2f-8255-82cda91f8da5", 3, "Keystrokes")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Enable Editing (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "ShipmentExcel_Template  -  Protected View - Excel", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 500, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[5] 
                  Global $AutoProp_WindowTitle[5] 
                  Global $AutoProp_WindowText[5] 
                                                                                           $AutoProp_Content[0] = "{ALTDOWN}"                         
                  $AutoProp_WindowTitle[0] = "ShipmentExcel_Template  -  Protected View - Excel"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "f"                         
                  $AutoProp_WindowTitle[1] = "ShipmentExcel_Template  -  Protected View - Excel"                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{ALTUP}"                         
                  $AutoProp_WindowTitle[2] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "i"                         
                  $AutoProp_WindowTitle[3] = "ShipmentExcel_Template  -  Protected View - Excel"                         
                  $AutoProp_WindowText[3] = ""                         
                    $AutoProp_Content[4] = "e"                         
                  $AutoProp_WindowTitle[4] = "ShipmentExcel_Template  -  Protected View - Excel"                         
                  $AutoProp_WindowText[4] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "3b0e7fce-2525-4e2f-8255-82cda91f8da5", "Enable_Editing_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Enable_Editing_28Keystrokes29", "3b0e7fce-2525-4e2f-8255-82cda91f8da5", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Enable Editing (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Enable Editing (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Enable Editing (Keystrokes)", "KeyStroke", "3b0e7fce-2525-4e2f-8255-82cda91f8da5", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "3b0e7fce-2525-4e2f-8255-82cda91f8da5", @ScriptLineNumber, "Enable Editing (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Enable Editing (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Enable Editing", $run, "3b0e7fce-2525-4e2f-8255-82cda91f8da5", 3, "Keystrokes")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Keystrokes: Enable Editing",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Keystrokes: Enable Editing",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Sleep", "4d3f79d2-629b-4422-82ea-aaaac36541a3", 3, "Sleep")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Sleep (Sleep 2000ms)"
          
            
          Global $AutoProp_SleepInterval = 2000, $AutoProp_SleepInterval_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "4d3f79d2-629b-4422-82ea-aaaac36541a3", "Sleep_28Sleep_2000ms29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Sleep_28Sleep_2000ms29", "4d3f79d2-629b-4422-82ea-aaaac36541a3", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Sleep (Sleep 2000ms)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Sleep (Sleep 2000ms);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          Sleep ($AutoProp_SleepInterval) 
          _NgCoreLogAnnotationText( "4d3f79d2-629b-4422-82ea-aaaac36541a3", "Sleep was executed with a timeout of: " & $AutoProp_SleepInterval & "ms")
          $AsResultValue = $AutoProp_SleepInterval
          $AsResultInfo = "SleepTime in ms:"
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Sleep (Sleep 2000ms);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Sleep", $run, "4d3f79d2-629b-4422-82ea-aaaac36541a3", 3, "Sleep")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Sleep: Sleep",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Sleep: Sleep",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Paste Filtered Data into Excel Template", "f9840801-8875-464a-ac80-7945304053be", 3, "Keystrokes")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Paste Filtered Data into Excel Template (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "ShipmentExcel_Template - Excel", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 50, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[8] 
                  Global $AutoProp_WindowTitle[8] 
                  Global $AutoProp_WindowText[8] 
                                                                                                                                              $AutoProp_Content[0] = "{DOWN}"                         
                  $AutoProp_WindowTitle[0] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "{DOWN}"                         
                  $AutoProp_WindowTitle[1] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{CTRLDOWN}"                         
                  $AutoProp_WindowTitle[2] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "v"                         
                  $AutoProp_WindowTitle[3] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[3] = ""                         
                    $AutoProp_Content[4] = "{CTRLUP}"                         
                  $AutoProp_WindowTitle[4] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[4] = ""                         
                    $AutoProp_Content[5] = "{CTRLDOWN}"                         
                  $AutoProp_WindowTitle[5] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[5] = ""                         
                    $AutoProp_Content[6] = "s"                         
                  $AutoProp_WindowTitle[6] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[6] = ""                         
                    $AutoProp_Content[7] = "{CTRLUP}"                         
                  $AutoProp_WindowTitle[7] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[7] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "f9840801-8875-464a-ac80-7945304053be", "Paste_Filtered_Data_into_Excel_Template_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Paste_Filtered_Data_into_Excel_Template_28Keystrokes29", "f9840801-8875-464a-ac80-7945304053be", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Paste Filtered Data into Excel Template (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Paste Filtered Data into Excel Template (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Paste Filtered Data into Excel Template (Keystrokes)", "KeyStroke", "f9840801-8875-464a-ac80-7945304053be", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "f9840801-8875-464a-ac80-7945304053be", @ScriptLineNumber, "Paste Filtered Data into Excel Template (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Paste Filtered Data into Excel Template (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Paste Filtered Data into Excel Template", $run, "f9840801-8875-464a-ac80-7945304053be", 3, "Keystrokes")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Keystrokes: Paste Filtered Data into Excel Template",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Keystrokes: Paste Filtered Data into Excel Template",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Sleep1", "e7780576-a984-44b0-ae7a-c38da13e96eb", 3, "Sleep")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Sleep1 (Sleep 2000ms)"
          
            
          Global $AutoProp_SleepInterval = 2000, $AutoProp_SleepInterval_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "e7780576-a984-44b0-ae7a-c38da13e96eb", "Sleep1_28Sleep_2000ms29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Sleep1_28Sleep_2000ms29", "e7780576-a984-44b0-ae7a-c38da13e96eb", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Sleep1 (Sleep 2000ms)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Sleep1 (Sleep 2000ms);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          Sleep ($AutoProp_SleepInterval) 
          _NgCoreLogAnnotationText( "e7780576-a984-44b0-ae7a-c38da13e96eb", "Sleep was executed with a timeout of: " & $AutoProp_SleepInterval & "ms")
          $AsResultValue = $AutoProp_SleepInterval
          $AsResultInfo = "SleepTime in ms:"
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Sleep1 (Sleep 2000ms);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Sleep1", $run, "e7780576-a984-44b0-ae7a-c38da13e96eb", 3, "Sleep")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Sleep: Sleep1",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Sleep: Sleep1",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Keystrokes2", "302dc412-6278-4124-a742-7412482882a6", 3, "Keystrokes")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Keystrokes2"
          
            
          Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "ShipmentExcel_Template - Excel", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 500, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[1] 
                  Global $AutoProp_WindowTitle[1] 
                  Global $AutoProp_WindowText[1] 
                       $AutoProp_Content[0] = "{ALTDOWN}{F4}{ALTUP}"                         
                  $AutoProp_WindowTitle[0] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[0] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "302dc412-6278-4124-a742-7412482882a6", "Keystrokes2", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Keystrokes2", "302dc412-6278-4124-a742-7412482882a6", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Keystrokes2")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Keystrokes2;
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Keystrokes2", "KeyStroke", "302dc412-6278-4124-a742-7412482882a6", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "302dc412-6278-4124-a742-7412482882a6", @ScriptLineNumber, "Keystrokes2" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Keystrokes2;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Keystrokes2", $run, "302dc412-6278-4124-a742-7412482882a6", 3, "Keystrokes")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Keystrokes: Keystrokes2",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Keystrokes: Keystrokes2",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Sleep11", "6f38d039-8b37-4e1b-a480-ef701b1f8862", 3, "Sleep")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Sleep11 (Sleep 1000ms)"
          
            
          Global $AutoProp_SleepInterval = 1000, $AutoProp_SleepInterval_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "6f38d039-8b37-4e1b-a480-ef701b1f8862", "Sleep11_28Sleep_1000ms29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Sleep11_28Sleep_1000ms29", "6f38d039-8b37-4e1b-a480-ef701b1f8862", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Sleep11 (Sleep 1000ms)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Sleep11 (Sleep 1000ms);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          Sleep ($AutoProp_SleepInterval) 
          _NgCoreLogAnnotationText( "6f38d039-8b37-4e1b-a480-ef701b1f8862", "Sleep was executed with a timeout of: " & $AutoProp_SleepInterval & "ms")
          $AsResultValue = $AutoProp_SleepInterval
          $AsResultInfo = "SleepTime in ms:"
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Sleep11 (Sleep 1000ms);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Sleep11", $run, "6f38d039-8b37-4e1b-a480-ef701b1f8862", 3, "Sleep")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Sleep: Sleep11",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Sleep: Sleep11",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Rename File", "db14024e-15a6-4bb9-933f-e6b833123722", 3, "Rename File")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Rename File"
          
          $OutboundVar_IsRenamed = Default 
          $OutboundVar_FileNameToOut = Default 
          $OutboundVar_FileNameOut = Default 
          $OutboundVar_DirectoryPathOut = Default 
            
          Global $AutoProp_FileNameTo = "ShipmentExcel_{$File_controlled_Loop_UniqueRow}.xlsx", $AutoProp_FileNameTo_HasVarMapping = False 
          Global $AutoProp_DirectoryPath = "{$Activity_Parameters_folderPath}\Working Dir", $AutoProp_DirectoryPath_HasVarMapping = False 
          Global $AutoProp_FileName = "ShipmentExcel_Template.xlsx", $AutoProp_FileName_HasVarMapping = False 
          Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
          Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "db14024e-15a6-4bb9-933f-e6b833123722", "Rename_File", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Rename_File", "db14024e-15a6-4bb9-933f-e6b833123722", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Rename File")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Rename File;
          ;-----------------------------------------------------------------------
          $rename_file_timeout = $AutoProp_UseGeneralTimeout ? StcGetGeneralTimeout() : $AutoProp_Timeout
          Local $p_IsRenamed, $translatedDirectoryPath = TranslateText($AutoProp_DirectoryPath)
          Local $translatedFileName = TranslateText($AutoProp_FileName)
          Local $translatedFileNameTo = TranslateText($AutoProp_FileNameTo)
          
          
          Local $__Success = __StcNgRenameFile( String($translatedDirectoryPath), _
          										String($translatedFileName), _
          										String($translatedFileNameTo), _
          										$rename_file_timeout, _
          										$p_IsRenamed, _
          										"db14024e-15a6-4bb9-933f-e6b833123722",  @ScriptLineNumber, "Rename File")  
          $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "db14024e-15a6-4bb9-933f-e6b833123722", @ScriptLineNumber, "Rename File"  ) 
          $OutboundVar_DirectoryPathOut = $translatedDirectoryPath
          $OutboundVar_FileNameOut = $translatedFileName
          $OutboundVar_FileNameToOut = $translatedFileNameTo
          $OutboundVar_IsRenamed = $p_IsRenamed = "true" ? true : false
          
          $ErrorHandling = 1
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Rename File;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Rename_File_IsRenamed = $OutboundVar_IsRenamed  ; declare variable source. Will be referenced by other action steps 
           Global $Rename_File_New_File_Name = $OutboundVar_FileNameToOut  ; declare variable source. Will be referenced by other action steps 
           Global $Rename_File_File_Name = $OutboundVar_FileNameOut  ; declare variable source. Will be referenced by other action steps 
           Global $Rename_File_Directory_Path = $OutboundVar_DirectoryPathOut  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Rename File", $run, "db14024e-15a6-4bb9-933f-e6b833123722", 3, "Rename File")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Rename File: Rename File",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Rename File: Rename File",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
                    
               If CheckBlockIteration() Then
                 Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                 OnActionStart("Clear Filter", "bcb1f13d-1eb9-429d-89b7-c5d0a251614d", 3, "Keystrokes")
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Clear Filter (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = False, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 100, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[10] 
                  Global $AutoProp_WindowTitle[10] 
                  Global $AutoProp_WindowText[10] 
                                                                                                                                                                                $AutoProp_Content[0] = "{ESCAPE}{UP}"                         
                  $AutoProp_WindowTitle[0] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "{ALTDOWN}"                         
                  $AutoProp_WindowTitle[1] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{DOWN}"                         
                  $AutoProp_WindowTitle[2] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "{ALTUP}"                         
                  $AutoProp_WindowTitle[3] = "Addendum Template - Valid Shipment - Excel"                         
                  $AutoProp_WindowText[3] = ""                         
                    $AutoProp_Content[4] = "{DOWN}"                         
                  $AutoProp_WindowTitle[4] = ""                         
                  $AutoProp_WindowText[4] = ""                         
                    $AutoProp_Content[5] = "{DOWN}"                         
                  $AutoProp_WindowTitle[5] = ""                         
                  $AutoProp_WindowText[5] = ""                         
                    $AutoProp_Content[6] = "{DOWN}"                         
                  $AutoProp_WindowTitle[6] = ""                         
                  $AutoProp_WindowText[6] = ""                         
                    $AutoProp_Content[7] = "{DOWN}"                         
                  $AutoProp_WindowTitle[7] = ""                         
                  $AutoProp_WindowText[7] = ""                         
                    $AutoProp_Content[8] = "{DOWN}"                         
                  $AutoProp_WindowTitle[8] = ""                         
                  $AutoProp_WindowText[8] = ""                         
                    $AutoProp_Content[9] = "{ENTER}"                         
                  $AutoProp_WindowTitle[9] = ""                         
                  $AutoProp_WindowText[9] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "bcb1f13d-1eb9-429d-89b7-c5d0a251614d", "Clear_Filter_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Clear_Filter_28Keystrokes29", "bcb1f13d-1eb9-429d-89b7-c5d0a251614d", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Clear Filter (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Clear Filter (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Clear Filter (Keystrokes)", "KeyStroke", "bcb1f13d-1eb9-429d-89b7-c5d0a251614d", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "bcb1f13d-1eb9-429d-89b7-c5d0a251614d", @ScriptLineNumber, "Clear Filter (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Clear Filter (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                 OnActionEnd("Clear Filter", $run, "bcb1f13d-1eb9-429d-89b7-c5d0a251614d", 3, "Keystrokes")
               EndIf
                 
               If $run < 0 Then
                 Switch $LoopErrorHandling
                     Case 0    ; do nothing
                        Sleep(0)
                     Case 1  ; continue on head
                        $run = 1
                        ContinueLoop
                     Case 2  ; exit loop with error
                        $run = -1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Keystrokes: Clear Filter",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                     Case 3  ; exit loop w/o error
                        $run = 1
                        $DoNotExecute = True
                        writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Keystrokes: Clear Filter",3)
                        OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
                        ExitLoop
                 EndSwitch
               EndIf
         
         
           ;ActionStepFeedbackEx( "File controlled Loop", "BreakLoop", "b690cb5e-f492-44ea-9ff5-b3a222ada79e", "Info", "Loop passed " & $File_controlled_Loop_Record+1 & " time(s) of " & $File_controlled_Loop_RecordCount & ".", @ScriptLineNumber )   
           OnEndLoopIteration("b690cb5e-f492-44ea-9ff5-b3a222ada79e") 
           If $BreakNextLoop Then exitloop
           writelog("[Pass Loop: $operatorName: " & $File_controlled_Loop_Record & "]",3)
         Next
      Else   
         ActionStepFeedbackEx( "File controlled Loop", "ReadFromFile", "b690cb5e-f492-44ea-9ff5-b3a222ada79e", "Error", "Loop operation not executed, because loop init failed! Script Execution aborted.", @ScriptLineNumber )          
         StcSetErrorState()
      EndIf ; check for $File_controlled_Loop_PrepareCodeSuccess   
      
      OnEndLoopExecuted( "b690cb5e-f492-44ea-9ff5-b3a222ada79e", $File_controlled_Loop__StartedLoopIterations, $File_controlled_Loop_RecordCount )
      
      $run = CheckErrorHandling($File_controlled_Loop__ErrorHandling, $run, "b690cb5e-f492-44ea-9ff5-b3a222ada79e", @ScriptLineNumber, "File controlled Loop" ) 
      
      
      ;-----------------------------------------------------------------------
      ;### End of transaction step: File controlled Loop;
      ;-----------------------------------------------------------------------
      
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("File controlled Loop", $run, "b690cb5e-f492-44ea-9ff5-b3a222ada79e", 2, "File controlled Loop")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("Close CSV File", "7e664bc0-a1c4-4fec-81b3-178917513edf", 2, "Group")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Close CSV File (Group)"
      
        
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "7e664bc0-a1c4-4fec-81b3-178917513edf", "Close_CSV_File_28Group29", False, "EhNormal", @ScriptLineNumber)
      If True Then
      $LogfileIdent = 3 
      $TransStep = ("Close CSV File (Group)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Close CSV File (Group);
      ;-----------------------------------------------------------------------
      $g_LastControlBlockLevelName = $g_ControlBlockLevelName
      $g_ControlBlockLevelName = "Close CSV File (Group)"
      
        ;       
                  If CheckBlockIteration() Then
                     OnActionStart("Window set State", "882e415d-9dc0-4fcf-8985-5f59e502d513", 3, "Window set State")
                         
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Window set State (Window Close 'Addendum Template - Valid Shipment - Excel')"
          
          $OutboundVar_WHwnd = Default 
          $OutboundVar_PID = Default 
            
          Global $AutoProp_WindowNewState = "Close", $AutoProp_WindowNewState_HasVarMapping = False 
          Global $AutoProp_WindowTitle = "Addendum Template - Valid Shipment - Excel", $AutoProp_WindowTitle_HasVarMapping = False 
          Global $AutoProp_WindowText = "", $AutoProp_WindowText_HasVarMapping = False 
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_WaitDelay = 50, $AutoProp_WaitDelay_HasVarMapping = False   
          Global $AutoProp_CustomWaitDelay = True, $AutoProp_CustomWaitDelay_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "882e415d-9dc0-4fcf-8985-5f59e502d513", "Window_set_State_28Window_Close_27Addendum_Template_2D_Valid_Shipment_2D_Excel2729", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Window_set_State_28Window_Close_27Addendum_Template_2D_Valid_Shipment_2D_Excel2729", "882e415d-9dc0-4fcf-8985-5f59e502d513", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Window set State (Window Close 'Addendum Template - Valid Shipment - Excel')")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Window set State (Window Close 'Addendum Template - Valid Shipment - Excel');
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          Local $__windowTitle = $AutoProp_WindowTitle
          If $AutoProp_UseRegEx Then $__windowTitle = _ExpandToTitleRegEx($__windowTitle)
          If @error = 1 Then ActionStepFeedbackEx( "Window set State (Window Close 'Addendum Template - Valid Shipment - Excel')", "WindowSetState", "882e415d-9dc0-4fcf-8985-5f59e502d513", "Error", "The window text '" & $__windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
          Local $__windowText=""
          If $AutoProp_UseWindowText Then $__windowText = $AutoProp_WindowText 
          Local $__WindowWaitDelay =  $AutoProp_CustomWaitDelay ? $AutoProp_WaitDelay : -1
          Local $WinSetStateResult = StcAsWinSetStateV21($__windowTitle, $__windowText, $AutoProp_WindowNewState, $__WindowWaitDelay, "882e415d-9dc0-4fcf-8985-5f59e502d513", @ScriptLineNumber, "Window set State (Window Close 'Addendum Template - Valid Shipment - Excel')");
          $OutboundVar_WHwnd = String($WinSetStateResult)
          $AsResultValue = String($WinSetStateResult)
          If StcIsStringWindowHandle( $OutboundVar_WHWnd ) Then 
          	$OutboundVar_PID = "PID:" & WinGetProcess( HWnd($OutboundVar_WHWnd) )
          Else
             $OutboundVar_PID =  "PID:0"
          EndIf
          If $WinSetStateResult = 0 Then  ;this is the erro case!
             $Run = -1
             $AsResultInfo  = "The window could not be found."
          Else
             $run = 1
             $AsResultInfo  = "The window was found with Handle: "
          EndIf   
          
          $Run = CheckErrorHandling($ErrorHandling, $Run, "882e415d-9dc0-4fcf-8985-5f59e502d513", @ScriptLineNumber, "Window set State (Window Close 'Addendum Template - Valid Shipment - Excel')" ) 
          
          ;----------------------------------------------------------------------
          ;#### End of transaction step: Window set State (Window Close 'Addendum Template - Valid Shipment - Excel');
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Window_set_State_Window_Handle = $OutboundVar_WHwnd  ; declare variable source. Will be referenced by other action steps 
           Global $Window_set_State_Process_ID = $OutboundVar_PID  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
                     OnActionEnd("Window set State", $run, "882e415d-9dc0-4fcf-8985-5f59e502d513", 3, "Window set State")
                  EndIf
                         
                  If CheckBlockIteration() Then
                     OnActionStart("Keystrokes1", "8b00418e-969c-4495-98bb-2e8ab41c4e9e", 3, "Keystrokes")
                         
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Keystrokes1"
          
            
          Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "Microsoft Excel", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 500, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[1] 
                  Global $AutoProp_WindowTitle[1] 
                  Global $AutoProp_WindowText[1] 
                       $AutoProp_Content[0] = "{TAB}{ENTER}"                         
                  $AutoProp_WindowTitle[0] = "Microsoft Excel"                         
                  $AutoProp_WindowText[0] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "8b00418e-969c-4495-98bb-2e8ab41c4e9e", "Keystrokes1", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Keystrokes1", "8b00418e-969c-4495-98bb-2e8ab41c4e9e", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Keystrokes1")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Keystrokes1;
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Keystrokes1", "KeyStroke", "8b00418e-969c-4495-98bb-2e8ab41c4e9e", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "8b00418e-969c-4495-98bb-2e8ab41c4e9e", @ScriptLineNumber, "Keystrokes1" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Keystrokes1;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                     OnActionEnd("Keystrokes1", $run, "8b00418e-969c-4495-98bb-2e8ab41c4e9e", 3, "Keystrokes")
                  EndIf
                      
      $g_ControlBlockLevelName = $g_LastControlBlockLevelName;
      
      ;-----------------------------------------------------------------------
      ;### End of transaction step: Close CSV File (Group);
      ;-----------------------------------------------------------------------
      
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Close CSV File", $run, "7e664bc0-a1c4-4fec-81b3-178917513edf", 2, "Group")
   EndIf
   
   $g_ControlBlockLevelName = $g_LastControlBlockLevelName
   OnTransactionEnd("Transaction", "4988ec15-b4a8-4636-819c-ab7d07d91c29")
   ;---------------------------------------------------------------------------
   ;## End of Transaction: Transaction;
   ;---------------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
          OnMeasurementBlockEnd("Transaction", "4988ec15-b4a8-4636-819c-ab7d07d91c29", 1, "Transaction")
       EndIf
  
       ;---------------------------------------------------------------------------
       ; Application exit, handling for return
       ;---------------------------------------------------------------------------
 
       If ($run < 0 OR OnCheckAbortState()) AND Not (_StcIsUserExitCausedBy_ExitOk()  or _StcIsStatusExitCode()) Then    ; negativ run or OnCheckAbortState() return true indicates a problem
          $Pass_Activity_Workflow = 0
 
          OnMeasurementTryFailed ("cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed" )    ; notify Funclib subsystem 
          OnLastMeasurementExecuted("cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed", False)
 
          ActionStepFeedbackEx( "Activity Workflow", "Workflow", "cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed", "Error", StcMessages_AppExit_1( $MeasurementName) , @ScriptLineNumber ) 
          If OnCheckAbortState() Then
             writelog( StcMessages_AppExit_2($MeasurementName)  )
          Else
             writelog(  StcMessages_AppExit_3($MeasurementName) )
          EndIf
 
          If $enter >= $g_StcMaxConfiguredExecutionTries OR OnCheckAbortState() Then ; no hope, the end of retries was reached...
             $UsedErrorCycles = $enter                         ; pass current used error cycles to XML output variable
             ExitLoop 1
          Else  ;$enter < $g_StcMaxConfiguredExecutionTries     ; ok, one more again...
             writelog("<-------------------------------------------------------------------------------------------------------------------------------------->")
             writelog("[Enter Measurement Retry] Try: " & $enter+1 & " of " & $g_StcMaxConfiguredExecutionTries)
             StcErrorBox("Application measurement", StcMessages_AppExit_4($MeasurementName,  $retrydelay) , $retrydelay)
             ActionStepFeedbackEx( "Activity Workflow", "Workflow", "cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed", "Warning", "Workflow now restarted due to prior error. This is measurement cycle: " & $enter+1 & " of " & $g_StcMaxConfiguredExecutionTries , @ScriptLineNumber ) 
             OnMeasurementLoopFailedAfterWaitDlg(STC_GetWorkflowProtocolTemplate())    ; notify subsystem after the message box was displayed! Otherwise the dialog time influence the measurement time.
             $enter += 1           ; next try
          EndIf
 
          Clearkeys ()                     ; take care about key states!
 
       Else
          OnLastMeasurementExecuted("cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed", TRUE)
          ; some debug, if user has it selected
          writelog( StcMessages_AppExit_5($MeasurementName,  $retrydelay, $enter)  )
          ActionStepFeedbackEx( "Activity Workflow", "Workflow", "cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed", "Info", StcMessages_AppExit_6( $MeasurementName, $enter, $g_StcMaxConfiguredExecutionTries ) , @ScriptLineNumber ) 
 
          $g_TransAction = "SUM_" & $MeasurementName ; Sum of Responsetimes in Process
          $UsedErrorCycles = $enter-1         ; pass current used error cycles to XML output variable
 
          $Pass_Activity_Workflow = $Pass_Activity_Workflow + 1 ; number of runs without errors
          writelog(  StcMessages_AppExit_7($MeasurementName, $enter, $Pass_Activity_Workflow) )
          ExitLoop 1
       EndIf
    Until $enter > $g_StcMaxConfiguredExecutionTries
 
   
 
 

   
 
 
 ;-----------------------------------------------------------------------
 ;# Start of finalization block: Workflow Finalization;
 ;-----------------------------------------------------------------------
 ; StcAssert(false, "$Run=" & $Run )
 ; StcAssert(false, "$AbortCurrentWorkflow=" & $AbortCurrentWorkflow )
 ; StcAssert(false, "$g_UserExecutionAbortCode=" & $g_UserExecutionAbortCode ) ; May contain 800 for Trigger case
 ; StcAssert(false, "$BreakNextLoop=" & $BreakNextLoop )
 ; StcAssert(false, "CheckBlockIteration()=" & CheckBlockIteration() )
 
 ; Save last workflow run state:
 Local $SavedWorkflowRunState = $Run
 Local $SavedWorkflowAbortState = $AbortCurrentWorkflow
 Local $SavedWorkflowBreakNextLoop = $BreakNextLoop
 Local $OnSuccessRunResult = 0 ; 0-> not processed 1->processed with okay  2->processed but failed
 Local $OnErrorRunResult = 0   ; 0-> not processed 1->processed with okay  2->processed but failed
 Local $OnErrorBlockHasNoActionSteps=False
 
 StcResetErrorState()
 $AbortCurrentWorkflow = False
 $BreakNextLoop = False
 
 $LogfileIdent = 1
 $g_ControlBlockLevelName = "Workflow Finalization"
 
 
 
 OnEnterManagedBlock()
 
 ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "abe5f613-394a-4c70-9f69-8f58362b65c5", "Info",  "Finalize Block reached. Finalize Block may change the overall workflow result!", @ScriptLineNumber  )
 
    ;-------------------------------------------------------------------
    ; 'Workflow run succeeded' section
    ;-------------------------------------------------------------------
    Local $__ProcessedAtLeastOneActionStep = false
    If $SavedWorkflowRunState = 1 AND $g_UserExecutionAbortCode = 1 Then     ; On Success Block
     writelog("[WorkflowRunSucceeded.Enter]",1);
     $OnSuccessRunResult = 1
     While 1     ; Try-Block-Loop
             
       ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
             
       If $__ProcessedAtLeastOneActionStep Then ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "fa4cc1a3-255e-4ba3-add3-10bbe66e4fc9", "InfoPlus",  "Finalize Block: OnSuccess handling was successfully processed.", @ScriptLineNumber  )
       writelog("[WorkflowRunSucceeded.End] Leave 'Workflow run succeeded' with no error!",1);
       OnExitDoActionManagedBlock("fa4cc1a3-255e-4ba3-add3-10bbe66e4fc9")
       ExitLoop 1
     WEnd  
     If $run <> 1 Then $OnSuccessRunResult = 2
    EndIf     ; Try-Block-Loop End
 
                Local $__LastAction = $g_LastAction
    Local $__TransAction = $g_TransAction
 
 
       If $g_UserExecutionAbortCode <> 1 Then
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "abe5f613-394a-4c70-9f69-8f58362b65c5", "Warning",  "Finalize Block does only enter Common error handling because workflow was closed by a user exit code (e.g. Trigger or UserExit action step).", @ScriptLineNumber  )
    EndIf
   
    ;-------------------------------------------------------------------
    ; 'Workflow Run Failed' section
    ;-------------------------------------------------------------------
    $__ProcessedAtLeastOneActionStep = false
    If $SavedWorkflowRunState <> 1 Then ;  Local OnError. Loop over only if abort state is NOT reached!
                 
     writelog("[WorkflowRunFailed.Enter]",1);
 
     $Run = 1
     $OnErrorRunResult = 1
     While 1 ;  Local Catch-Loop, loop over only if abort state is NOT reached!
                                  ;  This is only if the DoAction has executed an "Exit Workflow" AS!
                   
       ; 'Workflow Run Failed' does not contain any active elements, so set error state
       $Run = -1
 
 
       If $__ProcessedAtLeastOneActionStep Then 
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "66f6a98d-fa99-4eb6-92bd-f7e9769dc916", "InfoPlus",  "Finalize Block: ""Workflow run failed"" handling was successfully processed.", @ScriptLineNumber  )
           $OnErrorBlockHasNoActionSteps = False
       Else
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "66f6a98d-fa99-4eb6-92bd-f7e9769dc916", "InfoPlus",  "Finalize Block: ""Workflow run failed"" handling was successfully processed but contained no further actions steps.", @ScriptLineNumber  )          
           $OnErrorBlockHasNoActionSteps = True
       EndIF
       writelog("[WorkflowRunFailed.End] Leave ""Workflow run failed"" with no further errors.",1);
       OnExitDoErrorManagedBlock("66f6a98d-fa99-4eb6-92bd-f7e9769dc916")
       ExitLoop 1
     WEnd
     If $run <> 1 Then $OnErrorRunResult = 2
  EndIf  ; OnSuccess-Block-Loop End
 
 
 
 ;-------------------------------------------------------------------
 ; Finally section
 ;-------------------------------------------------------------------
 Local $RunValueAtLevel_1 = $Run  ; DoAlways is error state neutral, so store value for current level
 $Run = 1
 $__ProcessedAtLeastOneActionStep = false
 
 writelog("[DoAlways.Enter] Following actions executed with no error handling by default!",1);
 While 1    ; Always-Block-Loop
     
    ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
    writelog("[DoAlways.End]",1)
 
   If $__ProcessedAtLeastOneActionStep Then ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "cca76061-3fca-4593-818d-bd39dfb46608", "InfoPlus",  "Common finalize handling was successfully processed. Note: Possible failed actions steps do not change the workflow run result.", @ScriptLineNumber )
   ExitLoop 1
 WEnd ; Always-Block-Loop
 
 $g_TransAction = $__TransAction
 $g_LastAction = $__LastAction
 
 _StcWaCloseRegisteredSessions("abe5f613-394a-4c70-9f69-8f58362b65c5","Workflow Finalization") 
 
 
 $Run = $RunValueAtLevel_1  ; DoAlways is error state neutral, so get back value for this level
     
 OnExitDoAlwaysManagedBlock("cca76061-3fca-4593-818d-bd39dfb46608")  
 
 OnLeaveManagedBlock()
 
 ; if was set or is now set, the overall state belongs to pesemistic..
 ;$AbortCurrentWorkflow = $SavedWorkflowAbortState OR $AbortCurrentWorkflow
 ;$OneOrMoreMeasurementFailed = true
 ;$LastMeasurementRunSucceeded  = false
 
 
 ActionStepFeedbackEx( $WorkflowName, "Workflow", "abe5f613-394a-4c70-9f69-8f58362b65c5", "Info", "Overall consumed time for this run: " & Round(TimerStop($MeasurementOverallTimeTimer )/1000,1) & "sec." , @ScriptLineNumber ) 
 
 OnMeasurementEnd ($g_TransAction,"abe5f613-394a-4c70-9f69-8f58362b65c5")    ; notify subsystem
 
 
 If $OnSuccessRunResult > 0 Then
    If $OnSuccessRunResult = 2 Then  ; OnSuccess runs into failed state! 
       ; now it depends what the user selected in Finalizer Wizard
       Switch (0)
          Case 0 ; User want to keep okay state 
             Actionstepfeedbackex( "Finalize block", "Finalize block", "fa4cc1a3-255e-4ba3-add3-10bbe66e4fc9", "Warning",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             Actionstepfeedbackex( "Finalize block", "Finalize block", "abe5f613-394a-4c70-9f69-8f58362b65c5", "Warning",  "The activity succeeded but failed in finalizer handling. Termination mode is: Ingore failure and proceed with Success.", @scriptlinenumber  )               
             _StcSetSuccess_Workflow()  ; for TA and APM we still use Success Code
          Case 1 ; User want to proceed with process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             Actionstepfeedbackex( "Finalize block", "Finalize block", "fa4cc1a3-255e-4ba3-add3-10bbe66e4fc9", "Error",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "abe5f613-394a-4c70-9f69-8f58362b65c5", "Error",  "Finalize handling failed. Termination mode is: Proceed Process.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_RPA_ONSUCCESS_FAILED_BUT_PROCCED) ; for TA and APM we still use measurement failed value
          Case 2 ; User want to terminate process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             Actionstepfeedbackex( "Finalize block", "Finalize block", "fa4cc1a3-255e-4ba3-add3-10bbe66e4fc9", "Error",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "abe5f613-394a-4c70-9f69-8f58362b65c5", "Error",  "Finalize handling failed. Termination mode is: Terminate.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_Measurement_Failed) ; for TA and APM we still use measurement failed value
       EndSwitch
    Else
       _StcSetSuccess_Workflow()  ; for TA and APM we still use Success Code
    EndIf
 EndIf
 
 
 If $OnErrorRunResult > 0 Then 
    ; it doesn't matter if block failed again or not. Failed is still failed!
    ; now it depends what the user selected in Finalizer Wizard
  
    if $OnErrorRunResult = 2 AND Not $OnErrorBlockHasNoActionSteps Then ; in this case one of the actions in OnError has failed!
       ActionstepFeedbackEx( "Finalize block", "Finalize block", "66f6a98d-fa99-4eb6-92bd-f7e9769dc916", "Error",  "One of the activities has failed.", @scriptlinenumber  )               
    EndIF
 
    Switch (1)
       Case 0 ; User want to proceed process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "abe5f613-394a-4c70-9f69-8f58362b65c5", "Error",  "Activity failed. Termination mode is: Proceed Process.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_RPA_FAILED_BUT_PROCCED_PROCESS) ; for TA and APM we still use measurement failed value
       Case 1 ; User want to terminate process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "abe5f613-394a-4c70-9f69-8f58362b65c5", "Error",  "Activity failed. Termination mode is: Terminate.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_Measurement_Failed) ; for TA and APM we still use measurement failed value
    EndSwitch
 EndIf
 
 
 
 
 ;-----------------------------------------------------------------------
 ;# End of finalization block: Workflow Finalization;
 ;-----------------------------------------------------------------------
 


__StcRpaFlushOutParams( "5eb8391e-4adb-4b7d-9eea-2b7a6e00026d", @ScriptLineNumber, "Get Unique ID and export to template ()"  )
Local $__AcitivtyParameter_Path = StcGetLogFileFolder() & "\OutputActivityParameters.json"
Local $__AcitivtyParameter_Success = __StcSaveOutParameters($__AcitivtyParameter_Path, "5eb8391e-4adb-4b7d-9eea-2b7a6e00026d", @ScriptLineNumber, "Get Unique ID and export to template ()"    ) 


  OnWorkflowEnd(  "5eb8391e-4adb-4b7d-9eea-2b7a6e00026d" )
  return $_MeasurementScriptRunFinished
EndFunc

 
 ;-----------------------------------------------------------------------
 ; Static Section for STC-Protector START
 ;-----------------------------------------------------------------------
 Func __ProtectorGetWindowTitle( $Title, $ActName, $ActId, $Line)
     Local $windowTitle = _ExpandToTitleRegEx($Title)
     If @error = 1 AND NOT $g_StcProtectorAlreadyShowsError Then 
        ActionStepFeedbackEx( $ActName, "KeyStroke", $ActId, "Error", "The window title '" & $windowTitle & "' is not a valid regular expression!", $Line )
        $g_StcProtectorAlreadyShowsError = TRUE
     EndIf
     return $windowTitle
 EndFunc
 
 Func __DecAndCheckFailCounter( $ProtID, $Title, $ActName, $ActId, $Line) 
     $g__StcProtFailCounter[$ProtID] = $g__StcProtFailCounter[$ProtID] - 1
     If $g__StcProtFailCounter[$ProtID] = 0 Then
        ActionStepFeedbackEx( $ActName, "KeyStroke", $ActId, "Warning", "Proctector for window title '" & $Title & "' disabled because of consecutive '" & $g__StcProtFailLimit & "' failures.", $Line )     
        StcProtectorDisable()
     EndIf
 EndFunc           
 
 
 ; STC-Protector, function for closing of error windows, not wanted popups like update information, check runs every 250 miliseconds
 Func STC_Protector()
     __CheckAutoItMainThread()
     If $g__StcProtSkipNextRun OR NOT $g__StcProtEnabled Then
         $g__StcProtSkipNextRun = FALSE
         return
     EndIf
         
     If NOT IsDeclared("g_StcProtectorAlreadyShowsError") Then Global $g_StcProtectorAlreadyShowsError = FALSE
     ; check and force of reboot, waits till a running measurement is finished
     If $reboot = 1 AND @hour = $reboothour AND @min = $rebootMin Then $rebootforce = 1
 
  
 
 EndFunc
 
 ;-----------------------------------------------------------------------
 ; Static Section for STC-Protector END
 ;-----------------------------------------------------------------------
 


; Run protocol template xml:
Func STC_GetWorkflowProtocolTemplate()
 return "<?xml version=""1.0"" encoding=""utf-8""?>" & @CRLF & _
"<WorkflowRunProtocol xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Id=""5eb8391e-4adb-4b7d-9eea-2b7a6e00026d"" Name=""Get Unique ID and export to template"" Type=""ActivityWorkflow"" WorkflowRevision=""0"" WorkflowProjectID=""5eb8391e-4adb-4b7d-9eea-2b7a6e00026d"" ModelRevision=""9"" WorkflowEditorVersion=""6.0.15086.1"" WorkflowRun=""0"" Author=""msps"" CreationDate=""2022-11-01T18:07:37.3287712+08:00"">" & @CRLF & _
"  <Items>" & @CRLF & _
"    <Item Id=""fd74f7b8-1fb7-48f7-bede-4b9d6f303148"" Name=""Workflow Initialization"" Type=""InitializeSectionActivity"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""707fe316-5062-4e5c-bfd4-689a7cb8e829"" Name=""Activity Parameters"" Type=""ActivityParametersActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""66b3dfd6-7006-4d51-ae9b-c0a68c16401f"" Name=""Pattern Gallery"" Type=""SearchPatternGalleryActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""76cfe1c2-e082-41cb-8a22-66b8349a671c"" Name=""Settings"" Type=""WorkflowSettingsActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"    <Item Id=""cfa1f684-3f04-4b29-b7cd-58f8f7bc76ed"" Name=""Activity Workflow"" Type=""ActivityWorkflowMeasurement"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""4988ec15-b4a8-4636-819c-ab7d07d91c29"" Name=""Transaction"" Type=""Transaction"">" & @CRLF & _
"          <Items>" & @CRLF & _
"            <Item Id=""3b7f238c-f3ba-49ba-8ca9-f8eb7a898c9c"" Name=""Managed"" Type=""TryCatchOperator"">" & @CRLF & _
"              <Items>" & @CRLF & _
"                <Item Id=""4dd5ba05-121a-477e-8c25-36c5c5778583"" Name=""DoAction"" Type=""TrySection"">" & @CRLF & _
"                  <Items>" & @CRLF & _
"                    <Item Id=""d025d9e9-c759-40a3-ae3f-e10c26654799"" Name=""Delete File"" Type=""DeleteFileActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                  </Items>" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""f424351a-c4f5-40a2-8d65-dbcc3918d755"" Name=""OnError"" Type=""CatchSection"">" & @CRLF & _
"                  <Items>" & @CRLF & _
"                    <Item Id=""65648b04-aeb1-4c29-aee5-a335fa900059"" Name=""Force OK State"" Type=""ForceOkStateActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                  </Items>" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""091671d8-c2f1-4e38-8d68-46d72f1d4ce9"" Name=""DoAlways"" Type=""FinallySection"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"              </Items>" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item Id=""ec6287cf-627a-4e2f-be57-7a4a670dc704"" Name=""Write to Text File: Write to Text File1"" Type=""WriteToTextFileActivity"">" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item Id=""5e4aa0df-c984-45aa-bd53-3b6b3c2d6ec0"" Name=""Group: Get Unique Row Value"" Type=""BlockSectionActivity"">" & @CRLF & _
"              <Items>" & @CRLF & _
"                <Item xsi:type=""Loop"" Id=""a337be02-28e3-4881-a3dc-4ca3f8979c60"" Name=""File controlled Loop: File controlled Loop1"" Type=""ReadFileActivity"">" & @CRLF & _
"                  <Items>" & @CRLF & _
"                    <Item Id=""9ff0a3e6-da82-4803-98c1-113f8f89d8e4"" Name=""String to Array: String to Array1"" Type=""StringToArrayActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""2a1a0199-fc8a-4898-bfe5-029efc96894f"" Name=""Read from Array: Read from Array1"" Type=""ReadFromArrayActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""a2e44da5-b32e-4ddf-92e1-6cb29cc0134e"" Name=""Managed"" Type=""TryCatchOperator"">" & @CRLF & _
"                      <Items>" & @CRLF & _
"                        <Item Id=""411acc04-b10a-42a1-9737-cd99240f77e9"" Name=""DoAction"" Type=""TrySection"">" & @CRLF & _
"                          <Items>" & @CRLF & _
"                            <Item Id=""6160f6ce-9f32-438d-9dcd-034305d5c3f7"" Name=""Check Value"" Type=""CheckValueActivity"">" & @CRLF & _
"                              <RunResult State=""NotExecuted"" />" & @CRLF & _
"                            </Item>" & @CRLF & _
"                          </Items>" & @CRLF & _
"                          <RunResult State=""NotExecuted"" />" & @CRLF & _
"                        </Item>" & @CRLF & _
"                        <Item Id=""252ba3c9-2aca-4759-a3b5-fae33b6de237"" Name=""OnError"" Type=""CatchSection"">" & @CRLF & _
"                          <Items>" & @CRLF & _
"                            <Item Id=""585b55d5-ca5b-4518-bbd1-9682964eca24"" Name=""Force OK State"" Type=""ForceOkStateActivity"">" & @CRLF & _
"                              <RunResult State=""NotExecuted"" />" & @CRLF & _
"                            </Item>" & @CRLF & _
"                          </Items>" & @CRLF & _
"                          <RunResult State=""NotExecuted"" />" & @CRLF & _
"                        </Item>" & @CRLF & _
"                        <Item Id=""1364b037-3878-4704-b623-4a88ff5a9855"" Name=""DoAlways"" Type=""FinallySection"">" & @CRLF & _
"                          <RunResult State=""NotExecuted"" />" & @CRLF & _
"                        </Item>" & @CRLF & _
"                      </Items>" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""377acb79-4c84-4d03-9195-c0c4496ead9c"" Name=""Select Case"" Type=""SelectCaseActivity"">" & @CRLF & _
"                      <Items>" & @CRLF & _
"                        <Item Id=""89543260-db11-4911-812e-d9bb03116d5f"" Name=""False with Compare Mode: Fullmatch"" Type=""StringTypeCase"">" & @CRLF & _
"                          <Items>" & @CRLF & _
"                            <Item Id=""4a7de065-a10b-4ad8-bbc4-3eba3ca1aac5"" Name=""Write to Text File"" Type=""WriteToTextFileActivity"">" & @CRLF & _
"                              <RunResult State=""NotExecuted"" />" & @CRLF & _
"                            </Item>" & @CRLF & _
"                            <Item Id=""baae14c6-cfcd-47dc-9d13-110357542c6d"" Name=""Math Operations"" Type=""MathOperationsActivity"">" & @CRLF & _
"                              <RunResult State=""NotExecuted"" />" & @CRLF & _
"                            </Item>" & @CRLF & _
"                          </Items>" & @CRLF & _
"                          <RunResult State=""NotExecuted"" />" & @CRLF & _
"                        </Item>" & @CRLF & _
"                        <Item Id=""6ee0c13b-47bd-4d56-9271-e1ec43517703"" Name=""DoElse"" Type=""OnElseCaseSection"">" & @CRLF & _
"                          <Items>" & @CRLF & _
"                            <Item Id=""7b412665-6d2a-449d-9b51-d305a77e1138"" Name=""Force OK State"" Type=""ForceOkStateActivity"">" & @CRLF & _
"                              <RunResult State=""NotExecuted"" />" & @CRLF & _
"                            </Item>" & @CRLF & _
"                          </Items>" & @CRLF & _
"                          <RunResult State=""NotExecuted"" />" & @CRLF & _
"                        </Item>" & @CRLF & _
"                      </Items>" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""25aaa937-373d-47fa-8cf7-016d38af9380"" Name=""Set Variable: Set Temp Value"" Type=""SetVariableActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""8805fb1b-8ee5-4129-8c7e-74325818b0df"" Name=""Set Variable: Set UniqueCounter Variable"" Type=""SetVariableActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                  </Items>" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""a27cd91e-0511-4cef-a9b3-f630d45649eb"" Name=""Message Box: Unique"" Type=""MessageBoxActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"              </Items>" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item Id=""4c0a4f8e-98cc-4963-9ec2-8bab775ab50b"" Name=""Run Program"" Type=""RunActivity"">" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item Id=""f6fc3c0c-2638-418d-b21c-be5c97ffddb5"" Name=""Sleep: Sleep2"" Type=""SleepActivity"" Description="""">" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item Id=""3ab98710-2b6f-46e8-a21d-a033ee6d57da"" Name=""Keystrokes: Format  CSV File"" Type=""KeystrokeActivity"">" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item xsi:type=""Loop"" Id=""b690cb5e-f492-44ea-9ff5-b3a222ada79e"" Name=""File controlled Loop"" Type=""ReadFileActivity"">" & @CRLF & _
"              <Items>" & @CRLF & _
"                <Item Id=""b5a0cb1a-ed22-4bd5-9264-c8193189782d"" Name=""Copy File"" Type=""CopyFileActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""3330cc19-7229-467c-be3f-f967d6196f85"" Name=""Keystrokes: Filter Row and Copy Row"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""34b34440-8278-4e5e-9281-10b8bd047520"" Name=""Managed"" Type=""TryCatchOperator"">" & @CRLF & _
"                  <Items>" & @CRLF & _
"                    <Item Id=""acc00e26-c959-4bf5-9e7a-2a8f2ad91f18"" Name=""DoAction"" Type=""TrySection"">" & @CRLF & _
"                      <Items>" & @CRLF & _
"                        <Item Id=""3e91d066-dc2e-4766-b679-3046affe7c03"" Name=""Run Program: Open Excel template File"" Type=""RunActivity"">" & @CRLF & _
"                          <RunResult State=""NotExecuted"" />" & @CRLF & _
"                        </Item>" & @CRLF & _
"                      </Items>" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""94ed252d-02b0-4ec8-8ff3-f85168ef289c"" Name=""OnError"" Type=""CatchSection"">" & @CRLF & _
"                      <Items>" & @CRLF & _
"                        <Item Id=""74798e12-1ce8-4e59-8e50-210261322406"" Name=""Force OK State"" Type=""ForceOkStateActivity"">" & @CRLF & _
"                          <RunResult State=""NotExecuted"" />" & @CRLF & _
"                        </Item>" & @CRLF & _
"                      </Items>" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""8f3ac6ed-9ebd-4198-a3d7-5a7609fcc597"" Name=""DoAlways"" Type=""FinallySection"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                  </Items>" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""7aae312a-9794-4dd3-92d9-bc11adb98c3a"" Name=""Window Wait"" Type=""WindowWaitActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""3b0e7fce-2525-4e2f-8255-82cda91f8da5"" Name=""Keystrokes: Enable Editing"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""4d3f79d2-629b-4422-82ea-aaaac36541a3"" Name=""Sleep"" Type=""SleepActivity"" Description="""">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""f9840801-8875-464a-ac80-7945304053be"" Name=""Keystrokes: Paste Filtered Data into Excel Template"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""e7780576-a984-44b0-ae7a-c38da13e96eb"" Name=""Sleep: Sleep1"" Type=""SleepActivity"" Description="""">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""302dc412-6278-4124-a742-7412482882a6"" Name=""Keystrokes: Keystrokes2"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""6f38d039-8b37-4e1b-a480-ef701b1f8862"" Name=""Sleep: Sleep11"" Type=""SleepActivity"" Description="""">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""db14024e-15a6-4bb9-933f-e6b833123722"" Name=""Rename File"" Type=""RenameFileActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""bcb1f13d-1eb9-429d-89b7-c5d0a251614d"" Name=""Keystrokes: Clear Filter"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"              </Items>" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item Id=""7e664bc0-a1c4-4fec-81b3-178917513edf"" Name=""Group: Close CSV File"" Type=""BlockSectionActivity"">" & @CRLF & _
"              <Items>" & @CRLF & _
"                <Item Id=""882e415d-9dc0-4fcf-8985-5f59e502d513"" Name=""Window set State"" Type=""WindowSetStateActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""8b00418e-969c-4495-98bb-2e8ab41c4e9e"" Name=""Keystrokes: Keystrokes1"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"              </Items>" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"          </Items>" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"    <Item Id=""abe5f613-394a-4c70-9f69-8f58362b65c5"" Name=""Workflow Finalization"" Type=""WorkflowFinalizationActivity"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""fa4cc1a3-255e-4ba3-add3-10bbe66e4fc9"" Name=""Workflow run succeeded"" Type=""OnSuccessSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""66f6a98d-fa99-4eb6-92bd-f7e9769dc916"" Name=""Workflow run failed"" Type=""OnErrorSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""cca76061-3fca-4593-818d-bd39dfb46608"" Name=""Common finalization handling"" Type=""DoAlwaysSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"  </Items>" & @CRLF & _
"  <RunResult State=""NotExecuted"" />" & @CRLF & _
"</WorkflowRunProtocol>"  
EndFunc

