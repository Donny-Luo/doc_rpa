;-------------------------------------------------------------------------------
; Code was generated by MuleSoft RPA Builder 6.0.15086.1
; Type is: RPA
; Copyright © MuleSoft LLC 2022
; Template Revision: $Revision: 6.0.1.0 $
; RPA-Workflow Author: msps
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; include of standard functions
;-------------------------------------------------------------------------------
#include "StcFuncLib.stc3"

;-------------------------------------------------------------------------------
; Global value Setting 
;-------------------------------------------------------------------------------
Local $FutureUse = true  ; for now the scriptfeedback is always on!

; Don't change or remove following line! 
$g_UsedWorkflowEditorVersion = "6.0.15086.1"

;-------------------------------------------------------------------------------
; Set the workflow type for this workflow
;-------------------------------------------------------------------------------
_StcSetWfeWorkfowTypeId( 3 )

;-------------------------------------------------------------------------------
; Registering of runtime package cache paths (must be before Init is called!)
;-------------------------------------------------------------------------------

__StcRegisterRuntimePackageModul( "CommonRuntime_6_0_057BEB3330D7CDF6BEB5F9453118434D")  ; Source on WFE generated this script: $item.Value   

__StcRegisterRuntimePackageModul( "FlaUI_6_0_77D92E53486F7B312AA13FDD79B6AF89")  ; Source on WFE generated this script: $item.Value   


;-------------------------------------------------------------------------------
; Registering of runtime package cache paths (must be before Init is called!)
;-------------------------------------------------------------------------------

;--------------------------------------------------------------------------------

Local $MaxStcLogfile = 1 ;1MB
InitStcFunclib($MaxStcLogfile, $FutureUse, 0)

StcSetScreenShotExtension(".bmp")                                     ; default store as BMP (productive)

writelog("Info - Script was built by X1DS Rev.  : " & $g_UsedWorkflowEditorVersion & " []" & " at 6:08:04 PM ; Tuesday, November 1, 2022 (local time)" )
writelog("Info - Script was built on machine    : johnzhong-pc, OS Typ/Version: " & "Windows 10 x64 v10.0.19044" )
writelog("--------------------------------------------------------------------------------------------------------------")


;-------------------------------------------------------------------------------
;STC-Guard Konfiguration
;-------------------------------------------------------------------------------
__SetStcGuardOperationMode( True )    ; enable or disable Guard by project settings.
__StcRegisterKillByStcGuard( "")
__StcRegisterKillOnExit("" )
__StcRegisterKeepAliveList( "" )


;-------------------------------------------------------------------------------
;   Measurement values
;-------------------------------------------------------------------------------
; counter to count the number of tries
$enter = 1


;-------------------------------------------------------------------------------
;   Global Master Data Settings
;-------------------------------------------------------------------------------
$WorkflowName = "Save Template as PDF" ;StcServerMasterDataVariable( "Workflowname", "STRING",  "Save Template as PDF"  )
; For now the Applname ist not configurable in case of RPA type Workflows! 
; So in all cases where the application name is part of an output we should write: n/a !
$ApplName = "<n/a>"


;-------------------------------------------------------------------------------
;  Image processing settings       
;-------------------------------------------------------------------------------
StcEnableAutoBitsPerPixelFallback()                     


;-------------------------------------------------------------------------------
;  External Library Includes       
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
; Check if project uses AIS Functions. If so we call a special init to 
; precompile needed code. Otherwise first pattern search take more time than othhers!
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
;   Start of scheduler and measurement
; 
;-------------------------------------------------------------------------------
schedule()  ; !!! Ths is the main entry!!!!
   
;-------------------------------------------------------------------------------
; Start of Workflow
;   Measurement Workflows
;-------------------------------------------------------------------------------
Func measurement ()

  Local $LoopErrorHandling = 0
  Local $DoNotExecute = False

  __StcAisGlobalConfigs( $g__StcUseLegacyStaticAnalyseImages)
  
  OnWorkflowStart( "70d39501-dd9d-4d99-be87-33ae5254676b",  STC_GetWorkflowProtocolTemplate() )

  ;---------------------------------------------------------------------------
  ;  Master Daten Section
  ;-------------------------------------------------------------------------------
  ActionStepFeedbackEx( "Save Template as PDF ()", "Activity", "70d39501-dd9d-4d99-be87-33ae5254676b", "Info", "Process name    : OSRA-22 case.", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Save Template as PDF ()", "Activity", "70d39501-dd9d-4d99-be87-33ae5254676b", "Info", "Activity name   : Save Template as PDF.", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Save Template as PDF ()", "Activity", "70d39501-dd9d-4d99-be87-33ae5254676b", "Info", "Workflow type is: " & StcGetWfeWorkflowType() & ".", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Save Template as PDF ()", "Activity", "70d39501-dd9d-4d99-be87-33ae5254676b", "Info", "Executed by user: '" & @UserName & "' at machine name: '" & @ComputerName & "'. OS-Version: " & @OSVersion & ".", @ScriptLineNumber ) 

  ;-------------------------------------------------------------------------------
  ;   Measurement Point INIT-Section 
  ;-------------------------------------------------------------------------------

  ; Simple Measurement Point Registration 
   
   ; Timer related Measurement Point Registration
   
   
 ;-----------------------------------------------------------------------
 ;# Start of Initialization Section: Workflow Initialization;
 ;-----------------------------------------------------------------------
 Local $__gStcInitSectionSuccess = True ; may set to false in one of the herein called init section AS
     
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Activity Parameters"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "8fd309a5-0f0e-485f-8e20-f1c9d4a1a718", "Activity_Parameters", False, "EhNormal", @ScriptLineNumber)
   If True Then
   $LogfileIdent = 2 
   $TransStep = ("Activity Parameters")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of Activity Parameter Definitions: Activity Parameters;
   ;-----------------------------------------------------------------------
   Local $__AcitivtyParameter_Path = StcGetLogFileFolder() & "\InputActivityParameters.json"
   Local $__AcitivtyParameter_Success = __StcInitInParameters($__AcitivtyParameter_Path, "8fd309a5-0f0e-485f-8e20-f1c9d4a1a718", @ScriptLineNumber, "Activity Parameters"    ) 
   Local $__AcitivtyParameter_Value ; the last retrieved value as it is used within the variable system. Intrinic is as it is, complex is Jason
   Local $__ActivityParameter_Display ; the value i an always readable format.
   
   If $__AcitivtyParameter_Success Then
   Local $__AcitivtyParameter_ReadSuccess = True;
      ; List of in variables 
   If Not $__AcitivtyParameter_ReadSuccess then  $__gStcInitSectionSuccess = False  ; set global error at init flag!
   
   
   ; Register process out variables:
   Else
      $__gStcInitSectionSuccess=False  ; set global error at init flag!
   Endif
   
   $Run = CheckErrorHandling(1, $__AcitivtyParameter_Success ? 1 : -1 , "8fd309a5-0f0e-485f-8e20-f1c9d4a1a718", @ScriptLineNumber, "Activity Parameters"  ) 
   
   
   ;-----------------------------------------------------------------------
   ;## End of Activity Parameter Definitions: Activity Parameters;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "8fd309a5-0f0e-485f-8e20-f1c9d4a1a718", true )
        
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Pattern Gallery"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "d66e80df-aba5-4a43-944c-a166eef967df", "Pattern_Gallery", True, "EhNormal", @ScriptLineNumber)
   If _StcVarSysValidateVarReference( "Pattern_Gallery", "d66e80df-aba5-4a43-944c-a166eef967df", @ScriptLineNumber, "EhNormal" ) Then
   $LogfileIdent = 2 
   $TransStep = ("Pattern Gallery")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of transaction step: Pattern Gallery;
   ;-----------------------------------------------------------------------
   $ErrorHandling = 1
   
   	
   
   ;-----------------------------------------------------------------------
   ;## End of transaction step: Pattern Gallery;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "d66e80df-aba5-4a43-944c-a166eef967df", true )
        
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Settings"
   
   $OutboundVar_BasePathOut = Default 
     
   Global $AutoProp_BasePath = "%temp%", $AutoProp_BasePath_HasVarMapping = False 
   Global $AutoProp_RemoveBasePathSubfolderOnExit = True, $AutoProp_RemoveBasePathSubfolderOnExit_HasVarMapping = False   
   Global $AutoProp_GenerateSubFolder = True, $AutoProp_GenerateSubFolder_HasVarMapping = False   
   Global $AutoProp_UseAllowedPathsLimitation = False, $AutoProp_UseAllowedPathsLimitation_HasVarMapping = False   
   Global $AutoProp_ProxySettingAsInt = 0, $AutoProp_ProxySettingAsInt_HasVarMapping = False   
   Global $AutoProp_IsUseProxyAuthChecked = False, $AutoProp_IsUseProxyAuthChecked_HasVarMapping = False   
   Global $AutoProp_ProxyUrl = "", $AutoProp_ProxyUrl_HasVarMapping = False 
   Global $AutoProp_ProxyAccount = "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":"""",""Token"":"""",""Password"":"""",""CryptUser"":"""",""CryptPassword"":""""},""Name"":""Name"",""Id"":""e0ec96be-c597-4457-9029-e5d48d411181"",""Access"":""RW"",""Tags"":null}", $AutoProp_ProxyAccount_HasVarMapping = False   
   Global $AutoProp_ProxyAccountAsString = "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":"""",""Token"":"""",""Password"":"""",""CryptUser"":"""",""CryptPassword"":""""},""Name"":""Name"",""Id"":""e0ec96be-c597-4457-9029-e5d48d411181"",""Access"":""RW"",""Tags"":null}", $AutoProp_ProxyAccountAsString_HasVarMapping = False 
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "ade93b86-a021-4cb5-803f-bf6ffdc4470c", "Settings", True, "EhNormal", @ScriptLineNumber)
   If _StcVarSysValidateVarReference( "Settings", "ade93b86-a021-4cb5-803f-bf6ffdc4470c", @ScriptLineNumber, "EhNormal" ) Then
   $LogfileIdent = 2 
   $TransStep = ("Settings")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of transaction step: Settings;
   ;-----------------------------------------------------------------------
   $__gStcRemoveBasePathSubfolderOnExit = $AutoProp_RemoveBasePathSubfolderOnExit
   $translatedBasePath = TranslateText($AutoProp_BasePath)
   
   ;Handle run-sub folder generation & removal
   if $AutoProp_GenerateSubFolder then 
   $OutboundVar_BasePathOut = $translatedBasePath & "\" & $StcRunGuid & "\"
   ActionStepFeedbackEx("Workflow Settings","Action","ade93b86-a021-4cb5-803f-bf6ffdc4470c", "Info", "An additional subfolder: " & $StcRunGuid &" will be generated for the current workflow run.",0)
   _NgCoreLogAnnotationText( "ade93b86-a021-4cb5-803f-bf6ffdc4470c", "An additional subfolder: " & $StcRunGuid &" was generated for the current workflow run.")
   If True then
   ActionStepFeedbackEx("Workflow Settings","Action","ade93b86-a021-4cb5-803f-bf6ffdc4470c", "Info", "Removing Base Path subfolder on exit is enabled.",0)
   _NgCoreLogAnnotationText( "ade93b86-a021-4cb5-803f-bf6ffdc4470c", "Removing Base Path subfolder on exit was enabled.")
   else
   ActionStepFeedbackEx("Workflow Settings","Action","ade93b86-a021-4cb5-803f-bf6ffdc4470c", "Info", "Removing Base Path subfolder on exit is disabled.",0)
   EndIf
   
   else
   
   $OutboundVar_BasePathOut = $translatedBasePath & "\"
   
   EndIf
   
   
   
   ;Base Path registration
   If FileExists($translatedBasePath) Then
   
   	StcSetBasePathFolder($OutboundVar_BasePathOut)
   
   	Local $p_ResultText
   	Local $__Success = True ; local check for NgCore Call success
   	$__Success = __StcNgRegisterBasePath($OutboundVar_BasePathOut, $p_ResultText, "ade93b86-a021-4cb5-803f-bf6ffdc4470c",  @ScriptLineNumber, "Settings")
   
   	Local $__BasePathFeedbackType = $__Success ? "Info" : "Error"
   	Local $__BasePathMessage = $__Success ? "StwsBasePath registration for the current run succeeded: '" & $OutboundVar_BasePathOut & "'" _
   			  : ("StwsBasePath registration for the current run failed. Error details: " & $p_ResultText)
   
   	ActionStepFeedbackEx("Workflow Settings","Action","ade93b86-a021-4cb5-803f-bf6ffdc4470c", $__BasePathFeedbackType, $__BasePathMessage, 0)
   	_NgCoreLogAnnotationText( "ade93b86-a021-4cb5-803f-bf6ffdc4470c", $__BasePathMessage)
   
   	;Allowed paths registration
   	
   	If $__Success Then
   					__DisableAllowedPathsLimitation("ade93b86-a021-4cb5-803f-bf6ffdc4470c",  @ScriptLineNumber, "Settings")
   			writelog("Allowed Path Limitation for File Operations is disabled")
   			ActionStepFeedbackEx("Workflow Settings","Action","ade93b86-a021-4cb5-803f-bf6ffdc4470c", "Info", "Allowed Path Limitation for File Operations is disabled.",0)
   		
   		$__Success = __StcNgRegisterProxySettings($AutoProp_ProxySettingAsInt, $AutoProp_ProxyUrl, $AutoProp_IsUseProxyAuthChecked, $AutoProp_ProxyAccount, "ade93b86-a021-4cb5-803f-bf6ffdc4470c",  @ScriptLineNumber, "Settings")
   	EndIf
   
   	; if one of the allowed pahts calls failed, we go to error state, but only if error handling is enabled:
   	$__gStcInitSectionSuccess = CheckErrorHandling(1, $__Success ? 1 : -1 , "ade93b86-a021-4cb5-803f-bf6ffdc4470c", @ScriptLineNumber, "Settings" ) < 0 ? False : True
   	$__gStcGenerateSubBasePathFolder = $AutoProp_GenerateSubFolder
   
   	$Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "ade93b86-a021-4cb5-803f-bf6ffdc4470c", @ScriptLineNumber, "Settings"  ) 
   
   Else
   
   	ActionStepFeedbackEx("Workflow Settings","Action","ade93b86-a021-4cb5-803f-bf6ffdc4470c", "Error", "Base path does not exist: '" & $translatedBasePath & "'", 0)
   	_NgCoreLogAnnotationText( "ade93b86-a021-4cb5-803f-bf6ffdc4470c", "Base path does not exist: '" & $translatedBasePath & "'")
   	$__gStcInitSectionSuccess = False
   	$Run = -1;
   
   EndIf
   
   
   ;-----------------------------------------------------------------------
   ;## End of transaction step: Settings;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
     Global $Settings_BasePath = $OutboundVar_BasePathOut  ; declare variable source. Will be referenced by other action steps 
   
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "ade93b86-a021-4cb5-803f-bf6ffdc4470c", true )
       
 OnEndOfInitSection( "aa3c3501-33e8-4b63-9573-468ee657100e", true )
 ; Now it's save to enable the protector, because it may use variables defined by SBVs!
 StcProtectorEnable()
 ;-----------------------------------------------------------------------
 ;# End of Initialization Section: Workflow Initialization;
 ;-----------------------------------------------------------------------
  

   
 ;----------------<-----------------------------------------------------------
 ;--------------<
 ;------------<   Measurement: <Activity Workflow>
 ;--------------< 
 ;----------------<-----------------------------------------------------------
    Global $MeasurementName = "Activity Workflow"
    Global $Pass_Activity_Workflow
    Global $UsedErrorCycles = 0
    Global $g_LastControlBlockLevelName = ""
    Global $g_ControlBlockLevelName = "MainMeasurement"
    Global $PrepareCodeSuccess = True
    Global $MeasurementOverallTimeTimer = TimerStart()
    
    ; Set Default current measurement iteration!
    $enter = 1
 
    ; set default uuid as default uuid for actioin feedback:
    ActionFeedbackSetDefaultUuid("2a9c502f-3d48-4abe-a63f-450a279fcda0")
    ; Inform user about the disabled STC-Guard. In case of Design Mode run, the Guard may also disabled!
    If $StcDisableGuard Then ActionStepFeedbackEx( "StcGuardMode", "Action", default, "Warning", "The STC Guard is disabled by project setting.!", @ScriptLineNumber )
 
    
    StcSetGeneralTimeout( 45, True ) ;called internally!
    $g_StcMaxConfiguredExecutionTries = 1   ; internal STC funclib used value
    Local $errorcycles = $g_StcMaxConfiguredExecutionTries              ;  old legacy name, may removed in the future!
    ActionStepFeedbackEx( "Activity Workflow", "Workflow", "2a9c502f-3d48-4abe-a63f-450a279fcda0", "Info", "///-[ Workflow: 'Activity Workflow' started ]-\\\", @ScriptLineNumber ) 
    If StcIsDesignModeActive()  Then
       If $g_StcMaxConfiguredExecutionTries <> 1 Then
         $g_StcMaxConfiguredExecutionTries = 1
         ActionStepFeedbackEx( "Activity Workflow", "Workflow", "2a9c502f-3d48-4abe-a63f-450a279fcda0", "Warning", "The workflow was started from WorkflowEditor in Design mode. Retries reduced to 1.", @ScriptLineNumber ) 
       EndIf
    EndIf
    Local $retrydelay = 60
 
    OnMeasurementStart( $MeasurementName, "2a9c502f-3d48-4abe-a63f-450a279fcda0" )
    
 
    
    ;<<<<<<<<<<<<<       P r e p a r e  -- S e c t i o n    >>>>>>>>>>>>>>>>>>>>
    ; Some action steps may have prepare code which must be executed before the measurement starts.
 
 
    Do
       Local  $x = 0
       $Run = 1  ; don't make that local or global !!!
 
       ; if prepare code failed, so do abort workflow before it was started!
       If Not $PrepareCodeSuccess Then $Run = -1
         
       ;---------------------------------------------------------------------------
       ; Applications values
       ;---------------------------------------------------------------------------
       
             
       _StcTraDaHandleErrors() ; check here if TraceData Bridge error has occurred! If so script will be terminated!
 
       
       ;---------------------------------------------------------------------------
       ; Check if one of the InitSection AS has failed. If so, write action step feadback a terminate workflow run!
       If Not $__gStcInitSectionSuccess  Then
         ActionStepFeedbackEx( "Activity Workflow", "Workflow", "2a9c502f-3d48-4abe-a63f-450a279fcda0", "Error", "One of the steps in the initialize section has failed, so further execution is not possible!", @ScriptLineNumber ) 
         $Run = -1 ; abort further execution!
       EndIf
 
       ;---------------------------------------------------------------------------
       ; Start of Workflow
       ;---------------------------------------------------------------------------
       $Errortext = ""
   
       If $run > 0 AND NOT OnCheckAbortState() Then
          OnMeasurementBlockStart("Transaction", "8b1f8a0e-5be1-463d-94f0-b27eb7657040", 1, "Transaction")
            
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Transaction"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "8b1f8a0e-5be1-463d-94f0-b27eb7657040", "Transaction", False, "$Dbg.Item.ActivityErrorHandling", @ScriptLineNumber)
   If True Then
   $LogfileIdent = 2 
   $TransStep = ("Transaction")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;---------------------------------------------------------------------------
   ;## Start of Transaction: Transaction;
   ;---------------------------------------------------------------------------
   
   OnTransactionStart("Transaction", "8b1f8a0e-5be1-463d-94f0-b27eb7657040")
   $g_LastControlBlockLevelName = $g_ControlBlockLevelName
   $g_ControlBlockLevelName = "Transaction"
   
   $__gStcTransactionSqx += 1
   $g_TransAction = "Transaction" 
   $TransStep = "Transaction"
   
   If CheckBlockIteration() Then
      OnActionStart("Iterate over Files", "658f5f55-d0ba-4556-9db9-697b94add976", 2, "Iterate over Files")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Iterate over Files"
      
      $OutboundVar_IterateFileName = Default 
      $OutboundVar_IteratePath = Default 
      $OutboundVar_NumberOfElements = Default 
      $OutboundVar_Iteration = Default 
      $OutboundVar_CountOfProcessedElements = Default 
        
      Global $AutoProp_RecursiveLoop = True, $AutoProp_RecursiveLoop_HasVarMapping = False   
      Global $AutoProp_MaxFileCount = 0, $AutoProp_MaxFileCount_HasVarMapping = False   
      Global $AutoProp_DirectoryPath = "C:\RPADemo\OSRA22\Working Dir", $AutoProp_DirectoryPath_HasVarMapping = False 
      Global $AutoProp_FileName = "*.*", $AutoProp_FileName_HasVarMapping = False 
      Global $AutoProp_UseIterationLimit = False, $AutoProp_UseIterationLimit_HasVarMapping = False   
      Global $AutoProp_ForceError = True, $AutoProp_ForceError_HasVarMapping = False   
      Global $AutoProp_ForceErrorIfNoFileFound = False, $AutoProp_ForceErrorIfNoFileFound_HasVarMapping = False   
      Global $AutoProp_MaxAllowedFileCount = 100000, $AutoProp_MaxAllowedFileCount_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "658f5f55-d0ba-4556-9db9-697b94add976", "Iterate_over_Files", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Iterate_over_Files", "658f5f55-d0ba-4556-9db9-697b94add976", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Iterate over Files")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of 'Iterate over Files'-Loop: Iterate over Files;
      ;-----------------------------------------------------------------------
      $LogfileIdent = 3
      $g_LastControlBlockLevelName = $g_ControlBlockLevelName
      $g_ControlBlockLevelName = "Iterate over Files"
      $Iterate_over_Files__BreakLoopWithError = False  
      $Iterate_over_Files__BreakNextLoop      = False  
      ; Variables unique for each nested loop:
      Local $Iterate_over_Files__StartedLoopIterations = 0
      
      $AutoProp_MaxFileCount = $AutoProp_UseIterationLimit ? $AutoProp_MaxFileCount : 0
      
      Local $translatedDirectoryPath = TranslateText($AutoProp_DirectoryPath)
      Local $Iterate_over_Files__p_FileList
      Local $__Success = __StcNgIterateOverFiles( String($AutoProp_FileName), _
      											String($translatedDirectoryPath), _
      											$AutoProp_RecursiveLoop, _
      											$AutoProp_MaxFileCount, _
      											$AutoProp_ForceError, _
      											$AutoProp_MaxAllowedFileCount, _
      											$AutoProp_UseIterationLimit, _
      											$Iterate_over_Files__p_FileList, _
      											"658f5f55-d0ba-4556-9db9-697b94add976",  @ScriptLineNumber, "$activityName" )
      							      
      $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "658f5f55-d0ba-4556-9db9-697b94add976", @ScriptLineNumber, "$activityName"  ) 
      
      Local $OutboundVar_CountOfProcessedElements = 0
      Local $Iterate_over_Files__OutboundVar_CountOfProcessedElements = 0
      
      If $__Success Then
      	$Iterate_over_Files__filesCount = UBound($Iterate_over_Files__p_FileList)
      	if ($Iterate_over_Files__filesCount = 0) Then
      		ActionStepFeedbackEx( "Iterate over Files", "No files found", "658f5f55-d0ba-4556-9db9-697b94add976", $AutoProp_ForceErrorIfNoFileFound ? "Error" : "Warning", _
      							"No files matching search criteria found", _
      							@ScriptLineNumber )
      
      		$Run = CheckErrorHandling(1, $AutoProp_ForceErrorIfNoFileFound ? False : True, "658f5f55-d0ba-4556-9db9-697b94add976", @ScriptLineNumber, "$activityName"  ) 
      	Else
      		ActionStepFeedbackEx( "Iterate over Files", "Found files", "658f5f55-d0ba-4556-9db9-697b94add976", "Info", _
      							"Found " & $Iterate_over_Files__filesCount & " file" & ($Iterate_over_Files__filesCount = 1 ? "" : "s") & " matching search criteria", _
      							@ScriptLineNumber )
      
      		For $Iterate_over_Files_iteration = 0 to $Iterate_over_Files__filesCount - 1
      			OnStartLoopIteration("658f5f55-d0ba-4556-9db9-697b94add976")
      
      			ActionStepFeedbackEx( "Iterate over Files", "Iterate over files", "658f5f55-d0ba-4556-9db9-697b94add976", "Info", "[Iteration " & $Iterate_over_Files_iteration + 1 & "] File '" & $Iterate_over_Files__p_FileList[$Iterate_over_Files_iteration] & "'", @ScriptLineNumber )
      
      			$Iterate_over_Files__StartedLoopIterations += 1
      			
      			Global $Iterate_over_Files = $Iterate_over_Files_iteration + 1			 ; support for old inline variable
      			Global $Iterate_over_Files_Iteration = $Iterate_over_Files ; support vor new variable system
      
      			Global $Iterate_over_Files_IterateFileName = __StcGetFileName($Iterate_over_Files__p_FileList[$Iterate_over_Files_iteration])
      			Global $Iterate_over_Files_IteratePath = __StcGetDir($Iterate_over_Files__p_FileList[$Iterate_over_Files_iteration])
      			Global $Iterate_over_Files_NumberOfElements = $Iterate_over_Files__filesCount
      			$Iterate_over_Files__OutboundVar_CountOfProcessedElements = $Iterate_over_Files__filesCount
      			
      						
      			If CheckBlockIteration() Then
      				OnActionStart("Open Excel template File", "e20d2c21-f53f-4c28-8f04-13a4230b9ca3", 3, "Run Program")
      				    
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Open Excel template File (Run Program EXCEL.EXE)"
          
          $OutboundVar_PID = Default 
          $OutboundVar_Executable = Default 
          $OutboundVar_WorkingDir = Default 
          $OutboundVar_WHwnd = Default 
            
          Global $AutoProp_WindowFlagState = "Maximized", $AutoProp_WindowFlagState_HasVarMapping = False 
          Global $AutoProp_FileName = "C:\Program Files\Microsoft Office\root\Office16\EXCEL.EXE", $AutoProp_FileName_HasVarMapping = False 
          Global $AutoProp_CommandLineParameters = _StcVarSysResolveVarReference( "Iterate_over_Files_IterateFileName"), $AutoProp_CommandLineParameters_HasVarMapping = True 
          Global $AutoProp_WorkingDirectory = _StcVarSysResolveVarReference( "Iterate_over_Files_IteratePath"), $AutoProp_WorkingDirectory_HasVarMapping = True 
          Global $AutoProp_RunIn3rdParty = False, $AutoProp_RunIn3rdParty_HasVarMapping = False   
          Global $AutoProp_WaitForWindowVisible = True, $AutoProp_WaitForWindowVisible_HasVarMapping = False   
          Global $AutoProp_WindowTitleToWaitFor = "ShipmentExcel.*", $AutoProp_WindowTitleToWaitFor_HasVarMapping = False 
          Global $AutoProp_UseRegEx = True, $AutoProp_UseRegEx_HasVarMapping = False   
          Global $AutoProp_UseCredentials = False, $AutoProp_UseCredentials_HasVarMapping = False   
          Global $AutoProp_InteractiveLogonWithProfile = False, $AutoProp_InteractiveLogonWithProfile_HasVarMapping = False   
          Global $AutoProp_InheritEnvironment = False, $AutoProp_InheritEnvironment_HasVarMapping = False   
          Global $AutoProp_CredentialUsername = "", $AutoProp_CredentialUsername_HasVarMapping = False 
          Global $AutoProp_CredentialPassword = "", $AutoProp_CredentialPassword_HasVarMapping = False 
          Global $AutoProp_CredentialDomain = "", $AutoProp_CredentialDomain_HasVarMapping = False 
          Global $AutoProp_UseGeneralTimeout = False, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
          Global $AutoProp_Timeout = 5, $AutoProp_Timeout_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "e20d2c21-f53f-4c28-8f04-13a4230b9ca3", "Open_Excel_template_File_28Run_Program_EXCEL2EEXE29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Open_Excel_template_File_28Run_Program_EXCEL2EEXE29", "e20d2c21-f53f-4c28-8f04-13a4230b9ca3", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Open Excel template File (Run Program EXCEL.EXE)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Open Excel template File (Run Program EXCEL.EXE);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          If $AutoProp_RunIn3rdParty Then
            Local $filename = @ScriptDir & "\3rdParty\" & $AutoProp_FileName
          Else
            Local $filename = $AutoProp_FileName
          EndIf
          Switch $AutoProp_WindowFlagState
              case "Normal"
                  Local $WindowState = @SW_SHOWNORMAL
              case "Maximized"
                  Local $WindowState = @SW_MAXIMIZE
              case "Minimized"
                  Local $WindowState = @SW_MINIMIZE
              case Else 
                  Local $WindowState = @SW_SHOWNORMAL
          EndSwitch
                                                                                         
          If $AutoProp_UseGeneralTimeout Then 
             $win_wait_timeout = StcGetGeneralTimeout()
          Else
             $win_wait_timeout = $AutoProp_Timeout 
          EndIf
          
          Local $__windowTitle = $AutoProp_WindowTitleToWaitFor
          If $AutoProp_UseRegEx Then $__windowTitle = _ExpandToTitleRegEx($__windowTitle)
          Local $commandLineParameters = TranslateText($AutoProp_CommandLineParameters) 
          Local $__PID=0, $__WinHandle=0, $__WorkingDir=""
          Local $ret = StcAsRun($filename & " " & $commandLineParameters, $AutoProp_WorkingDirectory, $WindowState, _
                                "e20d2c21-f53f-4c28-8f04-13a4230b9ca3", @ScriptLineNumber,"Open Excel template File (Run Program EXCEL.EXE)", _
          					  $AutoProp_WaitForWindowVisible, $__windowTitle, $win_wait_timeout, _
          					  $AutoProp_UseCredentials, $AutoProp_CredentialUsername, $AutoProp_CredentialPassword, $AutoProp_CredentialDomain, $AutoProp_InheritEnvironment, $AutoProp_InteractiveLogonWithProfile, _
          					  $__WinHandle, $__WorkingDir)
          $AsResultValue = $ret
          If ($ret = 0)  OR  ($AutoProp_WaitForWindowVisible AND  $__WinHandle = 0 ) Then  
             $Run = -1
             $AsResultInfo  = "The process could not be started."
          Else
             $Run = 1
             $AsResultInfo  = "The process was started with PID: "
          EndIf    
          $Run = CheckErrorHandling(1, $Run, "e20d2c21-f53f-4c28-8f04-13a4230b9ca3", @ScriptLineNumber, "Open Excel template File (Run Program EXCEL.EXE)"  ) 
          $OutboundVar_PID = "PID:" & $AsResultValue
          $OutboundVar_Executable = $AutoProp_FileName
          $OutboundVar_WorkingDir = $__WorkingDir
          $OutboundVar_WHwnd = $__WinHandle
          ;"file://#var#=@ScriptDir;\3rdParty\test.txt"
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Open Excel template File (Run Program EXCEL.EXE);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Open_Excel_template_File_Process_ID = $OutboundVar_PID  ; declare variable source. Will be referenced by other action steps 
           Global $Open_Excel_template_File_Executable = $OutboundVar_Executable  ; declare variable source. Will be referenced by other action steps 
           Global $Open_Excel_template_File_Working_Dir = $OutboundVar_WorkingDir  ; declare variable source. Will be referenced by other action steps 
           Global $Open_Excel_template_File_Process_Window_Handle = $OutboundVar_WHwnd  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
      				OnActionEnd("Open Excel template File", $run, "e20d2c21-f53f-4c28-8f04-13a4230b9ca3", 3, "Run Program")
      			EndIf
      							
      			If $run < 0 Then
      			$DoNotExecute = True
      			writelog("[Exit 'Iterate over Files'-Loop: Iterate over Files with error.] Reason is an error at Run Program: Open Excel template File",3)
      			OnEndLoopIteration("658f5f55-d0ba-4556-9db9-697b94add976")
      			ExitLoop
      			EndIf
      						
      			If CheckBlockIteration() Then
      				OnActionStart("Enable Editing", "cb6802d8-a749-419a-802d-d4dc3d4ce659", 3, "Keystrokes")
      				    
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Enable Editing (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "ShipmentExcel.*", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 500, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[5] 
                  Global $AutoProp_WindowTitle[5] 
                  Global $AutoProp_WindowText[5] 
                                                                                           $AutoProp_Content[0] = "{ALTDOWN}"                         
                  $AutoProp_WindowTitle[0] = "ShipmentExcel_Template  -  Protected View - Excel"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "f"                         
                  $AutoProp_WindowTitle[1] = "ShipmentExcel_Template  -  Protected View - Excel"                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{ALTUP}"                         
                  $AutoProp_WindowTitle[2] = "ShipmentExcel_Template - Excel"                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "i"                         
                  $AutoProp_WindowTitle[3] = "ShipmentExcel_Template  -  Protected View - Excel"                         
                  $AutoProp_WindowText[3] = ""                         
                    $AutoProp_Content[4] = "e"                         
                  $AutoProp_WindowTitle[4] = "ShipmentExcel_Template  -  Protected View - Excel"                         
                  $AutoProp_WindowText[4] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = True, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "cb6802d8-a749-419a-802d-d4dc3d4ce659", "Enable_Editing_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Enable_Editing_28Keystrokes29", "cb6802d8-a749-419a-802d-d4dc3d4ce659", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Enable Editing (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Enable Editing (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Enable Editing (Keystrokes)", "KeyStroke", "cb6802d8-a749-419a-802d-d4dc3d4ce659", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "cb6802d8-a749-419a-802d-d4dc3d4ce659", @ScriptLineNumber, "Enable Editing (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Enable Editing (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
      				OnActionEnd("Enable Editing", $run, "cb6802d8-a749-419a-802d-d4dc3d4ce659", 3, "Keystrokes")
      			EndIf
      							
      			If $run < 0 Then
      			$DoNotExecute = True
      			writelog("[Exit 'Iterate over Files'-Loop: Iterate over Files with error.] Reason is an error at Keystrokes: Enable Editing",3)
      			OnEndLoopIteration("658f5f55-d0ba-4556-9db9-697b94add976")
      			ExitLoop
      			EndIf
      						
      			If CheckBlockIteration() Then
      				OnActionStart("Sleep1", "62e1b29c-2c2b-4ad3-9c8b-06554f181e45", 3, "Sleep")
      				    
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Sleep1 (Sleep 2000ms)"
          
            
          Global $AutoProp_SleepInterval = 2000, $AutoProp_SleepInterval_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "62e1b29c-2c2b-4ad3-9c8b-06554f181e45", "Sleep1_28Sleep_2000ms29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Sleep1_28Sleep_2000ms29", "62e1b29c-2c2b-4ad3-9c8b-06554f181e45", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Sleep1 (Sleep 2000ms)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Sleep1 (Sleep 2000ms);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          Sleep ($AutoProp_SleepInterval) 
          _NgCoreLogAnnotationText( "62e1b29c-2c2b-4ad3-9c8b-06554f181e45", "Sleep was executed with a timeout of: " & $AutoProp_SleepInterval & "ms")
          $AsResultValue = $AutoProp_SleepInterval
          $AsResultInfo = "SleepTime in ms:"
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Sleep1 (Sleep 2000ms);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
      				OnActionEnd("Sleep1", $run, "62e1b29c-2c2b-4ad3-9c8b-06554f181e45", 3, "Sleep")
      			EndIf
      							
      			If $run < 0 Then
      			$DoNotExecute = True
      			writelog("[Exit 'Iterate over Files'-Loop: Iterate over Files with error.] Reason is an error at Sleep: Sleep1",3)
      			OnEndLoopIteration("658f5f55-d0ba-4556-9db9-697b94add976")
      			ExitLoop
      			EndIf
      						
      			If CheckBlockIteration() Then
      				OnActionStart("App Session", "b046fbee-0fac-4055-bd2f-af3bd6d4c4a2", 3, "App Session")
      				    
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "App Session"
          
            
          Global $AutoProp_Success = False, $AutoProp_Success_HasVarMapping = False   
          Global $AutoProp_KeepOutMouse = False, $AutoProp_KeepOutMouse_HasVarMapping = False   
          Global $AutoProp_RepeatMouseKeepOut = False, $AutoProp_RepeatMouseKeepOut_HasVarMapping = False   
          Global $AutoProp_MouseParkingPositionValue = 1, $AutoProp_MouseParkingPositionValue_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "b046fbee-0fac-4055-bd2f-af3bd6d4c4a2", "App_Session", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "App_Session", "b046fbee-0fac-4055-bd2f-af3bd6d4c4a2", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("App Session")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: App Session;
          ;-----------------------------------------------------------------------
          
          Local $App_Session_out_Success
          
          Local $__Success = __StcNgCreateGASession( _
                                      $App_Session_out_Success, _
                                      "b046fbee-0fac-4055-bd2f-af3bd6d4c4a2",  @ScriptLineNumber, "App Session")
          
          If $AutoProp_KeepOutMouse Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
          
          If $__Success Then
          	;-------------------------------------------------------------------------------------------
          	; 	
          		If CheckBlockIteration() Then
                      OnActionStart("Mouse Actions", "989b9ed3-af49-493c-a238-ac203516dbe3", 4, "Mouse Actions")
          			If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                           
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Mouse Actions"
               
                 
               Global $AutoProp_RelativeToCoordinate = "0;0", $AutoProp_RelativeToCoordinate_HasVarMapping = False   
               Global $AutoProp_MouseSpeed = 4, $AutoProp_MouseSpeed_HasVarMapping = False   
               Global $AutoProp_MouseClickDownDelay = 200, $AutoProp_MouseClickDownDelay_HasVarMapping = False   
               Global $AutoProp_MouseClickUpDelay = 10, $AutoProp_MouseClickUpDelay_HasVarMapping = False   
               
                    Global $AutoProp_ModifierAndMouseStatus[1] 
                       Global $AutoProp_ClicksCount[1] 
                       Global $AutoProp_MouseActionDelay[1] 
                       Global $AutoProp_IsMouseActionDelayEnabled[1] 
                       Global $AutoProp_ClickPoint_X[1] 
                       Global $AutoProp_ClickPoint_Y[1] 
                       Global $AutoProp_ClickMouseButtonText[1] 
                       Global $AutoProp_MouseModifierText[1] 
                                    $AutoProp_ModifierAndMouseStatus[0] = False                   
                           $AutoProp_ClicksCount[0] = 1                       
                           $AutoProp_MouseActionDelay[0] = 500                       
                               $AutoProp_IsMouseActionDelayEnabled[0] = False                   
                           $AutoProp_ClickPoint_X[0] = 100                       
                           $AutoProp_ClickPoint_Y[0] = 100                       
                       $AutoProp_ClickMouseButtonText[0] = "WheelUp"                         
                       $AutoProp_MouseModifierText[0] = "None"                         
                 
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "989b9ed3-af49-493c-a238-ac203516dbe3", "Mouse_Actions", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Mouse_Actions", "989b9ed3-af49-493c-a238-ac203516dbe3", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Mouse Actions")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Mouse Actions;
               ;-----------------------------------------------------------------------
               $ErrorHandling = 1
               Local $zeroPointPositionX = StcCoordinates_X($AutoProp_RelativeToCoordinate) 
               Local $zeroPointPositionY = StcCoordinates_Y($AutoProp_RelativeToCoordinate) 
               If $AutoProp_MouseClickDownDelay <> 10  Then  AutoItSetOption( "MouseClickDownDelay", $AutoProp_MouseClickDownDelay )
               If $AutoProp_MouseClickUpDelay <> 10  Then  AutoItSetOption( "MouseClickDelay", $AutoProp_MouseClickUpDelay )
               
               for $idx = 0 to  UBound( $AutoProp_ClicksCount ) - 1 
                   Local $XMouse1 = $zeroPointPositionX + $AutoProp_ClickPoint_X[$idx]
                   Local $YMouse1 = $zeroPointPositionY + $AutoProp_ClickPoint_Y[$idx]
               	 Local $mouseActionDelay = 0
               	If $AutoProp_IsMouseActionDelayEnabled[$idx] Then $mouseActionDelay = $Autoprop_MouseActionDelay[$idx]
               
                  If $AutoProp_MouseModifierText[$idx] <> "None" Then 
                     StcHoldMouseModifierKey($AutoProp_MouseModifierText[$idx])
                     StcAsMouseControl($g_TransAction, $XMouse1, $YMouse1, $AutoProp_ClickMouseButtonText[$idx], $AutoProp_ClicksCount[$idx], $AutoProp_MouseSpeed, $mouseActionDelay, "989b9ed3-af49-493c-a238-ac203516dbe3", @ScriptLineNumber, "Mouse Actions")
                     StcReleaseMouseModifierKey($AutoProp_MouseModifierText[$idx])
                  else
                     StcAsMouseControl($g_TransAction, $XMouse1, $YMouse1, $AutoProp_ClickMouseButtonText[$idx], $AutoProp_ClicksCount[$idx], $AutoProp_MouseSpeed, $mouseActionDelay, "989b9ed3-af49-493c-a238-ac203516dbe3", @ScriptLineNumber, "Mouse Actions")
                  EndIf
               Next
               
               If $AutoProp_MouseClickDownDelay <> 10 Then AutoItSetOption( "MouseClickDownDelay", 10)
               If $AutoProp_MouseClickUpDelay <> 10 Then AutoItSetOption( "MouseClickDelay", 10)
               
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Mouse Actions;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                      OnActionEnd("Mouse Actions", $run, "989b9ed3-af49-493c-a238-ac203516dbe3", 4, "Mouse Actions")
          		EndIf
          			
          		If CheckBlockIteration() Then
                      OnActionStart("Click App Element", "110b2255-32f4-4be5-a029-2b7a3684ffec", 4, "Click App Element")
          			If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                           
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Click App Element"
               
                 
               Global $AutoProp_MouseActionTypeAsInt = 1, $AutoProp_MouseActionTypeAsInt_HasVarMapping = False   
               Global $AutoProp_OperationModeAsInt = 0, $AutoProp_OperationModeAsInt_HasVarMapping = False   
               Global $AutoProp_ModifierAsInt = 0, $AutoProp_ModifierAsInt_HasVarMapping = False   
               Global $AutoProp_TriggerCount = 1, $AutoProp_TriggerCount_HasVarMapping = False   
               Global $AutoProp_InitialDelay = 0, $AutoProp_InitialDelay_HasVarMapping = False   
               Global $AutoProp_ElementXPath = "/Pane[2]/ToolBar/Pane/Pane/Pane/Pane/Button[6]", $AutoProp_ElementXPath_HasVarMapping = False 
               Global $AutoProp_WindowTitle = "ShipmentExcel.*", $AutoProp_WindowTitle_HasVarMapping = False 
               Global $AutoProp_UseRegexToIdentifyTargetWindow = True, $AutoProp_UseRegexToIdentifyTargetWindow_HasVarMapping = False   
               Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
               Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "110b2255-32f4-4be5-a029-2b7a3684ffec", "Click_App_Element", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Click_App_Element", "110b2255-32f4-4be5-a029-2b7a3684ffec", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Click App Element")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Click App Element;
               ;-----------------------------------------------------------------------
               
               Local $Click_App_Element_out_Success
               Local $__TranslatedWindowTitle = TranslateText($AutoProp_WindowTitle )
               Local $__TranslatedElementXPath = TranslateText($AutoProp_ElementXPath )
               
               Local $__Success = __StcNgGAClick( _
                                           $__TranslatedWindowTitle, _
                                           $AutoProp_UseRegexToIdentifyTargetWindow, _
                                           $__TranslatedElementXPath, _
                                           $AutoProp_MouseActionTypeAsInt, _
                                           $AutoProp_OperationModeAsInt, _
                                           $AutoProp_ModifierAsInt, _
                                           $AutoProp_TriggerCount, _
                                           $AutoProp_InitialDelay, _
                                           $AutoProp_Timeout, _
                                           $Click_App_Element_out_Success, _
                                           "110b2255-32f4-4be5-a029-2b7a3684ffec",  @ScriptLineNumber, "Click App Element")  
               $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "110b2255-32f4-4be5-a029-2b7a3684ffec", @ScriptLineNumber, "Click App Element"  ) 
               
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Click App Element;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                      OnActionEnd("Click App Element", $run, "110b2255-32f4-4be5-a029-2b7a3684ffec", 4, "Click App Element")
          		EndIf
          			
          		If CheckBlockIteration() Then
                      OnActionStart("Click App Element1", "d79a5e13-587a-4b7d-aa5d-b5167e284a66", 4, "Click App Element")
          			If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                           
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Click App Element1"
               
                 
               Global $AutoProp_MouseActionTypeAsInt = 1, $AutoProp_MouseActionTypeAsInt_HasVarMapping = False   
               Global $AutoProp_OperationModeAsInt = 1, $AutoProp_OperationModeAsInt_HasVarMapping = False   
               Global $AutoProp_ModifierAsInt = 0, $AutoProp_ModifierAsInt_HasVarMapping = False   
               Global $AutoProp_TriggerCount = 1, $AutoProp_TriggerCount_HasVarMapping = False   
               Global $AutoProp_InitialDelay = 0, $AutoProp_InitialDelay_HasVarMapping = False   
               Global $AutoProp_ElementXPath = "/Pane/Pane/Pane[1]/List/ListItem[7]", $AutoProp_ElementXPath_HasVarMapping = False 
               Global $AutoProp_WindowTitle = "ShipmentExcel.*", $AutoProp_WindowTitle_HasVarMapping = False 
               Global $AutoProp_UseRegexToIdentifyTargetWindow = True, $AutoProp_UseRegexToIdentifyTargetWindow_HasVarMapping = False   
               Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
               Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "d79a5e13-587a-4b7d-aa5d-b5167e284a66", "Click_App_Element1", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Click_App_Element1", "d79a5e13-587a-4b7d-aa5d-b5167e284a66", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Click App Element1")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Click App Element1;
               ;-----------------------------------------------------------------------
               
               Local $Click_App_Element1_out_Success
               Local $__TranslatedWindowTitle = TranslateText($AutoProp_WindowTitle )
               Local $__TranslatedElementXPath = TranslateText($AutoProp_ElementXPath )
               
               Local $__Success = __StcNgGAClick( _
                                           $__TranslatedWindowTitle, _
                                           $AutoProp_UseRegexToIdentifyTargetWindow, _
                                           $__TranslatedElementXPath, _
                                           $AutoProp_MouseActionTypeAsInt, _
                                           $AutoProp_OperationModeAsInt, _
                                           $AutoProp_ModifierAsInt, _
                                           $AutoProp_TriggerCount, _
                                           $AutoProp_InitialDelay, _
                                           $AutoProp_Timeout, _
                                           $Click_App_Element1_out_Success, _
                                           "d79a5e13-587a-4b7d-aa5d-b5167e284a66",  @ScriptLineNumber, "Click App Element1")  
               $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "d79a5e13-587a-4b7d-aa5d-b5167e284a66", @ScriptLineNumber, "Click App Element1"  ) 
               
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Click App Element1;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                      OnActionEnd("Click App Element1", $run, "d79a5e13-587a-4b7d-aa5d-b5167e284a66", 4, "Click App Element")
          		EndIf
          			
          		If CheckBlockIteration() Then
                      OnActionStart("Click App Element2", "406e5b24-bcc6-4e8b-873a-1179638027e3", 4, "Click App Element")
          			If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                           
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Click App Element2"
               
                 
               Global $AutoProp_MouseActionTypeAsInt = 1, $AutoProp_MouseActionTypeAsInt_HasVarMapping = False   
               Global $AutoProp_OperationModeAsInt = 1, $AutoProp_OperationModeAsInt_HasVarMapping = False   
               Global $AutoProp_ModifierAsInt = 0, $AutoProp_ModifierAsInt_HasVarMapping = False   
               Global $AutoProp_TriggerCount = 1, $AutoProp_TriggerCount_HasVarMapping = False   
               Global $AutoProp_InitialDelay = 0, $AutoProp_InitialDelay_HasVarMapping = False   
               Global $AutoProp_ElementXPath = "/Pane/Pane/Pane[2]/Group/Group[2]/ComboBox", $AutoProp_ElementXPath_HasVarMapping = False 
               Global $AutoProp_WindowTitle = "ShipmentExcel.*", $AutoProp_WindowTitle_HasVarMapping = False 
               Global $AutoProp_UseRegexToIdentifyTargetWindow = True, $AutoProp_UseRegexToIdentifyTargetWindow_HasVarMapping = False   
               Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
               Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "406e5b24-bcc6-4e8b-873a-1179638027e3", "Click_App_Element2", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Click_App_Element2", "406e5b24-bcc6-4e8b-873a-1179638027e3", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Click App Element2")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Click App Element2;
               ;-----------------------------------------------------------------------
               
               Local $Click_App_Element2_out_Success
               Local $__TranslatedWindowTitle = TranslateText($AutoProp_WindowTitle )
               Local $__TranslatedElementXPath = TranslateText($AutoProp_ElementXPath )
               
               Local $__Success = __StcNgGAClick( _
                                           $__TranslatedWindowTitle, _
                                           $AutoProp_UseRegexToIdentifyTargetWindow, _
                                           $__TranslatedElementXPath, _
                                           $AutoProp_MouseActionTypeAsInt, _
                                           $AutoProp_OperationModeAsInt, _
                                           $AutoProp_ModifierAsInt, _
                                           $AutoProp_TriggerCount, _
                                           $AutoProp_InitialDelay, _
                                           $AutoProp_Timeout, _
                                           $Click_App_Element2_out_Success, _
                                           "406e5b24-bcc6-4e8b-873a-1179638027e3",  @ScriptLineNumber, "Click App Element2")  
               $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "406e5b24-bcc6-4e8b-873a-1179638027e3", @ScriptLineNumber, "Click App Element2"  ) 
               
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Click App Element2;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                      OnActionEnd("Click App Element2", $run, "406e5b24-bcc6-4e8b-873a-1179638027e3", 4, "Click App Element")
          		EndIf
          			
          		If CheckBlockIteration() Then
                      OnActionStart("Keystrokes", "7463395f-82c5-494a-b4ae-d7481de6f6f0", 4, "Keystrokes")
          			If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                           
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Keystrokes"
               
                 
               Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
               Global $AutoProp_CommonWindowTitle = "", $AutoProp_CommonWindowTitle_HasVarMapping = False 
               Global $AutoProp_Pause = 500, $AutoProp_Pause_HasVarMapping = False   
               
                    Global $AutoProp_Content[1] 
                       Global $AutoProp_WindowTitle[1] 
                       Global $AutoProp_WindowText[1] 
                            $AutoProp_Content[0] = "p{ENTER}"                         
                       $AutoProp_WindowTitle[0] = ""                         
                       $AutoProp_WindowText[0] = ""                         
                 Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
               Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
               Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
               Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "7463395f-82c5-494a-b4ae-d7481de6f6f0", "Keystrokes", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Keystrokes", "7463395f-82c5-494a-b4ae-d7481de6f6f0", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Keystrokes")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of Transaction step: Keystrokes;
               ;-----------------------------------------------------------------------
               $ErrorHandling = 1
               
               For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
                   Local $windowText = ""
                   Local $windowTitle = $AutoProp_WindowTitle[$idx]
                   If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
                   If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
                   If @error = 1 Then ActionStepFeedbackEx( "Keystrokes", "KeyStroke", "7463395f-82c5-494a-b4ae-d7481de6f6f0", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
                   If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
                   StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "7463395f-82c5-494a-b4ae-d7481de6f6f0", @ScriptLineNumber, "Keystrokes" )
               Next
               ;-----------------------------------------------------------------------
               ;##### End of Transaction step: Keystrokes;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                      OnActionEnd("Keystrokes", $run, "7463395f-82c5-494a-b4ae-d7481de6f6f0", 4, "Keystrokes")
          		EndIf
          			
          		If CheckBlockIteration() Then
                      OnActionStart("Click App Element3", "39718564-a996-4053-8427-7e7f795a707e", 4, "Click App Element")
          			If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                           
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Click App Element3"
               
                 
               Global $AutoProp_MouseActionTypeAsInt = 1, $AutoProp_MouseActionTypeAsInt_HasVarMapping = False   
               Global $AutoProp_OperationModeAsInt = 0, $AutoProp_OperationModeAsInt_HasVarMapping = False   
               Global $AutoProp_ModifierAsInt = 0, $AutoProp_ModifierAsInt_HasVarMapping = False   
               Global $AutoProp_TriggerCount = 1, $AutoProp_TriggerCount_HasVarMapping = False   
               Global $AutoProp_InitialDelay = 0, $AutoProp_InitialDelay_HasVarMapping = False   
               Global $AutoProp_ElementXPath = "/Pane/Pane/Pane[2]/Group/Group[2]/Button[2]", $AutoProp_ElementXPath_HasVarMapping = False 
               Global $AutoProp_WindowTitle = "ShipmentExcel.*", $AutoProp_WindowTitle_HasVarMapping = False 
               Global $AutoProp_UseRegexToIdentifyTargetWindow = True, $AutoProp_UseRegexToIdentifyTargetWindow_HasVarMapping = False   
               Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
               Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "39718564-a996-4053-8427-7e7f795a707e", "Click_App_Element3", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Click_App_Element3", "39718564-a996-4053-8427-7e7f795a707e", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Click App Element3")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Click App Element3;
               ;-----------------------------------------------------------------------
               
               Local $Click_App_Element3_out_Success
               Local $__TranslatedWindowTitle = TranslateText($AutoProp_WindowTitle )
               Local $__TranslatedElementXPath = TranslateText($AutoProp_ElementXPath )
               
               Local $__Success = __StcNgGAClick( _
                                           $__TranslatedWindowTitle, _
                                           $AutoProp_UseRegexToIdentifyTargetWindow, _
                                           $__TranslatedElementXPath, _
                                           $AutoProp_MouseActionTypeAsInt, _
                                           $AutoProp_OperationModeAsInt, _
                                           $AutoProp_ModifierAsInt, _
                                           $AutoProp_TriggerCount, _
                                           $AutoProp_InitialDelay, _
                                           $AutoProp_Timeout, _
                                           $Click_App_Element3_out_Success, _
                                           "39718564-a996-4053-8427-7e7f795a707e",  @ScriptLineNumber, "Click App Element3")  
               $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "39718564-a996-4053-8427-7e7f795a707e", @ScriptLineNumber, "Click App Element3"  ) 
               
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Click App Element3;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                      OnActionEnd("Click App Element3", $run, "39718564-a996-4053-8427-7e7f795a707e", 4, "Click App Element")
          		EndIf
          			
          		If CheckBlockIteration() Then
                      OnActionStart("Sleep", "c90f4daa-2419-4aa4-b3f6-f111998a1816", 4, "Sleep")
          			If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                           
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Sleep (Sleep 3000ms)"
               
                 
               Global $AutoProp_SleepInterval = 3000, $AutoProp_SleepInterval_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "c90f4daa-2419-4aa4-b3f6-f111998a1816", "Sleep_28Sleep_3000ms29", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Sleep_28Sleep_3000ms29", "c90f4daa-2419-4aa4-b3f6-f111998a1816", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Sleep (Sleep 3000ms)")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Sleep (Sleep 3000ms);
               ;-----------------------------------------------------------------------
               $ErrorHandling = 1
               Sleep ($AutoProp_SleepInterval) 
               _NgCoreLogAnnotationText( "c90f4daa-2419-4aa4-b3f6-f111998a1816", "Sleep was executed with a timeout of: " & $AutoProp_SleepInterval & "ms")
               $AsResultValue = $AutoProp_SleepInterval
               $AsResultInfo = "SleepTime in ms:"
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Sleep (Sleep 3000ms);
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                      OnActionEnd("Sleep", $run, "c90f4daa-2419-4aa4-b3f6-f111998a1816", 4, "Sleep")
          		EndIf
          			
          		If CheckBlockIteration() Then
                      OnActionStart("Keystrokes2", "35169383-f4e3-432f-b9cb-f699a538f85b", 4, "Keystrokes")
          			If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                           
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Keystrokes2"
               
                 
               Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
               Global $AutoProp_CommonWindowTitle = "ShipmentExcel.*", $AutoProp_CommonWindowTitle_HasVarMapping = False 
               Global $AutoProp_Pause = 500, $AutoProp_Pause_HasVarMapping = False   
               
                    Global $AutoProp_Content[1] 
                       Global $AutoProp_WindowTitle[1] 
                       Global $AutoProp_WindowText[1] 
                            $AutoProp_Content[0] = "{ALTDOWN}{F4}{ALTUP}"                         
                       $AutoProp_WindowTitle[0] = "ShipmentExcel.*"                         
                       $AutoProp_WindowText[0] = ""                         
                 Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
               Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
               Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
               Global $AutoProp_UseRegEx = True, $AutoProp_UseRegEx_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "35169383-f4e3-432f-b9cb-f699a538f85b", "Keystrokes2", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Keystrokes2", "35169383-f4e3-432f-b9cb-f699a538f85b", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Keystrokes2")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of Transaction step: Keystrokes2;
               ;-----------------------------------------------------------------------
               $ErrorHandling = 1
               
               For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
                   Local $windowText = ""
                   Local $windowTitle = $AutoProp_WindowTitle[$idx]
                   If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
                   If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
                   If @error = 1 Then ActionStepFeedbackEx( "Keystrokes2", "KeyStroke", "35169383-f4e3-432f-b9cb-f699a538f85b", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
                   If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
                   StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "35169383-f4e3-432f-b9cb-f699a538f85b", @ScriptLineNumber, "Keystrokes2" )
               Next
               ;-----------------------------------------------------------------------
               ;##### End of Transaction step: Keystrokes2;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                      OnActionEnd("Keystrokes2", $run, "35169383-f4e3-432f-b9cb-f699a538f85b", 4, "Keystrokes")
          		EndIf
          			
          		If CheckBlockIteration() Then
                      OnActionStart("Check Process1", "1502c467-c4d7-45d3-805c-01c76feb2f1e", 4, "Check Process")
          			If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                           
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Check Process1 (Check Process chrome.exe)"
               
               $OutboundVar_CheckState = Default 
                 
               Global $AutoProp_ProcessName = "chrome.exe", $AutoProp_ProcessName_HasVarMapping = False 
               Global $AutoProp_ProgramToStart = "", $AutoProp_ProgramToStart_HasVarMapping = False 
               Global $AutoProp_CheckForAsString = "Exists", $AutoProp_CheckForAsString_HasVarMapping = False 
               Global $AutoProp_ActionAsString = "KillProcess", $AutoProp_ActionAsString_HasVarMapping = False 
               Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
               Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "1502c467-c4d7-45d3-805c-01c76feb2f1e", "Check_Process1_28Check_Process_chrome2Eexe29", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Check_Process1_28Check_Process_chrome2Eexe29", "1502c467-c4d7-45d3-805c-01c76feb2f1e", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Check Process1 (Check Process chrome.exe)")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Check Process1 (Check Process chrome.exe);
               ;-----------------------------------------------------------------------
               $ErrorHandling = 1
               If $AutoProp_UseGeneralTimeout Then
                  $win_wait_timeout = StcGetGeneralTimeout()
               Else
                  $win_wait_timeout = $AutoProp_Timeout
               EndIf
               Local $__ResultMessage
               Local $__StartAppPid = StcAsCheckProcess($AutoProp_ProcessName, $AutoProp_CheckForAsString, $AutoProp_ActionAsString, $AutoProp_ProgramToStart, "1502c467-c4d7-45d3-805c-01c76feb2f1e", @ScriptLineNumber, "Check Process1 (Check Process chrome.exe)", $__ResultMessage, $win_wait_timeout )
               ; $run and ResultValue/Info is set in function!
               $OutboundVar_PID = "PID:" & $__StartAppPid
               $OutboundVar_CheckState = $__ResultMessage
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Check Process1 (Check Process chrome.exe);
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                 Global $Check_Process1_Check_State = $OutboundVar_CheckState  ; declare variable source. Will be referenced by other action steps 
               
               ;---------<[ End of debug suffix section!  ]>------------------
          
                      OnActionEnd("Check Process1", $run, "1502c467-c4d7-45d3-805c-01c76feb2f1e", 4, "Check Process")
          		EndIf
          			
          		If CheckBlockIteration() Then
                      OnActionStart("Check Process", "1fb14a46-6bd9-42d2-91d6-de7a0e740137", 4, "Check Process")
          			If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                           
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Check Process (Check Process EXCEL.exe)"
               
               $OutboundVar_CheckState = Default 
                 
               Global $AutoProp_ProcessName = "EXCEL.exe", $AutoProp_ProcessName_HasVarMapping = False 
               Global $AutoProp_ProgramToStart = "", $AutoProp_ProgramToStart_HasVarMapping = False 
               Global $AutoProp_CheckForAsString = "Exists", $AutoProp_CheckForAsString_HasVarMapping = False 
               Global $AutoProp_ActionAsString = "KillProcess", $AutoProp_ActionAsString_HasVarMapping = False 
               Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
               Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "1fb14a46-6bd9-42d2-91d6-de7a0e740137", "Check_Process_28Check_Process_EXCEL2Eexe29", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Check_Process_28Check_Process_EXCEL2Eexe29", "1fb14a46-6bd9-42d2-91d6-de7a0e740137", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Check Process (Check Process EXCEL.exe)")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Check Process (Check Process EXCEL.exe);
               ;-----------------------------------------------------------------------
               $ErrorHandling = 1
               If $AutoProp_UseGeneralTimeout Then
                  $win_wait_timeout = StcGetGeneralTimeout()
               Else
                  $win_wait_timeout = $AutoProp_Timeout
               EndIf
               Local $__ResultMessage
               Local $__StartAppPid = StcAsCheckProcess($AutoProp_ProcessName, $AutoProp_CheckForAsString, $AutoProp_ActionAsString, $AutoProp_ProgramToStart, "1fb14a46-6bd9-42d2-91d6-de7a0e740137", @ScriptLineNumber, "Check Process (Check Process EXCEL.exe)", $__ResultMessage, $win_wait_timeout )
               ; $run and ResultValue/Info is set in function!
               $OutboundVar_PID = "PID:" & $__StartAppPid
               $OutboundVar_CheckState = $__ResultMessage
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Check Process (Check Process EXCEL.exe);
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                 Global $Check_Process_Check_State = $OutboundVar_CheckState  ; declare variable source. Will be referenced by other action steps 
               
               ;---------<[ End of debug suffix section!  ]>------------------
          
                      OnActionEnd("Check Process", $run, "1fb14a46-6bd9-42d2-91d6-de7a0e740137", 4, "Check Process")
          		EndIf
          				;~ ; Actionstep: 'Keystrokes1' is  disabled . No code generated!
          		
          	$App_Session_HasActionStepError = Not StcGetErrorState()
          EndIf
          
          $Run = CheckErrorHandling(1, $__Success And $App_Session_HasActionStepError ? 1 : -1 , "b046fbee-0fac-4055-bd2f-af3bd6d4c4a2", @ScriptLineNumber, "App Session"  )
          
          If Not ($__Success And $App_Session_HasActionStepError) Then
          	StcSetErrorState()
          EndIf
          
          $g_ControlBlockLevelName = $g_LastControlBlockLevelName
          
          ;TODO: decide what to do with output parameters from above. If AS has Outbound variables, set them here using following syntax:
          ;$OutboundVar_%PROPERTY NAME IN ACTIVITY CLASS% = $App_Session_out_Success
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: App Session;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
      				OnActionEnd("App Session", $run, "b046fbee-0fac-4055-bd2f-af3bd6d4c4a2", 3, "App Session")
      			EndIf
      							
      			If $run < 0 Then
      			$DoNotExecute = True
      			writelog("[Exit 'Iterate over Files'-Loop: Iterate over Files with error.] Reason is an error at App Session: App Session",3)
      			OnEndLoopIteration("658f5f55-d0ba-4556-9db9-697b94add976")
      			ExitLoop
      			EndIf
      			
      			ActionStepFeedbackEx( "Iterate over Files", "Iterate over files", "658f5f55-d0ba-4556-9db9-697b94add976", "Info", "'Iterate over Files'-Loop passed " & $Iterate_over_Files_iteration + 1 & " time(s) of " & $Iterate_over_Files__filesCount & ".", @ScriptLineNumber )   
      			OnEndLoopIteration("658f5f55-d0ba-4556-9db9-697b94add976")
      
      			If $Iterate_over_Files__BreakNextLoop Then exitloop
      			writelog("[Pass 'Iterate over Files'-Loop: Iterate over Files: " & $Iterate_over_Files_iteration + 1 & "]",3)
      		Next
      		
      		
      		If $Iterate_over_Files__BreakNextLoop Then  
      			If $Iterate_over_Files__BreakLoopWithError Then 
      				$run = -1
      				writelog("[Break 'Iterate over Files'-Loop with error: Iterate over Files] Reason is: BreakLoop was executed.")
      				ActionStepFeedbackEx( "Iterate over Files", "Iterate over files", "658f5f55-d0ba-4556-9db9-697b94add976", "Warning", "'Iterate over Files'-Loop was interrupted in iteration " & $Iterate_over_Files_iteration + 1 & " due a BreakLoop action item. Error state is explicitly set.", @ScriptLineNumber ) 
      			Else
      				writelog("[Break Loop: Iterate over Files] Reason is: BreakLoop was executed.")
      				ActionStepFeedbackEx( "Iterate over Files", "Iterate over files", "658f5f55-d0ba-4556-9db9-697b94add976", "Warning", "'Iterate over Files'-Loop was interrupted in iteration " & $Iterate_over_Files_iteration + 1 & " due a BreakLoop action item. Error state is untouched.", @ScriptLineNumber ) 
      			EndIf
      		EndIf       
      		
      		OnEndLoopExecuted( "658f5f55-d0ba-4556-9db9-697b94add976", $Iterate_over_Files_Iteration, $Iterate_over_Files__filesCount)
      	EndIf
      EndIf
      
      $Iterate_over_Files__BreakNextLoop = FALSE       ; reset for next level
      $Iterate_over_Files__BreakLoopWithError = FALSE  ; dito
      $g_ControlBlockLevelName = $g_LastControlBlockLevelName
      
      $OutboundVar_CountOfProcessedElements  = $Iterate_over_Files__OutboundVar_CountOfProcessedElements 
      $ErrorHandling = 1
      
      ;-----------------------------------------------------------------------
      ;### End of : Iterate over Files;
      ;-----------------------------------------------------------------------
      
      
      EndIf  
        Global $Iterate_over_Files_IterateFileName = $OutboundVar_IterateFileName  ; declare variable source. Will be referenced by other action steps 
       Global $Iterate_over_Files_IteratePath = $OutboundVar_IteratePath  ; declare variable source. Will be referenced by other action steps 
       Global $Iterate_over_Files_NumberOfElements = $OutboundVar_NumberOfElements  ; declare variable source. Will be referenced by other action steps 
       Global $Iterate_over_Files_Iteration = $OutboundVar_Iteration  ; declare variable source. Will be referenced by other action steps 
       Global $Iterate_over_Files_Count_Of_Processed_Elements = $OutboundVar_CountOfProcessedElements  ; declare variable source. Will be referenced by other action steps 
      
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Iterate over Files", $run, "658f5f55-d0ba-4556-9db9-697b94add976", 2, "Iterate over Files")
   EndIf
   
   $g_ControlBlockLevelName = $g_LastControlBlockLevelName
   OnTransactionEnd("Transaction", "8b1f8a0e-5be1-463d-94f0-b27eb7657040")
   ;---------------------------------------------------------------------------
   ;## End of Transaction: Transaction;
   ;---------------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
          OnMeasurementBlockEnd("Transaction", "8b1f8a0e-5be1-463d-94f0-b27eb7657040", 1, "Transaction")
       EndIf
  
       ;---------------------------------------------------------------------------
       ; Application exit, handling for return
       ;---------------------------------------------------------------------------
 
       If ($run < 0 OR OnCheckAbortState()) AND Not (_StcIsUserExitCausedBy_ExitOk()  or _StcIsStatusExitCode()) Then    ; negativ run or OnCheckAbortState() return true indicates a problem
          $Pass_Activity_Workflow = 0
 
          OnMeasurementTryFailed ("2a9c502f-3d48-4abe-a63f-450a279fcda0" )    ; notify Funclib subsystem 
          OnLastMeasurementExecuted("2a9c502f-3d48-4abe-a63f-450a279fcda0", False)
 
          ActionStepFeedbackEx( "Activity Workflow", "Workflow", "2a9c502f-3d48-4abe-a63f-450a279fcda0", "Error", StcMessages_AppExit_1( $MeasurementName) , @ScriptLineNumber ) 
          If OnCheckAbortState() Then
             writelog( StcMessages_AppExit_2($MeasurementName)  )
          Else
             writelog(  StcMessages_AppExit_3($MeasurementName) )
          EndIf
 
          If $enter >= $g_StcMaxConfiguredExecutionTries OR OnCheckAbortState() Then ; no hope, the end of retries was reached...
             $UsedErrorCycles = $enter                         ; pass current used error cycles to XML output variable
             ExitLoop 1
          Else  ;$enter < $g_StcMaxConfiguredExecutionTries     ; ok, one more again...
             writelog("<-------------------------------------------------------------------------------------------------------------------------------------->")
             writelog("[Enter Measurement Retry] Try: " & $enter+1 & " of " & $g_StcMaxConfiguredExecutionTries)
             StcErrorBox("Application measurement", StcMessages_AppExit_4($MeasurementName,  $retrydelay) , $retrydelay)
             ActionStepFeedbackEx( "Activity Workflow", "Workflow", "2a9c502f-3d48-4abe-a63f-450a279fcda0", "Warning", "Workflow now restarted due to prior error. This is measurement cycle: " & $enter+1 & " of " & $g_StcMaxConfiguredExecutionTries , @ScriptLineNumber ) 
             OnMeasurementLoopFailedAfterWaitDlg(STC_GetWorkflowProtocolTemplate())    ; notify subsystem after the message box was displayed! Otherwise the dialog time influence the measurement time.
             $enter += 1           ; next try
          EndIf
 
          Clearkeys ()                     ; take care about key states!
 
       Else
          OnLastMeasurementExecuted("2a9c502f-3d48-4abe-a63f-450a279fcda0", TRUE)
          ; some debug, if user has it selected
          writelog( StcMessages_AppExit_5($MeasurementName,  $retrydelay, $enter)  )
          ActionStepFeedbackEx( "Activity Workflow", "Workflow", "2a9c502f-3d48-4abe-a63f-450a279fcda0", "Info", StcMessages_AppExit_6( $MeasurementName, $enter, $g_StcMaxConfiguredExecutionTries ) , @ScriptLineNumber ) 
 
          $g_TransAction = "SUM_" & $MeasurementName ; Sum of Responsetimes in Process
          $UsedErrorCycles = $enter-1         ; pass current used error cycles to XML output variable
 
          $Pass_Activity_Workflow = $Pass_Activity_Workflow + 1 ; number of runs without errors
          writelog(  StcMessages_AppExit_7($MeasurementName, $enter, $Pass_Activity_Workflow) )
          ExitLoop 1
       EndIf
    Until $enter > $g_StcMaxConfiguredExecutionTries
 
   
 
 

   
 
 
 ;-----------------------------------------------------------------------
 ;# Start of finalization block: Workflow Finalization;
 ;-----------------------------------------------------------------------
 ; StcAssert(false, "$Run=" & $Run )
 ; StcAssert(false, "$AbortCurrentWorkflow=" & $AbortCurrentWorkflow )
 ; StcAssert(false, "$g_UserExecutionAbortCode=" & $g_UserExecutionAbortCode ) ; May contain 800 for Trigger case
 ; StcAssert(false, "$BreakNextLoop=" & $BreakNextLoop )
 ; StcAssert(false, "CheckBlockIteration()=" & CheckBlockIteration() )
 
 ; Save last workflow run state:
 Local $SavedWorkflowRunState = $Run
 Local $SavedWorkflowAbortState = $AbortCurrentWorkflow
 Local $SavedWorkflowBreakNextLoop = $BreakNextLoop
 Local $OnSuccessRunResult = 0 ; 0-> not processed 1->processed with okay  2->processed but failed
 Local $OnErrorRunResult = 0   ; 0-> not processed 1->processed with okay  2->processed but failed
 Local $OnErrorBlockHasNoActionSteps=False
 
 StcResetErrorState()
 $AbortCurrentWorkflow = False
 $BreakNextLoop = False
 
 $LogfileIdent = 1
 $g_ControlBlockLevelName = "Workflow Finalization"
 
 
 
 OnEnterManagedBlock()
 
 ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "37a0653a-7c1f-4b01-84e1-ab403942468e", "Info",  "Finalize Block reached. Finalize Block may change the overall workflow result!", @ScriptLineNumber  )
 
    ;-------------------------------------------------------------------
    ; 'Workflow run succeeded' section
    ;-------------------------------------------------------------------
    Local $__ProcessedAtLeastOneActionStep = false
    If $SavedWorkflowRunState = 1 AND $g_UserExecutionAbortCode = 1 Then     ; On Success Block
     writelog("[WorkflowRunSucceeded.Enter]",1);
     $OnSuccessRunResult = 1
     While 1     ; Try-Block-Loop
             
       ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
             
       If $__ProcessedAtLeastOneActionStep Then ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "16e69b5e-8deb-4544-83bd-ea478eae2aab", "InfoPlus",  "Finalize Block: OnSuccess handling was successfully processed.", @ScriptLineNumber  )
       writelog("[WorkflowRunSucceeded.End] Leave 'Workflow run succeeded' with no error!",1);
       OnExitDoActionManagedBlock("16e69b5e-8deb-4544-83bd-ea478eae2aab")
       ExitLoop 1
     WEnd  
     If $run <> 1 Then $OnSuccessRunResult = 2
    EndIf     ; Try-Block-Loop End
 
                Local $__LastAction = $g_LastAction
    Local $__TransAction = $g_TransAction
 
 
       If $g_UserExecutionAbortCode <> 1 Then
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "37a0653a-7c1f-4b01-84e1-ab403942468e", "Warning",  "Finalize Block does only enter Common error handling because workflow was closed by a user exit code (e.g. Trigger or UserExit action step).", @ScriptLineNumber  )
    EndIf
   
    ;-------------------------------------------------------------------
    ; 'Workflow Run Failed' section
    ;-------------------------------------------------------------------
    $__ProcessedAtLeastOneActionStep = false
    If $SavedWorkflowRunState <> 1 Then ;  Local OnError. Loop over only if abort state is NOT reached!
                 
     writelog("[WorkflowRunFailed.Enter]",1);
 
     $Run = 1
     $OnErrorRunResult = 1
     While 1 ;  Local Catch-Loop, loop over only if abort state is NOT reached!
                                  ;  This is only if the DoAction has executed an "Exit Workflow" AS!
                   
       ; 'Workflow Run Failed' does not contain any active elements, so set error state
       $Run = -1
 
 
       If $__ProcessedAtLeastOneActionStep Then 
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "da3f74d6-ea05-46f8-afa9-48d91408b629", "InfoPlus",  "Finalize Block: ""Workflow run failed"" handling was successfully processed.", @ScriptLineNumber  )
           $OnErrorBlockHasNoActionSteps = False
       Else
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "da3f74d6-ea05-46f8-afa9-48d91408b629", "InfoPlus",  "Finalize Block: ""Workflow run failed"" handling was successfully processed but contained no further actions steps.", @ScriptLineNumber  )          
           $OnErrorBlockHasNoActionSteps = True
       EndIF
       writelog("[WorkflowRunFailed.End] Leave ""Workflow run failed"" with no further errors.",1);
       OnExitDoErrorManagedBlock("da3f74d6-ea05-46f8-afa9-48d91408b629")
       ExitLoop 1
     WEnd
     If $run <> 1 Then $OnErrorRunResult = 2
  EndIf  ; OnSuccess-Block-Loop End
 
 
 
 ;-------------------------------------------------------------------
 ; Finally section
 ;-------------------------------------------------------------------
 Local $RunValueAtLevel_1 = $Run  ; DoAlways is error state neutral, so store value for current level
 $Run = 1
 $__ProcessedAtLeastOneActionStep = false
 
 writelog("[DoAlways.Enter] Following actions executed with no error handling by default!",1);
 While 1    ; Always-Block-Loop
     
    ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
    writelog("[DoAlways.End]",1)
 
   If $__ProcessedAtLeastOneActionStep Then ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "52c1ffda-f3af-4df2-add6-fb79a400f3b3", "InfoPlus",  "Common finalize handling was successfully processed. Note: Possible failed actions steps do not change the workflow run result.", @ScriptLineNumber )
   ExitLoop 1
 WEnd ; Always-Block-Loop
 
 $g_TransAction = $__TransAction
 $g_LastAction = $__LastAction
 
 _StcWaCloseRegisteredSessions("37a0653a-7c1f-4b01-84e1-ab403942468e","Workflow Finalization") 
 
 
 $Run = $RunValueAtLevel_1  ; DoAlways is error state neutral, so get back value for this level
     
 OnExitDoAlwaysManagedBlock("52c1ffda-f3af-4df2-add6-fb79a400f3b3")  
 
 OnLeaveManagedBlock()
 
 ; if was set or is now set, the overall state belongs to pesemistic..
 ;$AbortCurrentWorkflow = $SavedWorkflowAbortState OR $AbortCurrentWorkflow
 ;$OneOrMoreMeasurementFailed = true
 ;$LastMeasurementRunSucceeded  = false
 
 
 ActionStepFeedbackEx( $WorkflowName, "Workflow", "37a0653a-7c1f-4b01-84e1-ab403942468e", "Info", "Overall consumed time for this run: " & Round(TimerStop($MeasurementOverallTimeTimer )/1000,1) & "sec." , @ScriptLineNumber ) 
 
 OnMeasurementEnd ($g_TransAction,"37a0653a-7c1f-4b01-84e1-ab403942468e")    ; notify subsystem
 
 
 If $OnSuccessRunResult > 0 Then
    If $OnSuccessRunResult = 2 Then  ; OnSuccess runs into failed state! 
       ; now it depends what the user selected in Finalizer Wizard
       Switch (0)
          Case 0 ; User want to keep okay state 
             Actionstepfeedbackex( "Finalize block", "Finalize block", "16e69b5e-8deb-4544-83bd-ea478eae2aab", "Warning",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             Actionstepfeedbackex( "Finalize block", "Finalize block", "37a0653a-7c1f-4b01-84e1-ab403942468e", "Warning",  "The activity succeeded but failed in finalizer handling. Termination mode is: Ingore failure and proceed with Success.", @scriptlinenumber  )               
             _StcSetSuccess_Workflow()  ; for TA and APM we still use Success Code
          Case 1 ; User want to proceed with process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             Actionstepfeedbackex( "Finalize block", "Finalize block", "16e69b5e-8deb-4544-83bd-ea478eae2aab", "Error",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "37a0653a-7c1f-4b01-84e1-ab403942468e", "Error",  "Finalize handling failed. Termination mode is: Proceed Process.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_RPA_ONSUCCESS_FAILED_BUT_PROCCED) ; for TA and APM we still use measurement failed value
          Case 2 ; User want to terminate process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             Actionstepfeedbackex( "Finalize block", "Finalize block", "16e69b5e-8deb-4544-83bd-ea478eae2aab", "Error",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "37a0653a-7c1f-4b01-84e1-ab403942468e", "Error",  "Finalize handling failed. Termination mode is: Terminate.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_Measurement_Failed) ; for TA and APM we still use measurement failed value
       EndSwitch
    Else
       _StcSetSuccess_Workflow()  ; for TA and APM we still use Success Code
    EndIf
 EndIf
 
 
 If $OnErrorRunResult > 0 Then 
    ; it doesn't matter if block failed again or not. Failed is still failed!
    ; now it depends what the user selected in Finalizer Wizard
  
    if $OnErrorRunResult = 2 AND Not $OnErrorBlockHasNoActionSteps Then ; in this case one of the actions in OnError has failed!
       ActionstepFeedbackEx( "Finalize block", "Finalize block", "da3f74d6-ea05-46f8-afa9-48d91408b629", "Error",  "One of the activities has failed.", @scriptlinenumber  )               
    EndIF
 
    Switch (1)
       Case 0 ; User want to proceed process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "37a0653a-7c1f-4b01-84e1-ab403942468e", "Error",  "Activity failed. Termination mode is: Proceed Process.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_RPA_FAILED_BUT_PROCCED_PROCESS) ; for TA and APM we still use measurement failed value
       Case 1 ; User want to terminate process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "37a0653a-7c1f-4b01-84e1-ab403942468e", "Error",  "Activity failed. Termination mode is: Terminate.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_Measurement_Failed) ; for TA and APM we still use measurement failed value
    EndSwitch
 EndIf
 
 
 
 
 ;-----------------------------------------------------------------------
 ;# End of finalization block: Workflow Finalization;
 ;-----------------------------------------------------------------------
 


__StcRpaFlushOutParams( "70d39501-dd9d-4d99-be87-33ae5254676b", @ScriptLineNumber, "Save Template as PDF ()"  )
Local $__AcitivtyParameter_Path = StcGetLogFileFolder() & "\OutputActivityParameters.json"
Local $__AcitivtyParameter_Success = __StcSaveOutParameters($__AcitivtyParameter_Path, "70d39501-dd9d-4d99-be87-33ae5254676b", @ScriptLineNumber, "Save Template as PDF ()"    ) 


  OnWorkflowEnd(  "70d39501-dd9d-4d99-be87-33ae5254676b" )
  return $_MeasurementScriptRunFinished
EndFunc

 
 ;-----------------------------------------------------------------------
 ; Static Section for STC-Protector START
 ;-----------------------------------------------------------------------
 Func __ProtectorGetWindowTitle( $Title, $ActName, $ActId, $Line)
     Local $windowTitle = _ExpandToTitleRegEx($Title)
     If @error = 1 AND NOT $g_StcProtectorAlreadyShowsError Then 
        ActionStepFeedbackEx( $ActName, "KeyStroke", $ActId, "Error", "The window title '" & $windowTitle & "' is not a valid regular expression!", $Line )
        $g_StcProtectorAlreadyShowsError = TRUE
     EndIf
     return $windowTitle
 EndFunc
 
 Func __DecAndCheckFailCounter( $ProtID, $Title, $ActName, $ActId, $Line) 
     $g__StcProtFailCounter[$ProtID] = $g__StcProtFailCounter[$ProtID] - 1
     If $g__StcProtFailCounter[$ProtID] = 0 Then
        ActionStepFeedbackEx( $ActName, "KeyStroke", $ActId, "Warning", "Proctector for window title '" & $Title & "' disabled because of consecutive '" & $g__StcProtFailLimit & "' failures.", $Line )     
        StcProtectorDisable()
     EndIf
 EndFunc           
 
 
 ; STC-Protector, function for closing of error windows, not wanted popups like update information, check runs every 250 miliseconds
 Func STC_Protector()
     __CheckAutoItMainThread()
     If $g__StcProtSkipNextRun OR NOT $g__StcProtEnabled Then
         $g__StcProtSkipNextRun = FALSE
         return
     EndIf
         
     If NOT IsDeclared("g_StcProtectorAlreadyShowsError") Then Global $g_StcProtectorAlreadyShowsError = FALSE
     ; check and force of reboot, waits till a running measurement is finished
     If $reboot = 1 AND @hour = $reboothour AND @min = $rebootMin Then $rebootforce = 1
 
  
 
 EndFunc
 
 ;-----------------------------------------------------------------------
 ; Static Section for STC-Protector END
 ;-----------------------------------------------------------------------
 


; Run protocol template xml:
Func STC_GetWorkflowProtocolTemplate()
 return "<?xml version=""1.0"" encoding=""utf-8""?>" & @CRLF & _
"<WorkflowRunProtocol xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Id=""70d39501-dd9d-4d99-be87-33ae5254676b"" Name=""Save Template as PDF"" Type=""ActivityWorkflow"" WorkflowRevision=""0"" WorkflowProjectID=""70d39501-dd9d-4d99-be87-33ae5254676b"" ModelRevision=""9"" WorkflowEditorVersion=""6.0.15086.1"" WorkflowRun=""0"" Author=""msps"" CreationDate=""2022-11-01T18:07:39.294086+08:00"">" & @CRLF & _
"  <Items>" & @CRLF & _
"    <Item Id=""aa3c3501-33e8-4b63-9573-468ee657100e"" Name=""Workflow Initialization"" Type=""InitializeSectionActivity"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""8fd309a5-0f0e-485f-8e20-f1c9d4a1a718"" Name=""Activity Parameters"" Type=""ActivityParametersActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""d66e80df-aba5-4a43-944c-a166eef967df"" Name=""Pattern Gallery"" Type=""SearchPatternGalleryActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""ade93b86-a021-4cb5-803f-bf6ffdc4470c"" Name=""Settings"" Type=""WorkflowSettingsActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"    <Item Id=""2a9c502f-3d48-4abe-a63f-450a279fcda0"" Name=""Activity Workflow"" Type=""ActivityWorkflowMeasurement"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""8b1f8a0e-5be1-463d-94f0-b27eb7657040"" Name=""Transaction"" Type=""Transaction"">" & @CRLF & _
"          <Items>" & @CRLF & _
"            <Item xsi:type=""Loop"" Id=""658f5f55-d0ba-4556-9db9-697b94add976"" Name=""Iterate over Files"" Type=""IterateOverFilesActivity"">" & @CRLF & _
"              <Items>" & @CRLF & _
"                <Item Id=""e20d2c21-f53f-4c28-8f04-13a4230b9ca3"" Name=""Run Program: Open Excel template File"" Type=""RunActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""cb6802d8-a749-419a-802d-d4dc3d4ce659"" Name=""Keystrokes: Enable Editing"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""62e1b29c-2c2b-4ad3-9c8b-06554f181e45"" Name=""Sleep: Sleep1"" Type=""SleepActivity"" Description="""">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""b046fbee-0fac-4055-bd2f-af3bd6d4c4a2"" Name=""App Session"" Type=""GASessionActivity"">" & @CRLF & _
"                  <Items>" & @CRLF & _
"                    <Item Id=""989b9ed3-af49-493c-a238-ac203516dbe3"" Name=""Mouse Actions"" Type=""MouseClicksActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""110b2255-32f4-4be5-a029-2b7a3684ffec"" Name=""Click App Element"" Type=""GAClickActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""d79a5e13-587a-4b7d-aa5d-b5167e284a66"" Name=""Click App Element: Click App Element1"" Type=""GAClickActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""406e5b24-bcc6-4e8b-873a-1179638027e3"" Name=""Click App Element: Click App Element2"" Type=""GAClickActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""7463395f-82c5-494a-b4ae-d7481de6f6f0"" Name=""Keystrokes"" Type=""KeystrokeActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""39718564-a996-4053-8427-7e7f795a707e"" Name=""Click App Element: Click App Element3"" Type=""GAClickActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""c90f4daa-2419-4aa4-b3f6-f111998a1816"" Name=""Sleep"" Type=""SleepActivity"" Description="""">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""35169383-f4e3-432f-b9cb-f699a538f85b"" Name=""Keystrokes: Keystrokes2"" Type=""KeystrokeActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""1502c467-c4d7-45d3-805c-01c76feb2f1e"" Name=""Check Process: Check Process1"" Type=""CheckProcessActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""1fb14a46-6bd9-42d2-91d6-de7a0e740137"" Name=""Check Process"" Type=""CheckProcessActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                  </Items>" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"              </Items>" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"          </Items>" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"    <Item Id=""37a0653a-7c1f-4b01-84e1-ab403942468e"" Name=""Workflow Finalization"" Type=""WorkflowFinalizationActivity"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""16e69b5e-8deb-4544-83bd-ea478eae2aab"" Name=""Workflow run succeeded"" Type=""OnSuccessSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""da3f74d6-ea05-46f8-afa9-48d91408b629"" Name=""Workflow run failed"" Type=""OnErrorSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""52c1ffda-f3af-4df2-add6-fb79a400f3b3"" Name=""Common finalization handling"" Type=""DoAlwaysSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"  </Items>" & @CRLF & _
"  <RunResult State=""NotExecuted"" />" & @CRLF & _
"</WorkflowRunProtocol>"  
EndFunc

