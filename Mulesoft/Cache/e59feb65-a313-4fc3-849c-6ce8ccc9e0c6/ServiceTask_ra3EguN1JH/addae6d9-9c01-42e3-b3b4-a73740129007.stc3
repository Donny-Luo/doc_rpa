;-------------------------------------------------------------------------------
; Code was generated by MuleSoft RPA Builder 6.0.15086.1
; Type is: RPA
; Copyright © MuleSoft LLC 2022
; Template Revision: $Revision: 6.0.1.0 $
; RPA-Workflow Author: msps
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; include of standard functions
;-------------------------------------------------------------------------------
#include "StcFuncLib.stc3"

;-------------------------------------------------------------------------------
; Global value Setting 
;-------------------------------------------------------------------------------
Local $FutureUse = true  ; for now the scriptfeedback is always on!

; Don't change or remove following line! 
$g_UsedWorkflowEditorVersion = "6.0.15086.1"

;-------------------------------------------------------------------------------
; Set the workflow type for this workflow
;-------------------------------------------------------------------------------
_StcSetWfeWorkfowTypeId( 3 )

;-------------------------------------------------------------------------------
; Registering of runtime package cache paths (must be before Init is called!)
;-------------------------------------------------------------------------------

__StcRegisterRuntimePackageModul( "CommonRuntime_6_0_057BEB3330D7CDF6BEB5F9453118434D")  ; Source on WFE generated this script: $item.Value   

__StcRegisterRuntimePackageModul( "Web-Session_6_0_0E1C0D01D60DB01E9EF5AFA2BC0AC6B7")  ; Source on WFE generated this script: $item.Value   

__StcRegisterRuntimePackageModul( "Chrome-Driver_52D2B3366E1D9648F81DFDF08AA8107B")  ; Source on WFE generated this script: $item.Value   


;-------------------------------------------------------------------------------
; Registering of runtime package cache paths (must be before Init is called!)
;-------------------------------------------------------------------------------

;--------------------------------------------------------------------------------

Local $MaxStcLogfile = 1 ;1MB
InitStcFunclib($MaxStcLogfile, $FutureUse, 0)

StcSetScreenShotExtension(".bmp")                                     ; default store as BMP (productive)

writelog("Info - Script was built by X1DS Rev.  : " & $g_UsedWorkflowEditorVersion & " []" & " at 6:08:03 PM ; Tuesday, November 1, 2022 (local time)" )
writelog("Info - Script was built on machine    : johnzhong-pc, OS Typ/Version: " & "Windows 10 x64 v10.0.19044" )
writelog("--------------------------------------------------------------------------------------------------------------")


;-------------------------------------------------------------------------------
;STC-Guard Konfiguration
;-------------------------------------------------------------------------------
__SetStcGuardOperationMode( True )    ; enable or disable Guard by project settings.
__StcRegisterKillByStcGuard( "")
__StcRegisterKillOnExit("" )
__StcRegisterKeepAliveList( "" )


;-------------------------------------------------------------------------------
;   Measurement values
;-------------------------------------------------------------------------------
; counter to count the number of tries
$enter = 1


;-------------------------------------------------------------------------------
;   Global Master Data Settings
;-------------------------------------------------------------------------------
$WorkflowName = "Import data into Online Template" ;StcServerMasterDataVariable( "Workflowname", "STRING",  "Import data into Online Template"  )
; For now the Applname ist not configurable in case of RPA type Workflows! 
; So in all cases where the application name is part of an output we should write: n/a !
$ApplName = "<n/a>"


;-------------------------------------------------------------------------------
;  Image processing settings       
;-------------------------------------------------------------------------------
StcEnableAutoBitsPerPixelFallback()                     


;-------------------------------------------------------------------------------
;  External Library Includes       
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
; Check if project uses AIS Functions. If so we call a special init to 
; precompile needed code. Otherwise first pattern search take more time than othhers!
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
;   Start of scheduler and measurement
; 
;-------------------------------------------------------------------------------
schedule()  ; !!! Ths is the main entry!!!!
   
;-------------------------------------------------------------------------------
; Start of Workflow
;   Measurement Workflows
;-------------------------------------------------------------------------------
Func measurement ()

  Local $LoopErrorHandling = 0
  Local $DoNotExecute = False

  __StcAisGlobalConfigs( $g__StcUseLegacyStaticAnalyseImages)
  
  OnWorkflowStart( "addae6d9-9c01-42e3-b3b4-a73740129007",  STC_GetWorkflowProtocolTemplate() )

  ;---------------------------------------------------------------------------
  ;  Master Daten Section
  ;-------------------------------------------------------------------------------
  ActionStepFeedbackEx( "Import data into Online Template ()", "Activity", "addae6d9-9c01-42e3-b3b4-a73740129007", "Info", "Process name    : OSRA-22 case.", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Import data into Online Template ()", "Activity", "addae6d9-9c01-42e3-b3b4-a73740129007", "Info", "Activity name   : Import data into Online Template.", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Import data into Online Template ()", "Activity", "addae6d9-9c01-42e3-b3b4-a73740129007", "Info", "Workflow type is: " & StcGetWfeWorkflowType() & ".", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Import data into Online Template ()", "Activity", "addae6d9-9c01-42e3-b3b4-a73740129007", "Info", "Executed by user: '" & @UserName & "' at machine name: '" & @ComputerName & "'. OS-Version: " & @OSVersion & ".", @ScriptLineNumber ) 

  ;-------------------------------------------------------------------------------
  ;   Measurement Point INIT-Section 
  ;-------------------------------------------------------------------------------

  ; Simple Measurement Point Registration 
   
   ; Timer related Measurement Point Registration
   
   
 ;-----------------------------------------------------------------------
 ;# Start of Initialization Section: Workflow Initialization;
 ;-----------------------------------------------------------------------
 Local $__gStcInitSectionSuccess = True ; may set to false in one of the herein called init section AS
     
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Activity Parameters"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "f0d096e6-126a-41a6-a813-390c0ecfbf49", "Activity_Parameters", False, "EhNormal", @ScriptLineNumber)
   If True Then
   $LogfileIdent = 2 
   $TransStep = ("Activity Parameters")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of Activity Parameter Definitions: Activity Parameters;
   ;-----------------------------------------------------------------------
   Local $__AcitivtyParameter_Path = StcGetLogFileFolder() & "\InputActivityParameters.json"
   Local $__AcitivtyParameter_Success = __StcInitInParameters($__AcitivtyParameter_Path, "f0d096e6-126a-41a6-a813-390c0ecfbf49", @ScriptLineNumber, "Activity Parameters"    ) 
   Local $__AcitivtyParameter_Value ; the last retrieved value as it is used within the variable system. Intrinic is as it is, complex is Jason
   Local $__ActivityParameter_Display ; the value i an always readable format.
   
   If $__AcitivtyParameter_Success Then
   Local $__AcitivtyParameter_ReadSuccess = True;
      ; List of in variables 
      Local $__Success = __StcRpaGetActivityParameterValue("bDownldSuccessful", 2, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":2,""BoolValue"":false},""Name"":""bDownldSuccessful"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "f0d096e6-126a-41a6-a813-390c0ecfbf49", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_bDownldSuccessful = $__AcitivtyParameter_Value
      Local $__Success = __StcRpaGetActivityParameterValue("dfltWebSession", 12, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":12,""Id"":""00000000-0000-0000-0000-000000000000""},""Name"":""dfltWebSession"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "f0d096e6-126a-41a6-a813-390c0ecfbf49", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_dfltWebSession = $__AcitivtyParameter_Value
      Local $__Success = __StcRpaGetActivityParameterValue("invoicelyCreds", 8, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":""rpabottest123@gmail.com"",""Token"":"""",""Password"":"""",""CryptUser"":""rpabottest123@gmail.com"",""CryptPassword"":""""},""Name"":""invoicelyCreds"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "f0d096e6-126a-41a6-a813-390c0ecfbf49", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_invoicelyCreds = $__AcitivtyParameter_Value
      Local $__Success = __StcRpaGetActivityParameterValue("nRowCounter", 0, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":0,""IntValue"":0},""Name"":""nRowCounter"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "f0d096e6-126a-41a6-a813-390c0ecfbf49", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_nRowCounter = $__AcitivtyParameter_Value
      Local $__Success = __StcRpaGetActivityParameterValue("nColumnCounter", 1, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":1,""StringValue"":""9""},""Name"":""nColumnCounter"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "f0d096e6-126a-41a6-a813-390c0ecfbf49", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_nColumnCounter = $__AcitivtyParameter_Value
   If Not $__AcitivtyParameter_ReadSuccess then  $__gStcInitSectionSuccess = False  ; set global error at init flag!
   
   
   ; Register process out variables:
   __StcRpaRegisterOutParams( "Activity_Parameters_bDownldSuccessful", "bDownldSuccessful" )
   Global $Activity_Parameters_bDownldSuccessful_Changed = False
   __StcRpaRegisterOutParams( "Activity_Parameters_dfltWebSession", "dfltWebSession" )
   Global $Activity_Parameters_dfltWebSession_Changed = False
   __StcRpaRegisterOutParams( "Activity_Parameters_invoicelyCreds", "invoicelyCreds" )
   Global $Activity_Parameters_invoicelyCreds_Changed = False
   __StcRpaRegisterOutParams( "Activity_Parameters_nRowCounter", "nRowCounter" )
   Global $Activity_Parameters_nRowCounter_Changed = False
   __StcRpaRegisterOutParams( "Activity_Parameters_nColumnCounter", "nColumnCounter" )
   Global $Activity_Parameters_nColumnCounter_Changed = False
   Else
      $__gStcInitSectionSuccess=False  ; set global error at init flag!
   Endif
   
   $Run = CheckErrorHandling(1, $__AcitivtyParameter_Success ? 1 : -1 , "f0d096e6-126a-41a6-a813-390c0ecfbf49", @ScriptLineNumber, "Activity Parameters"  ) 
   
   
   ;-----------------------------------------------------------------------
   ;## End of Activity Parameter Definitions: Activity Parameters;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "f0d096e6-126a-41a6-a813-390c0ecfbf49", true )
        
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Pattern Gallery"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "9d0708f0-c9df-4804-b55a-f46c14cc7992", "Pattern_Gallery", True, "EhNormal", @ScriptLineNumber)
   If _StcVarSysValidateVarReference( "Pattern_Gallery", "9d0708f0-c9df-4804-b55a-f46c14cc7992", @ScriptLineNumber, "EhNormal" ) Then
   $LogfileIdent = 2 
   $TransStep = ("Pattern Gallery")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of transaction step: Pattern Gallery;
   ;-----------------------------------------------------------------------
   $ErrorHandling = 1
   
   	
   
   ;-----------------------------------------------------------------------
   ;## End of transaction step: Pattern Gallery;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "9d0708f0-c9df-4804-b55a-f46c14cc7992", true )
        
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Settings"
   
   $OutboundVar_BasePathOut = Default 
     
   Global $AutoProp_BasePath = "%temp%", $AutoProp_BasePath_HasVarMapping = False 
   Global $AutoProp_RemoveBasePathSubfolderOnExit = True, $AutoProp_RemoveBasePathSubfolderOnExit_HasVarMapping = False   
   Global $AutoProp_GenerateSubFolder = True, $AutoProp_GenerateSubFolder_HasVarMapping = False   
   Global $AutoProp_UseAllowedPathsLimitation = False, $AutoProp_UseAllowedPathsLimitation_HasVarMapping = False   
   Global $AutoProp_ProxySettingAsInt = 0, $AutoProp_ProxySettingAsInt_HasVarMapping = False   
   Global $AutoProp_IsUseProxyAuthChecked = False, $AutoProp_IsUseProxyAuthChecked_HasVarMapping = False   
   Global $AutoProp_ProxyUrl = "", $AutoProp_ProxyUrl_HasVarMapping = False 
   Global $AutoProp_ProxyAccount = "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":"""",""Token"":"""",""Password"":"""",""CryptUser"":"""",""CryptPassword"":""""},""Name"":""Name"",""Id"":""f353cef5-7af3-4597-9fd9-7e70870077ae"",""Access"":""RW"",""Tags"":null}", $AutoProp_ProxyAccount_HasVarMapping = False   
   Global $AutoProp_ProxyAccountAsString = "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":"""",""Token"":"""",""Password"":"""",""CryptUser"":"""",""CryptPassword"":""""},""Name"":""Name"",""Id"":""f353cef5-7af3-4597-9fd9-7e70870077ae"",""Access"":""RW"",""Tags"":null}", $AutoProp_ProxyAccountAsString_HasVarMapping = False 
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "5c8895d2-c5af-4ab8-8c70-bf47cea31d74", "Settings", True, "EhNormal", @ScriptLineNumber)
   If _StcVarSysValidateVarReference( "Settings", "5c8895d2-c5af-4ab8-8c70-bf47cea31d74", @ScriptLineNumber, "EhNormal" ) Then
   $LogfileIdent = 2 
   $TransStep = ("Settings")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of transaction step: Settings;
   ;-----------------------------------------------------------------------
   $__gStcRemoveBasePathSubfolderOnExit = $AutoProp_RemoveBasePathSubfolderOnExit
   $translatedBasePath = TranslateText($AutoProp_BasePath)
   
   ;Handle run-sub folder generation & removal
   if $AutoProp_GenerateSubFolder then 
   $OutboundVar_BasePathOut = $translatedBasePath & "\" & $StcRunGuid & "\"
   ActionStepFeedbackEx("Workflow Settings","Action","5c8895d2-c5af-4ab8-8c70-bf47cea31d74", "Info", "An additional subfolder: " & $StcRunGuid &" will be generated for the current workflow run.",0)
   _NgCoreLogAnnotationText( "5c8895d2-c5af-4ab8-8c70-bf47cea31d74", "An additional subfolder: " & $StcRunGuid &" was generated for the current workflow run.")
   If True then
   ActionStepFeedbackEx("Workflow Settings","Action","5c8895d2-c5af-4ab8-8c70-bf47cea31d74", "Info", "Removing Base Path subfolder on exit is enabled.",0)
   _NgCoreLogAnnotationText( "5c8895d2-c5af-4ab8-8c70-bf47cea31d74", "Removing Base Path subfolder on exit was enabled.")
   else
   ActionStepFeedbackEx("Workflow Settings","Action","5c8895d2-c5af-4ab8-8c70-bf47cea31d74", "Info", "Removing Base Path subfolder on exit is disabled.",0)
   EndIf
   
   else
   
   $OutboundVar_BasePathOut = $translatedBasePath & "\"
   
   EndIf
   
   
   
   ;Base Path registration
   If FileExists($translatedBasePath) Then
   
   	StcSetBasePathFolder($OutboundVar_BasePathOut)
   
   	Local $p_ResultText
   	Local $__Success = True ; local check for NgCore Call success
   	$__Success = __StcNgRegisterBasePath($OutboundVar_BasePathOut, $p_ResultText, "5c8895d2-c5af-4ab8-8c70-bf47cea31d74",  @ScriptLineNumber, "Settings")
   
   	Local $__BasePathFeedbackType = $__Success ? "Info" : "Error"
   	Local $__BasePathMessage = $__Success ? "StwsBasePath registration for the current run succeeded: '" & $OutboundVar_BasePathOut & "'" _
   			  : ("StwsBasePath registration for the current run failed. Error details: " & $p_ResultText)
   
   	ActionStepFeedbackEx("Workflow Settings","Action","5c8895d2-c5af-4ab8-8c70-bf47cea31d74", $__BasePathFeedbackType, $__BasePathMessage, 0)
   	_NgCoreLogAnnotationText( "5c8895d2-c5af-4ab8-8c70-bf47cea31d74", $__BasePathMessage)
   
   	;Allowed paths registration
   	
   	If $__Success Then
   					__DisableAllowedPathsLimitation("5c8895d2-c5af-4ab8-8c70-bf47cea31d74",  @ScriptLineNumber, "Settings")
   			writelog("Allowed Path Limitation for File Operations is disabled")
   			ActionStepFeedbackEx("Workflow Settings","Action","5c8895d2-c5af-4ab8-8c70-bf47cea31d74", "Info", "Allowed Path Limitation for File Operations is disabled.",0)
   		
   		$__Success = __StcNgRegisterProxySettings($AutoProp_ProxySettingAsInt, $AutoProp_ProxyUrl, $AutoProp_IsUseProxyAuthChecked, $AutoProp_ProxyAccount, "5c8895d2-c5af-4ab8-8c70-bf47cea31d74",  @ScriptLineNumber, "Settings")
   	EndIf
   
   	; if one of the allowed pahts calls failed, we go to error state, but only if error handling is enabled:
   	$__gStcInitSectionSuccess = CheckErrorHandling(1, $__Success ? 1 : -1 , "5c8895d2-c5af-4ab8-8c70-bf47cea31d74", @ScriptLineNumber, "Settings" ) < 0 ? False : True
   	$__gStcGenerateSubBasePathFolder = $AutoProp_GenerateSubFolder
   
   	$Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "5c8895d2-c5af-4ab8-8c70-bf47cea31d74", @ScriptLineNumber, "Settings"  ) 
   
   Else
   
   	ActionStepFeedbackEx("Workflow Settings","Action","5c8895d2-c5af-4ab8-8c70-bf47cea31d74", "Error", "Base path does not exist: '" & $translatedBasePath & "'", 0)
   	_NgCoreLogAnnotationText( "5c8895d2-c5af-4ab8-8c70-bf47cea31d74", "Base path does not exist: '" & $translatedBasePath & "'")
   	$__gStcInitSectionSuccess = False
   	$Run = -1;
   
   EndIf
   
   
   ;-----------------------------------------------------------------------
   ;## End of transaction step: Settings;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
     Global $Settings_BasePath = $OutboundVar_BasePathOut  ; declare variable source. Will be referenced by other action steps 
   
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "5c8895d2-c5af-4ab8-8c70-bf47cea31d74", true )
       
 OnEndOfInitSection( "918b7cee-3127-4b4d-bb03-80007e869aef", true )
 ; Now it's save to enable the protector, because it may use variables defined by SBVs!
 StcProtectorEnable()
 ;-----------------------------------------------------------------------
 ;# End of Initialization Section: Workflow Initialization;
 ;-----------------------------------------------------------------------
  

   
 ;----------------<-----------------------------------------------------------
 ;--------------<
 ;------------<   Measurement: <Activity Workflow>
 ;--------------< 
 ;----------------<-----------------------------------------------------------
    Global $MeasurementName = "Activity Workflow"
    Global $Pass_Activity_Workflow
    Global $UsedErrorCycles = 0
    Global $g_LastControlBlockLevelName = ""
    Global $g_ControlBlockLevelName = "MainMeasurement"
    Global $PrepareCodeSuccess = True
    Global $MeasurementOverallTimeTimer = TimerStart()
    
    ; Set Default current measurement iteration!
    $enter = 1
 
    ; set default uuid as default uuid for actioin feedback:
    ActionFeedbackSetDefaultUuid("7edac52b-c6ec-46ed-9ab0-be66996cb2f3")
    ; Inform user about the disabled STC-Guard. In case of Design Mode run, the Guard may also disabled!
    If $StcDisableGuard Then ActionStepFeedbackEx( "StcGuardMode", "Action", default, "Warning", "The STC Guard is disabled by project setting.!", @ScriptLineNumber )
 
    
    StcSetGeneralTimeout( 45, True ) ;called internally!
    $g_StcMaxConfiguredExecutionTries = 1   ; internal STC funclib used value
    Local $errorcycles = $g_StcMaxConfiguredExecutionTries              ;  old legacy name, may removed in the future!
    ActionStepFeedbackEx( "Activity Workflow", "Workflow", "7edac52b-c6ec-46ed-9ab0-be66996cb2f3", "Info", "///-[ Workflow: 'Activity Workflow' started ]-\\\", @ScriptLineNumber ) 
    If StcIsDesignModeActive()  Then
       If $g_StcMaxConfiguredExecutionTries <> 1 Then
         $g_StcMaxConfiguredExecutionTries = 1
         ActionStepFeedbackEx( "Activity Workflow", "Workflow", "7edac52b-c6ec-46ed-9ab0-be66996cb2f3", "Warning", "The workflow was started from WorkflowEditor in Design mode. Retries reduced to 1.", @ScriptLineNumber ) 
       EndIf
    EndIf
    Local $retrydelay = 60
 
    OnMeasurementStart( $MeasurementName, "7edac52b-c6ec-46ed-9ab0-be66996cb2f3" )
    
 
    
    ;<<<<<<<<<<<<<       P r e p a r e  -- S e c t i o n    >>>>>>>>>>>>>>>>>>>>
    ; Some action steps may have prepare code which must be executed before the measurement starts.
        
     ;----------------------------------------------------------
     ;   >>>> Prepare Code for ReadFile Activity <<<<
     ;----------------------------------------------------------
     Local $File_controlled_Loop_RecordCount = 0
     Local $File_controlled_Loop_ColumnCount = 0
     
     Local $File_controlled_Loop_ColumnNames, $File_controlled_Loop_ColumTypes, $File_controlled_Loop_FilterString, $File_controlled_Loop_FilterUseRegex
     Dim $File_controlled_Loop_ColumnNames[1]
     Dim $File_controlled_Loop_ColumTypes[1] 
     Dim $File_controlled_Loop_FilterString[1] 
     Dim $File_controlled_Loop_FilterUseRegex[1] 
     
     $File_controlled_Loop_ColumnNames[0] = "Shipment Id,Charge Type,POD,Container #,Available Time,Start Time,End Time ,No of Days,Unique Shipment Row"
     $File_controlled_Loop_ColumTypes[0]  = "STRING"
     $File_controlled_Loop_FilterString[0]= ""
     $File_controlled_Loop_FilterUseRegex[0]= "False"
     
     Local $AdditionalErrText = "" 
     Local $File_controlled_Loop_Filename = "C:\RPADemo\OSRA22\DefaultShipmentTracker.csv"
     Global $File_controlled_Loop_PrepareCodeSuccess = False
     
      
     $File_controlled_Loop_ColumnCount = 1
     $File_controlled_Loop_RecordCount = 13
     Dim $File_controlled_Loop_Lines[13][1]
        ;---------------------------
        $File_controlled_Loop_Lines[0][0] = "7873489,Detention,HJHGT,GA6778JK89,9/23/2022,9/23/2022,9/30/2022,1,98432"
        ;---------------------------
        $File_controlled_Loop_Lines[1][0] = "7873490,Detention,CJHGT,GA6778JK90,9/24/2022,9/24/2022,10/1/2022,2,98433"
        ;---------------------------
        $File_controlled_Loop_Lines[2][0] = "7873490,Detention,HWSD,GA6778JK91,9/25/2022,9/25/2022,10/2/2022,3,98434"
        ;---------------------------
        $File_controlled_Loop_Lines[3][0] = "7873492,Detention,HJHGT,GA6778JK92,9/26/2022,9/26/2022,10/3/2022,4,98435"
        ;---------------------------
        $File_controlled_Loop_Lines[4][0] = "7873492,Detention,BBHGT,GA6778JK93,9/27/2022,9/27/2022,10/4/2022,5,98436"
        ;---------------------------
        $File_controlled_Loop_Lines[5][0] = "7873492,Detention,HWSD,GA6778JK94,9/28/2022,9/28/2022,10/5/2022,6,98437"
        ;---------------------------
        $File_controlled_Loop_Lines[6][0] = "7873495,Detention,HWSD,,9/29/2022,9/29/2022,,7,98438"
        ;---------------------------
        $File_controlled_Loop_Lines[7][0] = "7873496,Detention,BBHGT,GA6778JK96,9/30/2022,9/30/2022,10/7/2022,8,98439"
        ;---------------------------
        $File_controlled_Loop_Lines[8][0] = "7873497,Detention,HJHGT,,,,,,98440"
        ;---------------------------
        $File_controlled_Loop_Lines[9][0] = "7873498,Detention,,,,10/2/2022,10/9/2022,10,98441"
        ;---------------------------
        $File_controlled_Loop_Lines[10][0] = "7873499,Detention,BBHGT,GA6778JK99,10/3/2022,10/3/2022,10/10/2022,11,98442"
        ;---------------------------
        $File_controlled_Loop_Lines[11][0] = "7873500,Detention,,,,,,,98443"
        ;---------------------------
        $File_controlled_Loop_Lines[12][0] = "7873501,Detention,HJHGT,GA6778JK101,10/5/2022,10/5/2022,10/12/2022,13,98444"
       
     If @error  Then
         ActionStepFeedbackEx( "File controlled Loop", "ReadFromFile", "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", "Error", StcAsReadTableGetErrorText($File_controlled_Loop_RecordCount, @extended, $AdditionalErrText ), @ScriptLineNumber )   
         $File_controlled_Loop_RecordCount = 0 ; in case of any error File_controlled_Loop_RecordCount is a negative value. so set it back to 0!
     Else
         $File_controlled_Loop_PrepareCodeSuccess = True
         Dim $File_controlled_Loop_ShuffleTab[$File_controlled_Loop_RecordCount]
     
         For $i=0 To $File_controlled_Loop_RecordCount-1
             $File_controlled_Loop_ShuffleTab[$i] = $i
         Next
     ;Record Count: 0
     EndIf
     ;----------------------------------------------------------
     
 
 
 
    Do
       Local  $x = 0
       $Run = 1  ; don't make that local or global !!!
 
       ; if prepare code failed, so do abort workflow before it was started!
       If Not $PrepareCodeSuccess Then $Run = -1
         
       ;---------------------------------------------------------------------------
       ; Applications values
       ;---------------------------------------------------------------------------
       
             
       _StcTraDaHandleErrors() ; check here if TraceData Bridge error has occurred! If so script will be terminated!
 
       
       ;---------------------------------------------------------------------------
       ; Check if one of the InitSection AS has failed. If so, write action step feadback a terminate workflow run!
       If Not $__gStcInitSectionSuccess  Then
         ActionStepFeedbackEx( "Activity Workflow", "Workflow", "7edac52b-c6ec-46ed-9ab0-be66996cb2f3", "Error", "One of the steps in the initialize section has failed, so further execution is not possible!", @ScriptLineNumber ) 
         $Run = -1 ; abort further execution!
       EndIf
 
       ;---------------------------------------------------------------------------
       ; Start of Workflow
       ;---------------------------------------------------------------------------
       $Errortext = ""
   
       If $run > 0 AND NOT OnCheckAbortState() Then
          OnMeasurementBlockStart("Transaction", "4f1c64aa-2c0f-4e06-bb98-05bc65e81ea9", 1, "Transaction")
            
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Transaction"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "4f1c64aa-2c0f-4e06-bb98-05bc65e81ea9", "Transaction", False, "$Dbg.Item.ActivityErrorHandling", @ScriptLineNumber)
   If True Then
   $LogfileIdent = 2 
   $TransStep = ("Transaction")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;---------------------------------------------------------------------------
   ;## Start of Transaction: Transaction;
   ;---------------------------------------------------------------------------
   
   OnTransactionStart("Transaction", "4f1c64aa-2c0f-4e06-bb98-05bc65e81ea9")
   $g_LastControlBlockLevelName = $g_ControlBlockLevelName
   $g_ControlBlockLevelName = "Transaction"
   
   $__gStcTransactionSqx += 1
   $g_TransAction = "Transaction" 
   $TransStep = "Transaction"
   
   If CheckBlockIteration() Then
      OnActionStart("Get Number of Rows & Columns in CSV", "b70f68e3-12e6-4840-b7a2-ff90127469aa", 2, "Group")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Get Number of Rows & Columns in CSV (Group)"
      
        
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "b70f68e3-12e6-4840-b7a2-ff90127469aa", "Get_Number_of_Rows_26_Columns_in_CSV_28Group29", False, "EhNormal", @ScriptLineNumber)
      If True Then
      $LogfileIdent = 3 
      $TransStep = ("Get Number of Rows & Columns in CSV (Group)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Get Number of Rows & Columns in CSV (Group);
      ;-----------------------------------------------------------------------
      $g_LastControlBlockLevelName = $g_ControlBlockLevelName
      $g_ControlBlockLevelName = "Get Number of Rows & Columns in CSV (Group)"
      
        ;       
                  If CheckBlockIteration() Then
                     OnActionStart("File controlled Loop", "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", 3, "File controlled Loop")
                         
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "File controlled Loop"
          
            
          Global $AutoProp_UseTypeTextOnly = False, $AutoProp_UseTypeTextOnly_HasVarMapping = False   
          Global $AutoProp_RandomFileRead = False, $AutoProp_RandomFileRead_HasVarMapping = False   
          Global $AutoProp_HasHeaderLine = True, $AutoProp_HasHeaderLine_HasVarMapping = False   
          Global $AutoProp_FileAndPath = "C:\RPADemo\OSRA22\DefaultShipmentTracker.csv", $AutoProp_FileAndPath_HasVarMapping = False 
          Global $AutoProp_IsIn3rdParty = False, $AutoProp_IsIn3rdParty_HasVarMapping = False   
          Global $AutoProp_LimitIterations = False, $AutoProp_LimitIterations_HasVarMapping = False   
          Global $AutoProp_IterationCount = 1, $AutoProp_IterationCount_HasVarMapping = False   
          Global $AutoProp_UseSeperateExecutionPath = False, $AutoProp_UseSeperateExecutionPath_HasVarMapping = False   
          Global $AutoProp_SeperateExecutionPath = "", $AutoProp_SeperateExecutionPath_HasVarMapping = False 
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", "File_controlled_Loop", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "File_controlled_Loop", "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("File controlled Loop")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: File controlled Loop;
          ;-----------------------------------------------------------------------
          Local $File_controlled_Loop__ErrorHandling = 1  ; 0 is None, 1 is Normal
          Local $File_controlled_Loop__StartedLoopIterations = 0
          
          if( $File_controlled_Loop_PrepareCodeSuccess ) Then
             Local $LoopErrorHandling = 2
          
             Local $File_controlled_Loop_Record = 0 
             Local $File_controlled_Loop_Col = 0
             Global $File_controlled_Loop_ColumnsActual
             Dim   $File_controlled_Loop_ColumnsActual[$File_controlled_Loop_ColumnCount]
          
             ; Now iterate over all records!
             For $File_controlled_Loop_Record=0  TO $File_controlled_Loop_RecordCount-1
                  writelog("[Read File. Loop Count is: " & $File_controlled_Loop_Record & "]")
                  $File_controlled_Loop__StartedLoopIterations += 1
                  OnStartLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                  
                   Local $CurrentLine = ""
                   ; Assign the columns for the current record:
                   For $File_controlled_Loop_Col = 0 To $File_controlled_Loop_ColumnCount-1
                       ; First check Type!
                       Local $StrVar = $File_controlled_Loop_Lines[$File_controlled_Loop_ShuffleTab[$File_controlled_Loop_Record]][$File_controlled_Loop_Col]
                       Local $var = StcConvertStrType( $StrVar, $File_controlled_Loop_ColumTypes[$File_controlled_Loop_Col] )
                       If @error Then
                          ActionStepFeedbackEx( "File controlled Loop", "ReadFromFile", "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", "Error", "Detect Column '" & $File_controlled_Loop_ColumnNames[$File_controlled_Loop_Col] & "' witch Datatype mismatch at record: " & $File_controlled_Loop_ShuffleTab[$File_controlled_Loop_Record]+1 & ". Found '" & $StrVar & "' which is not a " & $File_controlled_Loop_ColumTypes[$File_controlled_Loop_Col]  , @ScriptLineNumber )    
                          $File_controlled_Loop_ColumnsActual[$File_controlled_Loop_Col] = 0
                          $run = -1
                          ExitLoop 
                       Else
                          $File_controlled_Loop_ColumnsActual[$File_controlled_Loop_Col] = $Var
                       EndIf
                       $CurrentLine &= "'" & $File_controlled_Loop_ColumnNames[$File_controlled_Loop_Col] & "': " &  $var & ";  " 
                   Next
                   ActionStepFeedbackEx( "File controlled Loop", "ReadFromFile", "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", "Info", "Execute Block with following variables: " & $CurrentLine , @ScriptLineNumber )          
          
                   Global $File_controlled_Loop_Columns, $File_controlled_Loop_Columns_Header
                   Dim $File_controlled_Loop_Columns[$File_controlled_Loop_ColumnCount], $File_controlled_Loop_Columns_Header[$File_controlled_Loop_ColumnCount]
                        Global $File_controlled_Loop_Shipment_Id2CCharge_Type2CPOD2CContainer_232CAvailable_Time2CStart_Time2CEnd_Time_2CNo_of_Days2CUnique_Shipment_Row = $File_controlled_Loop_ColumnsActual[0]
                     $File_controlled_Loop_Columns[0] = $File_controlled_Loop_ColumnsActual[0]
          		   $File_controlled_Loop_Columns_Header[0] = $File_controlled_Loop_ColumnNames[0]
                      
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                     OnActionStart("String to Array", "8941abe6-1753-4093-a357-0c5a6cee455d", 4, "String to Array")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "String to Array"
               
               $OutboundVar_ResultAsArray = Default 
                 
               Global $AutoProp_InputString = _StcVarSysResolveVarReference( "File_controlled_Loop_Shipment_Id2CCharge_Type2CPOD2CContainer_232CAvailable_Time2CStart_Time2CEnd_Time_2CNo_of_Days2CUnique_Shipment_Row"), $AutoProp_InputString_HasVarMapping = True 
               Global $AutoProp_Separator = ",", $AutoProp_Separator_HasVarMapping = False 
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "8941abe6-1753-4093-a357-0c5a6cee455d", "String_to_Array", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "String_to_Array", "8941abe6-1753-4093-a357-0c5a6cee455d", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("String to Array")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: String to Array;
               ;-----------------------------------------------------------------------
               
               Global $String_to_Array_out_ResultAsArray
               
               Local $__Success = __StcNgSplitStringToArray(   $AutoProp_InputString, _
                                                               TranslateText($AutoProp_Separator), _
                                                               $String_to_Array_out_ResultAsArray, _
                                                               "8941abe6-1753-4093-a357-0c5a6cee455d",  @ScriptLineNumber, "String to Array")
               
               
               $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "8941abe6-1753-4093-a357-0c5a6cee455d", @ScriptLineNumber, "String to Array"  ) 
               
               $OutboundVar_ResultAsArray = $String_to_Array_out_ResultAsArray
               
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: String to Array;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                 Global $String_to_Array_ResultAsArray = $OutboundVar_ResultAsArray  ; declare variable source. Will be referenced by other action steps 
               
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("String to Array", $run, "8941abe6-1753-4093-a357-0c5a6cee455d", 4, "String to Array")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at String to Array: String to Array",4)
                            OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at String to Array: String to Array",4)
                            OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                     OnActionStart("Get Array Count", "f116dbc5-6b74-40cb-8ff2-6c78be16c0cc", 4, "Get Array Count")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Get Array Count (Get Array Count mapped to String to Array.ResultAsArray)"
               
               $OutboundVar_ArrayCount = Default 
                 
               Global $AutoProp_Variable = _StcVarSysResolveVarReference( "String_to_Array_ResultAsArray"), $AutoProp_Variable_HasVarMapping = True 
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "f116dbc5-6b74-40cb-8ff2-6c78be16c0cc", "Get_Array_Count_28Get_Array_Count_mapped_to_String_to_Array2EResultAsArray29", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Get_Array_Count_28Get_Array_Count_mapped_to_String_to_Array2EResultAsArray29", "f116dbc5-6b74-40cb-8ff2-6c78be16c0cc", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Get Array Count (Get Array Count mapped to String to Array.ResultAsArray)")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Get Array Count (Get Array Count mapped to String to Array.ResultAsArray);
               ;-----------------------------------------------------------------------
               
               Local $p_ArrayCount, $p_ReturnCode
               
               Local $__Success = __StcNgVsGetArrayCount( $AutoProp_Variable, _
                                                       $p_ArrayCount, _
                                                       $p_ReturnCode, _
                                                       "f116dbc5-6b74-40cb-8ff2-6c78be16c0cc",  @ScriptLineNumber, "Get Array Count (Get Array Count mapped to String to Array.ResultAsArray)")  
               
               $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "f116dbc5-6b74-40cb-8ff2-6c78be16c0cc", @ScriptLineNumber, "Get Array Count (Get Array Count mapped to String to Array.ResultAsArray)"  ) 
               
               
               $OutboundVar_ArrayCount = $p_ArrayCount
               
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Get Array Count (Get Array Count mapped to String to Array.ResultAsArray);
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                 Global $Get_Array_Count_Array_Count = $OutboundVar_ArrayCount  ; declare variable source. Will be referenced by other action steps 
               
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("Get Array Count", $run, "f116dbc5-6b74-40cb-8ff2-6c78be16c0cc", 4, "Get Array Count")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Get Array Count: Get Array Count",4)
                            OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Get Array Count: Get Array Count",4)
                            OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                     OnActionStart("Set Number of Columns", "aaf77705-8b76-4ad0-a3e5-761560525d54", 4, "Set Variable")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Set Number of Columns (Set Variable)"
               
                 
               Global $AutoProp_ModifiedVariable = _StcVarSysResolveVarReference( "Activity_Parameters_nColumnCounter"), $AutoProp_ModifiedVariable_HasVarMapping = True 
               Global $AutoProp_NewValue = _StcVarSysResolveVarReference( "Get_Array_Count_Array_Count"), $AutoProp_NewValue_HasVarMapping = True 
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "aaf77705-8b76-4ad0-a3e5-761560525d54", "Set_Number_of_Columns_28Set_Variable29", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Set_Number_of_Columns_28Set_Variable29", "aaf77705-8b76-4ad0-a3e5-761560525d54", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Set Number of Columns (Set Variable)")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Set Number of Columns (Set Variable);
               ;-----------------------------------------------------------------------
               ;
               ; Possible Properties: Name:'AutoProp_ModifiedVariable'   VarValue:'Activity_Parameters_nColumnCounter'  Type:'VARIABLE'  InternalTye:'System.String'
               ; Source Data Type: STRING
                If $AutoProp_ModifiedVariable_HasVarMapping Then 
               	 Local $__StcOldVarValue = StcStringTruncate( String($Activity_Parameters_nColumnCounter) )
               	 Local $__StcModifiedVariableName = "Activity_Parameters_nColumnCounter"
               	 	   $Activity_Parameters_nColumnCounter = String($AutoProp_NewValue) 	 	 	 	      
                    If IsDeclared( "Activity_Parameters_nColumnCounter" & "_Changed") Then Assign( "Activity_Parameters_nColumnCounter" & "_Changed", "True", 4)
               
               	 Local $__StcNewVarValue = StcStringTruncate( String($Activity_Parameters_nColumnCounter) )
                EndIf
                ; Possible Properties: Name:'AutoProp_NewValue'   VarValue:'Get_Array_Count_Array_Count'  Type:'VARIABLE'  InternalTye:'System.String'
               ; Source Data Type: STRING
               
               Local $__StcLocalMessageText = "Variable '" & $__StcModifiedVariableName & "' was set to '" & $__StcNewVarValue & "'. Old value was: '" & $__StcOldVarValue & "'."
               ActionStepFeedbackEx("Set Number of Columns (Set Variable)", "Set Variable", "aaf77705-8b76-4ad0-a3e5-761560525d54", "Info", $__StcLocalMessageText, @ScriptLineNumber) 
               _NgCoreLogAnnotationText("aaf77705-8b76-4ad0-a3e5-761560525d54", $__StcLocalMessageText )	
               $__StcLocalMessageText = ""
               StcResetErrorState() ; for now we have no error conditions!
               $Run = CheckErrorHandling(1, $run, "aaf77705-8b76-4ad0-a3e5-761560525d54", @ScriptLineNumber, "Set Number of Columns (Set Variable)"  ) 
               $AsResultValue= $__StcNewVarValue
               $AsResultInfo = "New Variable content:"  
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Set Number of Columns (Set Variable);
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("Set Number of Columns", $run, "aaf77705-8b76-4ad0-a3e5-761560525d54", 4, "Set Variable")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Set Variable: Set Number of Columns",4)
                            OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Set Variable: Set Number of Columns",4)
                            OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                     OnActionStart("Math Operations", "12725c12-8262-44ba-866f-37517b23aa00", 4, "Math Operations")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Math Operations ({a}={a}+1)"
               
               $OutboundVar_ResultAsInt = Default 
                 
               Global $AutoProp_Variable1 = _StcVarSysResolveVarReference( "Activity_Parameters_nRowCounter"), $AutoProp_Variable1_HasVarMapping = True 
               Global $AutoProp_Variable2 = 0, $AutoProp_Variable2_HasVarMapping = False   
               Global $AutoProp_Variable3 = 0, $AutoProp_Variable3_HasVarMapping = False   
               Global $AutoProp_Variable4 = 0, $AutoProp_Variable4_HasVarMapping = False   
               Global $AutoProp_Variable5 = 0, $AutoProp_Variable5_HasVarMapping = False   
               Global $AutoProp_Variable6 = 0, $AutoProp_Variable6_HasVarMapping = False   
               Global $AutoProp_Variable7 = 0, $AutoProp_Variable7_HasVarMapping = False   
               Global $AutoProp_Variable8 = 0, $AutoProp_Variable8_HasVarMapping = False   
               Global $AutoProp_Variable9 = 0, $AutoProp_Variable9_HasVarMapping = False   
               Global $AutoProp_Variable10 = 0, $AutoProp_Variable10_HasVarMapping = False   
               Global $AutoProp_MathExpressionInUserInputFormat = "{a}={a}+1", $AutoProp_MathExpressionInUserInputFormat_HasVarMapping = False 
               Global $AutoProp_OutboundVariableTypeAsInt = 1, $AutoProp_OutboundVariableTypeAsInt_HasVarMapping = False   
               Global $AutoProp_MathExpression = "va0=va0+1", $AutoProp_MathExpression_HasVarMapping = False 
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "12725c12-8262-44ba-866f-37517b23aa00", "Math_Operations_287Ba7D3D7Ba7D2B129", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Math_Operations_287Ba7D3D7Ba7D2B129", "12725c12-8262-44ba-866f-37517b23aa00", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Math Operations ({a}={a}+1)")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Math Operations ({a}={a}+1);
               ;-----------------------------------------------------------------------
               
               Global $Math_Operations_out_Success
               Global $Math_Operations_out_ResultAsFloat
               Global $Math_Operations_out_ResultAsInt
               Global $Math_Operations_out_ErrorCode
               
               Local $__Success = __StcNgPerformMathOperation( _
                                           $AutoProp_Variable1, _
                                           $AutoProp_Variable2, _
                                           $AutoProp_Variable3, _
                                           $AutoProp_Variable4, _
                                           $AutoProp_Variable5, _
                                           $AutoProp_Variable6, _
                                           $AutoProp_Variable7, _
                                           $AutoProp_Variable8, _
                                           $AutoProp_Variable9, _
                                           $AutoProp_Variable10, _
               							$AutoProp_MathExpression, _
               							$AutoProp_OutboundVariableTypeAsInt, _
                                           $Math_Operations_out_Success, _
                                           $Math_Operations_out_ResultAsFloat, _
                                           $Math_Operations_out_ResultAsInt, _
                                           $Math_Operations_out_ErrorCode, _
                                           "12725c12-8262-44ba-866f-37517b23aa00",  @ScriptLineNumber, "Math Operations ({a}={a}+1)")  
               $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "12725c12-8262-44ba-866f-37517b23aa00", @ScriptLineNumber, "Math Operations ({a}={a}+1)"  ) 
               
               $OutboundVar_ResultAsFloat = $Math_Operations_out_ResultAsFloat
               $OutboundVar_ResultAsInt = $Math_Operations_out_ResultAsInt
               
               $AsResultValue = $AutoProp_OutboundVariableTypeAsInt == 0 ? $OutboundVar_ResultAsFloat : $OutboundVar_ResultAsInt           ; the result of the calculation as float or int, depending on outbound variable type (0 stands for float, 1 stands for int)
               $AsResultInfo = "Expression Result"
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Math Operations ({a}={a}+1);
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                 Global $Math_Operations_ResultAsInt = $OutboundVar_ResultAsInt  ; declare variable source. Will be referenced by other action steps 
               
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("Math Operations", $run, "12725c12-8262-44ba-866f-37517b23aa00", 4, "Math Operations")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Math Operations: Math Operations",4)
                            OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Math Operations: Math Operations",4)
                            OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
                        
                   If CheckBlockIteration() Then
                     Global $File_controlled_Loop_ColumnSize  = $File_controlled_Loop_ColumnCount
                     OnActionStart("Set Variable", "13b7eed6-2a3b-49ec-aae7-e08698e7bea0", 4, "Set Variable")
                          
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Set Variable"
               
                 
               Global $AutoProp_ModifiedVariable = _StcVarSysResolveVarReference( "Activity_Parameters_nRowCounter"), $AutoProp_ModifiedVariable_HasVarMapping = True 
               Global $AutoProp_NewValue = _StcVarSysResolveVarReference( "Math_Operations_ResultAsInt"), $AutoProp_NewValue_HasVarMapping = True 
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "13b7eed6-2a3b-49ec-aae7-e08698e7bea0", "Set_Variable", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Set_Variable", "13b7eed6-2a3b-49ec-aae7-e08698e7bea0", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Set Variable")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: Set Variable;
               ;-----------------------------------------------------------------------
               ;
               ; Possible Properties: Name:'AutoProp_ModifiedVariable'   VarValue:'Activity_Parameters_nRowCounter'  Type:'VARIABLE'  InternalTye:'System.String'
               ; Source Data Type: INT
                If $AutoProp_ModifiedVariable_HasVarMapping Then 
               	 Local $__StcOldVarValue = StcStringTruncate( String($Activity_Parameters_nRowCounter) )
               	 Local $__StcModifiedVariableName = "Activity_Parameters_nRowCounter"
               	      $Activity_Parameters_nRowCounter = Int($AutoProp_NewValue) 	 	 	 	 	      
                    If IsDeclared( "Activity_Parameters_nRowCounter" & "_Changed") Then Assign( "Activity_Parameters_nRowCounter" & "_Changed", "True", 4)
               
               	 Local $__StcNewVarValue = StcStringTruncate( String($Activity_Parameters_nRowCounter) )
                EndIf
                ; Possible Properties: Name:'AutoProp_NewValue'   VarValue:'Math_Operations_ResultAsInt'  Type:'VARIABLE'  InternalTye:'System.String'
               ; Source Data Type: INT
               
               Local $__StcLocalMessageText = "Variable '" & $__StcModifiedVariableName & "' was set to '" & $__StcNewVarValue & "'. Old value was: '" & $__StcOldVarValue & "'."
               ActionStepFeedbackEx("Set Variable", "Set Variable", "13b7eed6-2a3b-49ec-aae7-e08698e7bea0", "Info", $__StcLocalMessageText, @ScriptLineNumber) 
               _NgCoreLogAnnotationText("13b7eed6-2a3b-49ec-aae7-e08698e7bea0", $__StcLocalMessageText )	
               $__StcLocalMessageText = ""
               StcResetErrorState() ; for now we have no error conditions!
               $Run = CheckErrorHandling(1, $run, "13b7eed6-2a3b-49ec-aae7-e08698e7bea0", @ScriptLineNumber, "Set Variable"  ) 
               $AsResultValue= $__StcNewVarValue
               $AsResultInfo = "New Variable content:"  
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Set Variable;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
                     OnActionEnd("Set Variable", $run, "13b7eed6-2a3b-49ec-aae7-e08698e7bea0", 4, "Set Variable")
                   EndIf
                     
                   If $run < 0 Then
                     Switch $LoopErrorHandling
                         Case 0    ; do nothing
                            Sleep(0)
                         Case 1  ; continue on head
                            $run = 1
                            ContinueLoop
                         Case 2  ; exit loop with error
                            $run = -1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with error.] Reason is an error at Set Variable: Set Variable",4)
                            OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                            ExitLoop
                         Case 3  ; exit loop w/o error
                            $run = 1
                            $DoNotExecute = True
                            writelog("[Exit Read from File Loop: $operatorName with ignored error state.] Reason is an error at Set Variable: Set Variable",4)
                            OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
                            ExitLoop
                     EndSwitch
                   EndIf
             
             
               ;ActionStepFeedbackEx( "File controlled Loop", "BreakLoop", "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", "Info", "Loop passed " & $File_controlled_Loop_Record+1 & " time(s) of " & $File_controlled_Loop_RecordCount & ".", @ScriptLineNumber )   
               OnEndLoopIteration("aa3d9927-f1bd-41ad-9e51-3a65c7e21173") 
               If $BreakNextLoop Then exitloop
               writelog("[Pass Loop: $operatorName: " & $File_controlled_Loop_Record & "]",4)
             Next
          Else   
             ActionStepFeedbackEx( "File controlled Loop", "ReadFromFile", "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", "Error", "Loop operation not executed, because loop init failed! Script Execution aborted.", @ScriptLineNumber )          
             StcSetErrorState()
          EndIf ; check for $File_controlled_Loop_PrepareCodeSuccess   
          
          OnEndLoopExecuted( "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", $File_controlled_Loop__StartedLoopIterations, $File_controlled_Loop_RecordCount )
          
          $run = CheckErrorHandling($File_controlled_Loop__ErrorHandling, $run, "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", @ScriptLineNumber, "File controlled Loop" ) 
          
          
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: File controlled Loop;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                     OnActionEnd("File controlled Loop", $run, "aa3d9927-f1bd-41ad-9e51-3a65c7e21173", 3, "File controlled Loop")
                  EndIf
                         
                  If CheckBlockIteration() Then
                     OnActionStart("Message Box", "536d15c6-1c01-476c-9d0c-7b25f7f67ae6", 3, "Message Box")
                         
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Message Box"
          
            
          Global $AutoProp_Title = "Number of Rows & Columns", $AutoProp_Title_HasVarMapping = False 
          Global $AutoProp_Text = "Number of Rows: {$Activity_Parameters_nRowCounter},Number of Columns:{$Activity_Parameters_nColumnCounter}", $AutoProp_Text_HasVarMapping = False 
          Global $AutoProp_Timeout = 3, $AutoProp_Timeout_HasVarMapping = False   
          Global $AutoProp_UseTimeout = True, $AutoProp_UseTimeout_HasVarMapping = False   
          Global $AutoProp_WinFlags = 4096, $AutoProp_WinFlags_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "536d15c6-1c01-476c-9d0c-7b25f7f67ae6", "Message_Box", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Message_Box", "536d15c6-1c01-476c-9d0c-7b25f7f67ae6", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Message Box")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
           
          ;-----------------------------------------------------------------------
          ;#### Start of XXXX MessageBox step: Message Box;
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          If $run > 0 Then
             If $AutoProp_UseTimeout Then
                StcAsMsgBox($AutoProp_WinFlags, $AutoProp_Title, $AutoProp_Text, $AutoProp_Timeout)
                ActionStepFeedbackEx( "Message Box", "MessageBox", "536d15c6-1c01-476c-9d0c-7b25f7f67ae6", "Info", "Messagebox '" & $AutoProp_Title & "' displayed. Closed automatically after " & $AutoProp_Timeout & "seconds. ", @ScriptLineNumber )
             Else
                StcAsMsgBox($AutoProp_WinFlags, $AutoProp_Title, $AutoProp_Text)
                ActionStepFeedbackEx( "Message Box", "MessageBox", "536d15c6-1c01-476c-9d0c-7b25f7f67ae6", "Warning", "Messagebox '" & $AutoProp_Title & "' displayed. No auto close activated! Must be closed manually by user action.", @ScriptLineNumber )
             Endif
             _NgCoreLogAnnotationText( "536d15c6-1c01-476c-9d0c-7b25f7f67ae6", "Text: " & $AutoProp_Text)
          EndIf
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Message Box;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                     OnActionEnd("Message Box", $run, "536d15c6-1c01-476c-9d0c-7b25f7f67ae6", 3, "Message Box")
                  EndIf
                      
      $g_ControlBlockLevelName = $g_LastControlBlockLevelName;
      
      ;-----------------------------------------------------------------------
      ;### End of transaction step: Get Number of Rows & Columns in CSV (Group);
      ;-----------------------------------------------------------------------
      
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Get Number of Rows & Columns in CSV", $run, "b70f68e3-12e6-4840-b7a2-ff90127469aa", 2, "Group")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("Run Program", "d3ca5c09-1aa6-485c-bca4-630fbe98ab82", 2, "Run Program")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Run Program (Run Program EXCEL.EXE)"
      
      $OutboundVar_PID = Default 
      $OutboundVar_Executable = Default 
      $OutboundVar_WorkingDir = Default 
      $OutboundVar_WHwnd = Default 
        
      Global $AutoProp_WindowFlagState = "Maximized", $AutoProp_WindowFlagState_HasVarMapping = False 
      Global $AutoProp_FileName = "C:\Program Files\Microsoft Office\root\Office16\EXCEL.EXE", $AutoProp_FileName_HasVarMapping = False 
      Global $AutoProp_CommandLineParameters = "DefaultShipmentTracker.csv", $AutoProp_CommandLineParameters_HasVarMapping = False 
      Global $AutoProp_WorkingDirectory = "C:\RPADemo\OSRA22\", $AutoProp_WorkingDirectory_HasVarMapping = False 
      Global $AutoProp_RunIn3rdParty = False, $AutoProp_RunIn3rdParty_HasVarMapping = False   
      Global $AutoProp_WaitForWindowVisible = True, $AutoProp_WaitForWindowVisible_HasVarMapping = False   
      Global $AutoProp_WindowTitleToWaitFor = "DefaultShipmentTracker.*", $AutoProp_WindowTitleToWaitFor_HasVarMapping = False 
      Global $AutoProp_UseRegEx = True, $AutoProp_UseRegEx_HasVarMapping = False   
      Global $AutoProp_UseCredentials = False, $AutoProp_UseCredentials_HasVarMapping = False   
      Global $AutoProp_InteractiveLogonWithProfile = False, $AutoProp_InteractiveLogonWithProfile_HasVarMapping = False   
      Global $AutoProp_InheritEnvironment = False, $AutoProp_InheritEnvironment_HasVarMapping = False   
      Global $AutoProp_CredentialUsername = "", $AutoProp_CredentialUsername_HasVarMapping = False 
      Global $AutoProp_CredentialPassword = "", $AutoProp_CredentialPassword_HasVarMapping = False 
      Global $AutoProp_CredentialDomain = "", $AutoProp_CredentialDomain_HasVarMapping = False 
      Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
      Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "d3ca5c09-1aa6-485c-bca4-630fbe98ab82", "Run_Program_28Run_Program_EXCEL2EEXE29", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Run_Program_28Run_Program_EXCEL2EEXE29", "d3ca5c09-1aa6-485c-bca4-630fbe98ab82", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Run Program (Run Program EXCEL.EXE)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Run Program (Run Program EXCEL.EXE);
      ;-----------------------------------------------------------------------
      $ErrorHandling = 1
      If $AutoProp_RunIn3rdParty Then
        Local $filename = @ScriptDir & "\3rdParty\" & $AutoProp_FileName
      Else
        Local $filename = $AutoProp_FileName
      EndIf
      Switch $AutoProp_WindowFlagState
          case "Normal"
              Local $WindowState = @SW_SHOWNORMAL
          case "Maximized"
              Local $WindowState = @SW_MAXIMIZE
          case "Minimized"
              Local $WindowState = @SW_MINIMIZE
          case Else 
              Local $WindowState = @SW_SHOWNORMAL
      EndSwitch
                                                                                     
      If $AutoProp_UseGeneralTimeout Then 
         $win_wait_timeout = StcGetGeneralTimeout()
      Else
         $win_wait_timeout = $AutoProp_Timeout 
      EndIf
      
      Local $__windowTitle = $AutoProp_WindowTitleToWaitFor
      If $AutoProp_UseRegEx Then $__windowTitle = _ExpandToTitleRegEx($__windowTitle)
      Local $commandLineParameters = TranslateText($AutoProp_CommandLineParameters) 
      Local $__PID=0, $__WinHandle=0, $__WorkingDir=""
      Local $ret = StcAsRun($filename & " " & $commandLineParameters, $AutoProp_WorkingDirectory, $WindowState, _
                            "d3ca5c09-1aa6-485c-bca4-630fbe98ab82", @ScriptLineNumber,"Run Program (Run Program EXCEL.EXE)", _
      					  $AutoProp_WaitForWindowVisible, $__windowTitle, $win_wait_timeout, _
      					  $AutoProp_UseCredentials, $AutoProp_CredentialUsername, $AutoProp_CredentialPassword, $AutoProp_CredentialDomain, $AutoProp_InheritEnvironment, $AutoProp_InteractiveLogonWithProfile, _
      					  $__WinHandle, $__WorkingDir)
      $AsResultValue = $ret
      If ($ret = 0)  OR  ($AutoProp_WaitForWindowVisible AND  $__WinHandle = 0 ) Then  
         $Run = -1
         $AsResultInfo  = "The process could not be started."
      Else
         $Run = 1
         $AsResultInfo  = "The process was started with PID: "
      EndIf    
      $Run = CheckErrorHandling(1, $Run, "d3ca5c09-1aa6-485c-bca4-630fbe98ab82", @ScriptLineNumber, "Run Program (Run Program EXCEL.EXE)"  ) 
      $OutboundVar_PID = "PID:" & $AsResultValue
      $OutboundVar_Executable = $AutoProp_FileName
      $OutboundVar_WorkingDir = $__WorkingDir
      $OutboundVar_WHwnd = $__WinHandle
      ;"file://#var#=@ScriptDir;\3rdParty\test.txt"
      ;-----------------------------------------------------------------------
      ;### End of transaction step: Run Program (Run Program EXCEL.EXE);
      ;-----------------------------------------------------------------------
      
      
      EndIf  
        Global $Run_Program_Process_ID = $OutboundVar_PID  ; declare variable source. Will be referenced by other action steps 
       Global $Run_Program_Executable = $OutboundVar_Executable  ; declare variable source. Will be referenced by other action steps 
       Global $Run_Program_Working_Dir = $OutboundVar_WorkingDir  ; declare variable source. Will be referenced by other action steps 
       Global $Run_Program_Process_Window_Handle = $OutboundVar_WHwnd  ; declare variable source. Will be referenced by other action steps 
      
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Run Program", $run, "d3ca5c09-1aa6-485c-bca4-630fbe98ab82", 2, "Run Program")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("Format & Copy Data From CSV File", "e22cd84d-50a8-43f3-a5eb-873c5a514079", 2, "Keystrokes")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Format & Copy Data From CSV File (Keystrokes)"
      
        
      Global $AutoProp_UseCommonWindowTitle = False, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
      Global $AutoProp_CommonWindowTitle = "DefaultShipmentTracker - Excel", $AutoProp_CommonWindowTitle_HasVarMapping = False 
      Global $AutoProp_Pause = 10, $AutoProp_Pause_HasVarMapping = False   
      
           Global $AutoProp_Content[27] 
              Global $AutoProp_WindowTitle[27] 
              Global $AutoProp_WindowText[27] 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             $AutoProp_Content[0] = "{DOWN}"                         
              $AutoProp_WindowTitle[0] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[0] = ""                         
                $AutoProp_Content[1] = "{CTRLDOWN}"                         
              $AutoProp_WindowTitle[1] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[1] = ""                         
                $AutoProp_Content[2] = "{SHIFTDOWN}"                         
              $AutoProp_WindowTitle[2] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[2] = ""                         
                $AutoProp_Content[3] = "{RIGHT}"                         
              $AutoProp_WindowTitle[3] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[3] = ""                         
                $AutoProp_Content[4] = "{DOWN}"                         
              $AutoProp_WindowTitle[4] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[4] = ""                         
                $AutoProp_Content[5] = "{CTRLUP}"                         
              $AutoProp_WindowTitle[5] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[5] = ""                         
                $AutoProp_Content[6] = "{SHIFTUP}"                         
              $AutoProp_WindowTitle[6] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[6] = ""                         
                $AutoProp_Content[7] = "{ALTDOWN}"                         
              $AutoProp_WindowTitle[7] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[7] = ""                         
                $AutoProp_Content[8] = "ho"                         
              $AutoProp_WindowTitle[8] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[8] = ""                         
                $AutoProp_Content[9] = "i"                         
              $AutoProp_WindowTitle[9] = ""                         
              $AutoProp_WindowText[9] = ""                         
                $AutoProp_Content[10] = "{ALTUP}"                         
              $AutoProp_WindowTitle[10] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[10] = ""                         
                $AutoProp_Content[11] = "{LEFT}"                         
              $AutoProp_WindowTitle[11] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[11] = ""                         
                $AutoProp_Content[12] = "{SHIFTDOWN}"                         
              $AutoProp_WindowTitle[12] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[12] = ""                         
                $AutoProp_Content[13] = "{RIGHT}"                         
              $AutoProp_WindowTitle[13] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[13] = ""                         
                $AutoProp_Content[14] = "{RIGHT}"                         
              $AutoProp_WindowTitle[14] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[14] = ""                         
                $AutoProp_Content[15] = "{RIGHT}"                         
              $AutoProp_WindowTitle[15] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[15] = ""                         
                $AutoProp_Content[16] = "{RIGHT}"                         
              $AutoProp_WindowTitle[16] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[16] = ""                         
                $AutoProp_Content[17] = "{RIGHT}"                         
              $AutoProp_WindowTitle[17] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[17] = ""                         
                $AutoProp_Content[18] = "{RIGHT}"                         
              $AutoProp_WindowTitle[18] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[18] = ""                         
                $AutoProp_Content[19] = "{RIGHT}"                         
              $AutoProp_WindowTitle[19] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[19] = ""                         
                $AutoProp_Content[20] = "{CTRLDOWN}"                         
              $AutoProp_WindowTitle[20] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[20] = ""                         
                $AutoProp_Content[21] = "{DOWN}"                         
              $AutoProp_WindowTitle[21] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[21] = ""                         
                $AutoProp_Content[22] = "{CTRLUP}"                         
              $AutoProp_WindowTitle[22] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[22] = ""                         
                $AutoProp_Content[23] = "{SHIFTUP}"                         
              $AutoProp_WindowTitle[23] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[23] = ""                         
                $AutoProp_Content[24] = "{CTRLDOWN}"                         
              $AutoProp_WindowTitle[24] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[24] = ""                         
                $AutoProp_Content[25] = "c"                         
              $AutoProp_WindowTitle[25] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[25] = ""                         
                $AutoProp_Content[26] = "{CTRLUP}"                         
              $AutoProp_WindowTitle[26] = "DefaultShipmentTracker - Excel"                         
              $AutoProp_WindowText[26] = ""                         
        Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
      Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
      Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
      Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "e22cd84d-50a8-43f3-a5eb-873c5a514079", "Format_26_Copy_Data_From_CSV_File_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Format_26_Copy_Data_From_CSV_File_28Keystrokes29", "e22cd84d-50a8-43f3-a5eb-873c5a514079", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Format & Copy Data From CSV File (Keystrokes)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of Transaction step: Format & Copy Data From CSV File (Keystrokes);
      ;-----------------------------------------------------------------------
      $ErrorHandling = 1
      
      For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
          Local $windowText = ""
          Local $windowTitle = $AutoProp_WindowTitle[$idx]
          If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
          If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
          If @error = 1 Then ActionStepFeedbackEx( "Format & Copy Data From CSV File (Keystrokes)", "KeyStroke", "e22cd84d-50a8-43f3-a5eb-873c5a514079", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
          If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
          StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "e22cd84d-50a8-43f3-a5eb-873c5a514079", @ScriptLineNumber, "Format & Copy Data From CSV File (Keystrokes)" )
      Next
      ;-----------------------------------------------------------------------
      ;### End of Transaction step: Format & Copy Data From CSV File (Keystrokes);
      ;-----------------------------------------------------------------------
      
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Format & Copy Data From CSV File", $run, "e22cd84d-50a8-43f3-a5eb-873c5a514079", 2, "Keystrokes")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("Web Session (Chrome)", "440b49cc-c45d-4800-95e6-88519d947414", 2, "Web Session (Chrome)")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Web Session (Chrome)"
      
        
      Global $AutoProp_ExtraArguments = "--user-data-dir=C:\Users\msps\AppData\Local\Google\Chrome\User Data", $AutoProp_ExtraArguments_HasVarMapping = False 
      Global $AutoProp_UserAgentString = "", $AutoProp_UserAgentString_HasVarMapping = False 
      Global $AutoProp_EnableVerboseLogging = False, $AutoProp_EnableVerboseLogging_HasVarMapping = False   
      Global $AutoProp_DisableSupportForUnpackedExtensions = False, $AutoProp_DisableSupportForUnpackedExtensions_HasVarMapping = False   
      Global $AutoProp_WebSessionId = _StcVarSysResolveVarReference( "Activity_Parameters_dfltWebSession"), $AutoProp_WebSessionId_HasVarMapping = True 
      Global $AutoProp_StartUpURL = "https://docs.google.com/spreadsheets/d/1UHS-1ZuHzo-bxjIx2PS14tlJgdD0guHFb77lqWswE60/edit#gid=676051344", $AutoProp_StartUpURL_HasVarMapping = False 
      Global $AutoProp_StartMaximized = True, $AutoProp_StartMaximized_HasVarMapping = False   
      Global $AutoProp_BrowserMismatchAsInt = 0, $AutoProp_BrowserMismatchAsInt_HasVarMapping = False   
      Global $AutoProp_KeepOutMouse = True, $AutoProp_KeepOutMouse_HasVarMapping = False   
      Global $AutoProp_RepeatMouseKeepOut = False, $AutoProp_RepeatMouseKeepOut_HasVarMapping = False   
      Global $AutoProp_HideCommandPrompt = True, $AutoProp_HideCommandPrompt_HasVarMapping = False   
      Global $AutoProp_ScriptTimeout = 5, $AutoProp_ScriptTimeout_HasVarMapping = False   
      Global $AutoProp_WebDriverTimeoutInSeconds = 60, $AutoProp_WebDriverTimeoutInSeconds_HasVarMapping = False   
      Global $AutoProp_WebdriverStartRetries = 0, $AutoProp_WebdriverStartRetries_HasVarMapping = False   
      Global $AutoProp_MouseParkingPositionValue = 1, $AutoProp_MouseParkingPositionValue_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "440b49cc-c45d-4800-95e6-88519d947414", "Web_Session_28Chrome29", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Web_Session_28Chrome29", "440b49cc-c45d-4800-95e6-88519d947414", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Web Session (Chrome)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
                   
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Web Session (Chrome);
      ;-----------------------------------------------------------------------
      $ErrorHandling = 1
      $ActiveBrowserHandle = -1 ; Use this variable within External Scripts!
      If $run > 0 Then 
           
         Local $__AdditonalCmdLine = ""
         Local $__DebugLevel = 0
         Local $__LogFilePath = ""
         Local $__WebDriverOptions = ""
         Local $__ProfileName = ""
         Local $__VersionCheckFailed = false
         Local $__WebdriverTimeout = 100
      
         ; First try to register remote websession host:
         Local $__WebSessionConnectionId = StcInitializeWebSessionController("Servicetrace.WebSessionHost-1.3.0.0.dll")
      
         ; further step make only sense on a valied web session connection!
         If $__WebSessionConnectionId = "" Then 
             ActionStepFeedbackEx("Web Session (Chrome)", "WebAutomation", "440b49cc-c45d-4800-95e6-88519d947414", "Error", "Not able to aquire a valid websession controller connection.", @ScriptLineNumber)
             $run = -1
         Else
             $__AdditonalCmdLine = $AutoProp_ExtraArguments
      
             If StringLen($AutoProp_UserAgentString) > 0 Then 
                If StringLen($__AdditonalCmdLine) > 0 Then $__AdditonalCmdLine &= ";" 
                $__AdditonalCmdLine &= """--user-agent=" & $AutoProp_UserAgentString & """;"
             EndIf
      
             ; Chrome accepts only a path w/o a own logfile name:
             If $__LogFilePath = "" then $__LogFilePath = """" & StcGetLogFileFolder() & "stc_chrome_webdriver.log"""   
         
             If $AutoProp_EnableVerboseLogging Then  
                  If $__WebDriverOptions <> "" Then $__WebDriverOptions &= ";"
                  $__WebDriverOptions &= "EnableVerboseLogging;bool;true"
             EndIf
             If $AutoProp_HideCommandPrompt Then 
         	    If $__WebDriverOptions <> "" Then $__WebDriverOptions &= ";"
         	    ; add option to disable the command window:   
         	    $__WebDriverOptions &= "HideCommandPromptWindow;bool;true"   
             EndIf	
      
      
             $__DriverName = "Chrome" 
             $__WebdriverTimeout = $AutoProp_WebDriverTimeoutInSeconds
      
         
             If Not $IsChromeInstalled Then 
                ActionStepFeedbackEx("Web Session (Chrome)", "WebAutomation", "440b49cc-c45d-4800-95e6-88519d947414", "Error", "Create chrome web session failed because the chrome browser is not installed.", @ScriptLineNumber)
                $Run = -1  
             EndIf
      
             If Not $__VersionCheckFailed And $IsChromeInstalled  Then
                 ; Evaluate contained inline and environement variables:
                 $__ProfileName = TranslateText($__ProfileName )
                 $__AdditonalCmdLine = TranslateText($__AdditonalCmdLine )
                 $__DebugLevel = TranslateText($__DebugLevel )
                 $__LogFilePath = TranslateText($__LogFilePath )
                 $__WebDriverOptions = TranslateText($__WebDriverOptions )
      
                 writelog( $__DriverName & "-Webdriver arguments: " & $__AdditonalCmdLine )
                 writelog( $__DriverName & "-Webdriver options string: " & $__WebDriverOptions )
                 writelog( $__DriverName & "-Webdriver debug path: " & $__LogFilePath )
                 writelog( $__DriverName & "-Webdriver loglevel: " & $__DebugLevel )
      
                 Local $WaErrorCode = $SWE_OK
                 Local $__URL =  TranslateText($AutoProp_StartUpURL, False, False)
         
                 Local $p_WsId, $p_Result
      
                 Local $__Success = __StcNgWaCreateChromeSession( $AutoProp_WebSessionId, _
                                                                   $__URL, _
                                                                  $__AdditonalCmdLine, _
                                                                  $__DebugLevel, _
                                                                  $__LogFilePath, _
                                                                  $__WebDriverOptions, _
                                                                  $__ProfileName, _
                                                                  $__WebdriverTimeout, _
                                                                  $AutoProp_DisableSupportForUnpackedExtensions, _
                                                                  $AutoProp_ScriptTimeout, _
                                                                  $AutoProp_WebdriverStartRetries, _
                                                                  $AutoProp_BrowserMismatchAsInt, _
                                                                  $__WebSessionConnectionId, _
                                                                  $p_WsId, _
                                                                  $p_Result, _
                                                                 "440b49cc-c45d-4800-95e6-88519d947414", @ScriptLineNumber, "Web Session (Chrome)")  
      
                 $Web_Session_28Chrome29_5090042 = $p_WsId
      
                 If Not $__Success Then $run = -1
              
                                                                                                                                   If $__Success Then
                         If $AutoProp_WebSessionId_HasVarMapping Then
                             $Activity_Parameters_dfltWebSession = $p_Result
      
                                                    If IsDeclared( "Activity_Parameters_dfltWebSession" & "_Changed") Then Assign( "Activity_Parameters_dfltWebSession" & "_Changed", "True", 4)
      
                         EndIf
                     EndIf
                                                                                                                                                                                                                                                        
                If @error <> 0 Then $WaErrorCode = @error
      
             Else  
                 $WaErrorCode = $WaErrNotSupportedVersion
             EndIf
      
             If $WaErrorCode = $SWE_OK Then
                Local $__Pos =  _GetFreeDesktopArea()
                Local $p_Success = true;
                If $AutoProp_StartMaximized Then __StcNgWaSetBrowserWindowSize($Web_Session_28Chrome29_5090042, $__Pos[0],$__Pos[1], $__Pos[2],$__Pos[3], _
                                                                              $StcWebSessionConnectionId, _
                                                                              $p_Success, "440b49cc-c45d-4800-95e6-88519d947414", @ScriptLineNumber, "Web Session (Chrome)" )
                If @error <> 0 Then $WaErrorCode = @error
            EndIf
      
            If $AutoProp_KeepOutMouse Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
      
            If $WaErrorCode = $SWE_OK Then
              $ActiveBrowserHandle = $Web_Session_28Chrome29_5090042
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Window Wait", "c6319f82-1ebe-448c-9c25-aaad5c206f03", 3, "Window Wait")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Window Wait (Window Wait for Appear 'Addendum Template - Google Sheets - ...)"
          
          $OutboundVar_WHwnd = Default 
          $OutboundVar_PID = Default 
            
          Global $AutoProp_WaitForState = 1, $AutoProp_WaitForState_HasVarMapping = False   
          Global $AutoProp_WindowTitle = "Addendum Template - Google Sheets - Google Chrome", $AutoProp_WindowTitle_HasVarMapping = False 
          Global $AutoProp_WindowText = "", $AutoProp_WindowText_HasVarMapping = False 
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_WaitDelay = 50, $AutoProp_WaitDelay_HasVarMapping = False   
          Global $AutoProp_CustomWaitDelay = True, $AutoProp_CustomWaitDelay_HasVarMapping = False   
          Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
          Global $AutoProp_Timeout = 45, $AutoProp_Timeout_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "c6319f82-1ebe-448c-9c25-aaad5c206f03", "Window_Wait_28Window_Wait_for_Appear_27Addendum_Template_2D_Google_Sheets_2D_2E2E2E29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Window_Wait_28Window_Wait_for_Appear_27Addendum_Template_2D_Google_Sheets_2D_2E2E2E29", "c6319f82-1ebe-448c-9c25-aaad5c206f03", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Window Wait (Window Wait for Appear 'Addendum Template - Google Sheets - ...)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;------------------------------------------------------------------------
          ;#### Start of transaction step: Window Wait (Window Wait for Appear 'Addendum Template - Google Sheets - ...);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          If $AutoProp_UseGeneralTimeout Then
             $win_wait_timeout = StcGetGeneralTimeout()
          Else
             $win_wait_timeout = $AutoProp_Timeout
          EndIf
          ; 
          Local $__windowTitle = $AutoProp_WindowTitle
          If $AutoProp_UseRegEx Then $__windowTitle = _ExpandToTitleRegEx($__windowTitle)
          If @error = 1 Then 
             ActionStepFeedbackEx( "Window Wait (Window Wait for Appear 'Addendum Template - Google Sheets - ...)", "WindowWait", "c6319f82-1ebe-448c-9c25-aaad5c206f03", "Error", "The window text '" & $__windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
             $Run = CheckErrorHandling($ErrorHandling, -1, "c6319f82-1ebe-448c-9c25-aaad5c206f03", @ScriptLineNumber, "Window Wait (Window Wait for Appear 'Addendum Template - Google Sheets - ...)" ) 
          Else
             Local $__windowText=""
             If $AutoProp_UseWindowText Then $__windowText = $AutoProp_WindowText 
             Local $__WindowWaitDelay =  $AutoProp_CustomWaitDelay ? $AutoProp_WaitDelay : -1
             $Run = StcAsWindowCheck($AutoProp_WaitForState, $__windowTitle, $__windowText, $win_wait_timeout, $__WindowWaitDelay, $g_TransAction, "c6319f82-1ebe-448c-9c25-aaad5c206f03", @ScriptLineNumber, "Window Wait (Window Wait for Appear 'Addendum Template - Google Sheets - ...)" )
             $OutboundVar_WHWnd = __StcGetResultValue()
             $Run = CheckErrorHandling($ErrorHandling, $Run, "c6319f82-1ebe-448c-9c25-aaad5c206f03", @ScriptLineNumber, "Window Wait (Window Wait for Appear 'Addendum Template - Google Sheets - ...)" ) 
             If StcIsStringWindowHandle( $OutboundVar_WHWnd ) Then 
                $OutboundVar_PID = "PID:" & WinGetProcess( HWnd($OutboundVar_WHWnd) )
             Else
                $OutboundVar_PID =  "PID:0"
             EndIf
          Endif
          ; AsResultValue/Info will be set within function!
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Window Wait (Window Wait for Appear 'Addendum Template - Google Sheets - ...);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Window_Wait_Window_Handle = $OutboundVar_WHwnd  ; declare variable source. Will be referenced by other action steps 
           Global $Window_Wait_Process_ID = $OutboundVar_PID  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Window Wait", $run, "c6319f82-1ebe-448c-9c25-aaad5c206f03", 3, "Window Wait")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Paste Data into Google Sheets", "916c14c4-b74f-4dd3-a55f-e8dda387b2de", 3, "Keystrokes")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Paste Data into Google Sheets (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "Addendum Template - Google Sheets - Google Chrome", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 50, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[5] 
                  Global $AutoProp_WindowTitle[5] 
                  Global $AutoProp_WindowText[5] 
                                                                                           $AutoProp_Content[0] = "{ESCAPE}"                         
                  $AutoProp_WindowTitle[0] = "Default spreadsheet - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "{DOWN}"                         
                  $AutoProp_WindowTitle[1] = "Default spreadsheet - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{CTRLDOWN}"                         
                  $AutoProp_WindowTitle[2] = "Default spreadsheet - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "v"                         
                  $AutoProp_WindowTitle[3] = "Default spreadsheet - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[3] = ""                         
                    $AutoProp_Content[4] = "{CTRLUP}"                         
                  $AutoProp_WindowTitle[4] = "Default spreadsheet - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[4] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "916c14c4-b74f-4dd3-a55f-e8dda387b2de", "Paste_Data_into_Google_Sheets_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Paste_Data_into_Google_Sheets_28Keystrokes29", "916c14c4-b74f-4dd3-a55f-e8dda387b2de", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Paste Data into Google Sheets (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Paste Data into Google Sheets (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Paste Data into Google Sheets (Keystrokes)", "KeyStroke", "916c14c4-b74f-4dd3-a55f-e8dda387b2de", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "916c14c4-b74f-4dd3-a55f-e8dda387b2de", @ScriptLineNumber, "Paste Data into Google Sheets (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Paste Data into Google Sheets (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Paste Data into Google Sheets", $run, "916c14c4-b74f-4dd3-a55f-e8dda387b2de", 3, "Keystrokes")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Sleep", "0f3c520b-02d6-495f-b3ca-ed201396bb29", 3, "Sleep")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Sleep (Sleep 2000ms)"
          
            
          Global $AutoProp_SleepInterval = 2000, $AutoProp_SleepInterval_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "0f3c520b-02d6-495f-b3ca-ed201396bb29", "Sleep_28Sleep_2000ms29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Sleep_28Sleep_2000ms29", "0f3c520b-02d6-495f-b3ca-ed201396bb29", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Sleep (Sleep 2000ms)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Sleep (Sleep 2000ms);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          Sleep ($AutoProp_SleepInterval) 
          _NgCoreLogAnnotationText( "0f3c520b-02d6-495f-b3ca-ed201396bb29", "Sleep was executed with a timeout of: " & $AutoProp_SleepInterval & "ms")
          $AsResultValue = $AutoProp_SleepInterval
          $AsResultInfo = "SleepTime in ms:"
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Sleep (Sleep 2000ms);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Sleep", $run, "0f3c520b-02d6-495f-b3ca-ed201396bb29", 3, "Sleep")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Switch to Valid Shipment Sheets in Gsheets", "d9669cf9-7f60-4a7a-a0ec-1d7192b7eeda", 3, "Keystrokes")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Switch to Valid Shipment Sheets in Gsheets (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "Addendum Template - Google Sheets - Google Chrome", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 50, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[5] 
                  Global $AutoProp_WindowTitle[5] 
                  Global $AutoProp_WindowText[5] 
                                                                                           $AutoProp_Content[0] = "{CTRLDOWN}"                         
                  $AutoProp_WindowTitle[0] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "{SHIFTDOWN}"                         
                  $AutoProp_WindowTitle[1] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{PGDN}"                         
                  $AutoProp_WindowTitle[2] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "{SHIFTUP}"                         
                  $AutoProp_WindowTitle[3] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[3] = ""                         
                    $AutoProp_Content[4] = "{CTRLUP}"                         
                  $AutoProp_WindowTitle[4] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[4] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "d9669cf9-7f60-4a7a-a0ec-1d7192b7eeda", "Switch_to_Valid_Shipment_Sheets_in_Gsheets_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Switch_to_Valid_Shipment_Sheets_in_Gsheets_28Keystrokes29", "d9669cf9-7f60-4a7a-a0ec-1d7192b7eeda", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Switch to Valid Shipment Sheets in Gsheets (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Switch to Valid Shipment Sheets in Gsheets (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Switch to Valid Shipment Sheets in Gsheets (Keystrokes)", "KeyStroke", "d9669cf9-7f60-4a7a-a0ec-1d7192b7eeda", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "d9669cf9-7f60-4a7a-a0ec-1d7192b7eeda", @ScriptLineNumber, "Switch to Valid Shipment Sheets in Gsheets (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Switch to Valid Shipment Sheets in Gsheets (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Switch to Valid Shipment Sheets in Gsheets", $run, "d9669cf9-7f60-4a7a-a0ec-1d7192b7eeda", 3, "Keystrokes")
              EndIf ; CheckBlock...
              
                    EndIf ; If @error  
      
        EndIf ; If $__WebSessionConnectionId
        
        If $run = -1 AND $StcScreenshotMode = 1 Then screenshot( "Start Web Session (Chrome) failed! See screenshot for details:", "440b49cc-c45d-4800-95e6-88519d947414")
      
        If Not $AutoProp_WebSessionId_HasVarMapping Then
          If $ActiveBrowserHandle <> -1 Then __StcNgWaCloseSession($Web_Session_28Chrome29_5090042, _
                                              $__WebSessionConnectionId, _
                                              "440b49cc-c45d-4800-95e6-88519d947414", @ScriptLineNumber, "Web Session (Chrome)")
        EndIf
      EndIf
      
      $Run = CheckErrorHandling($ErrorHandling, $Run, "440b49cc-c45d-4800-95e6-88519d947414", @ScriptLineNumber, "Web Session (Chrome)" )
      
      ;-----------------------------------------------------------------------
      ;### End of transaction step: Web Session (Chrome);
      ;-----------------------------------------------------------------------
       
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Web Session (Chrome)", $run, "440b49cc-c45d-4800-95e6-88519d947414", 2, "Web Session (Chrome)")
   EndIf
   
   If CheckBlockIteration() Then
      OnActionStart("Window set State", "0f5f1a7c-83e5-48a4-b918-717b34a7a7fd", 2, "Window set State")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Window set State (Window Kill 'DefaultShipmentTracker - Excel')"
      
      $OutboundVar_WHwnd = Default 
      $OutboundVar_PID = Default 
        
      Global $AutoProp_WindowNewState = "Kill", $AutoProp_WindowNewState_HasVarMapping = False 
      Global $AutoProp_WindowTitle = "DefaultShipmentTracker - Excel", $AutoProp_WindowTitle_HasVarMapping = False 
      Global $AutoProp_WindowText = "", $AutoProp_WindowText_HasVarMapping = False 
      Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
      Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
      Global $AutoProp_WaitDelay = 50, $AutoProp_WaitDelay_HasVarMapping = False   
      Global $AutoProp_CustomWaitDelay = True, $AutoProp_CustomWaitDelay_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "0f5f1a7c-83e5-48a4-b918-717b34a7a7fd", "Window_set_State_28Window_Kill_27DefaultShipmentTracker_2D_Excel2729", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Window_set_State_28Window_Kill_27DefaultShipmentTracker_2D_Excel2729", "0f5f1a7c-83e5-48a4-b918-717b34a7a7fd", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Window set State (Window Kill 'DefaultShipmentTracker - Excel')")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Window set State (Window Kill 'DefaultShipmentTracker - Excel');
      ;-----------------------------------------------------------------------
      $ErrorHandling = 1
      
      Local $__windowTitle = $AutoProp_WindowTitle
      If $AutoProp_UseRegEx Then $__windowTitle = _ExpandToTitleRegEx($__windowTitle)
      If @error = 1 Then ActionStepFeedbackEx( "Window set State (Window Kill 'DefaultShipmentTracker - Excel')", "WindowSetState", "0f5f1a7c-83e5-48a4-b918-717b34a7a7fd", "Error", "The window text '" & $__windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
      Local $__windowText=""
      If $AutoProp_UseWindowText Then $__windowText = $AutoProp_WindowText 
      Local $__WindowWaitDelay =  $AutoProp_CustomWaitDelay ? $AutoProp_WaitDelay : -1
      Local $WinSetStateResult = StcAsWinSetStateV21($__windowTitle, $__windowText, $AutoProp_WindowNewState, $__WindowWaitDelay, "0f5f1a7c-83e5-48a4-b918-717b34a7a7fd", @ScriptLineNumber, "Window set State (Window Kill 'DefaultShipmentTracker - Excel')");
      $OutboundVar_WHwnd = String($WinSetStateResult)
      $AsResultValue = String($WinSetStateResult)
      If StcIsStringWindowHandle( $OutboundVar_WHWnd ) Then 
      	$OutboundVar_PID = "PID:" & WinGetProcess( HWnd($OutboundVar_WHWnd) )
      Else
         $OutboundVar_PID =  "PID:0"
      EndIf
      If $WinSetStateResult = 0 Then  ;this is the erro case!
         $Run = -1
         $AsResultInfo  = "The window could not be found."
      Else
         $run = 1
         $AsResultInfo  = "The window was found with Handle: "
      EndIf   
      
      $Run = CheckErrorHandling($ErrorHandling, $Run, "0f5f1a7c-83e5-48a4-b918-717b34a7a7fd", @ScriptLineNumber, "Window set State (Window Kill 'DefaultShipmentTracker - Excel')" ) 
      
      ;----------------------------------------------------------------------
      ;### End of transaction step: Window set State (Window Kill 'DefaultShipmentTracker - Excel');
      ;-----------------------------------------------------------------------
      
      
      EndIf  
        Global $Window_set_State_Window_Handle = $OutboundVar_WHwnd  ; declare variable source. Will be referenced by other action steps 
       Global $Window_set_State_Process_ID = $OutboundVar_PID  ; declare variable source. Will be referenced by other action steps 
      
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Window set State", $run, "0f5f1a7c-83e5-48a4-b918-717b34a7a7fd", 2, "Window set State")
   EndIf
   
   $g_ControlBlockLevelName = $g_LastControlBlockLevelName
   OnTransactionEnd("Transaction", "4f1c64aa-2c0f-4e06-bb98-05bc65e81ea9")
   ;---------------------------------------------------------------------------
   ;## End of Transaction: Transaction;
   ;---------------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
          OnMeasurementBlockEnd("Transaction", "4f1c64aa-2c0f-4e06-bb98-05bc65e81ea9", 1, "Transaction")
       EndIf
  
       ;---------------------------------------------------------------------------
       ; Application exit, handling for return
       ;---------------------------------------------------------------------------
 
       If ($run < 0 OR OnCheckAbortState()) AND Not (_StcIsUserExitCausedBy_ExitOk()  or _StcIsStatusExitCode()) Then    ; negativ run or OnCheckAbortState() return true indicates a problem
          $Pass_Activity_Workflow = 0
 
          OnMeasurementTryFailed ("7edac52b-c6ec-46ed-9ab0-be66996cb2f3" )    ; notify Funclib subsystem 
          OnLastMeasurementExecuted("7edac52b-c6ec-46ed-9ab0-be66996cb2f3", False)
 
          ActionStepFeedbackEx( "Activity Workflow", "Workflow", "7edac52b-c6ec-46ed-9ab0-be66996cb2f3", "Error", StcMessages_AppExit_1( $MeasurementName) , @ScriptLineNumber ) 
          If OnCheckAbortState() Then
             writelog( StcMessages_AppExit_2($MeasurementName)  )
          Else
             writelog(  StcMessages_AppExit_3($MeasurementName) )
          EndIf
 
          If $enter >= $g_StcMaxConfiguredExecutionTries OR OnCheckAbortState() Then ; no hope, the end of retries was reached...
             $UsedErrorCycles = $enter                         ; pass current used error cycles to XML output variable
             ExitLoop 1
          Else  ;$enter < $g_StcMaxConfiguredExecutionTries     ; ok, one more again...
             writelog("<-------------------------------------------------------------------------------------------------------------------------------------->")
             writelog("[Enter Measurement Retry] Try: " & $enter+1 & " of " & $g_StcMaxConfiguredExecutionTries)
             StcErrorBox("Application measurement", StcMessages_AppExit_4($MeasurementName,  $retrydelay) , $retrydelay)
             ActionStepFeedbackEx( "Activity Workflow", "Workflow", "7edac52b-c6ec-46ed-9ab0-be66996cb2f3", "Warning", "Workflow now restarted due to prior error. This is measurement cycle: " & $enter+1 & " of " & $g_StcMaxConfiguredExecutionTries , @ScriptLineNumber ) 
             OnMeasurementLoopFailedAfterWaitDlg(STC_GetWorkflowProtocolTemplate())    ; notify subsystem after the message box was displayed! Otherwise the dialog time influence the measurement time.
             $enter += 1           ; next try
          EndIf
 
          Clearkeys ()                     ; take care about key states!
 
       Else
          OnLastMeasurementExecuted("7edac52b-c6ec-46ed-9ab0-be66996cb2f3", TRUE)
          ; some debug, if user has it selected
          writelog( StcMessages_AppExit_5($MeasurementName,  $retrydelay, $enter)  )
          ActionStepFeedbackEx( "Activity Workflow", "Workflow", "7edac52b-c6ec-46ed-9ab0-be66996cb2f3", "Info", StcMessages_AppExit_6( $MeasurementName, $enter, $g_StcMaxConfiguredExecutionTries ) , @ScriptLineNumber ) 
 
          $g_TransAction = "SUM_" & $MeasurementName ; Sum of Responsetimes in Process
          $UsedErrorCycles = $enter-1         ; pass current used error cycles to XML output variable
 
          $Pass_Activity_Workflow = $Pass_Activity_Workflow + 1 ; number of runs without errors
          writelog(  StcMessages_AppExit_7($MeasurementName, $enter, $Pass_Activity_Workflow) )
          ExitLoop 1
       EndIf
    Until $enter > $g_StcMaxConfiguredExecutionTries
 
   
 
 

   
 
 
 ;-----------------------------------------------------------------------
 ;# Start of finalization block: Workflow Finalization;
 ;-----------------------------------------------------------------------
 ; StcAssert(false, "$Run=" & $Run )
 ; StcAssert(false, "$AbortCurrentWorkflow=" & $AbortCurrentWorkflow )
 ; StcAssert(false, "$g_UserExecutionAbortCode=" & $g_UserExecutionAbortCode ) ; May contain 800 for Trigger case
 ; StcAssert(false, "$BreakNextLoop=" & $BreakNextLoop )
 ; StcAssert(false, "CheckBlockIteration()=" & CheckBlockIteration() )
 
 ; Save last workflow run state:
 Local $SavedWorkflowRunState = $Run
 Local $SavedWorkflowAbortState = $AbortCurrentWorkflow
 Local $SavedWorkflowBreakNextLoop = $BreakNextLoop
 Local $OnSuccessRunResult = 0 ; 0-> not processed 1->processed with okay  2->processed but failed
 Local $OnErrorRunResult = 0   ; 0-> not processed 1->processed with okay  2->processed but failed
 Local $OnErrorBlockHasNoActionSteps=False
 
 StcResetErrorState()
 $AbortCurrentWorkflow = False
 $BreakNextLoop = False
 
 $LogfileIdent = 1
 $g_ControlBlockLevelName = "Workflow Finalization"
 
 
 
 OnEnterManagedBlock()
 
 ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "5416edff-83de-41f5-ae14-05ccea2feda0", "Info",  "Finalize Block reached. Finalize Block may change the overall workflow result!", @ScriptLineNumber  )
 
    ;-------------------------------------------------------------------
    ; 'Workflow run succeeded' section
    ;-------------------------------------------------------------------
    Local $__ProcessedAtLeastOneActionStep = false
    If $SavedWorkflowRunState = 1 AND $g_UserExecutionAbortCode = 1 Then     ; On Success Block
     writelog("[WorkflowRunSucceeded.Enter]",1);
     $OnSuccessRunResult = 1
     While 1     ; Try-Block-Loop
             
       ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
             
       If $__ProcessedAtLeastOneActionStep Then ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "c6cb2c2d-c298-40ca-a94d-565ec21b1a85", "InfoPlus",  "Finalize Block: OnSuccess handling was successfully processed.", @ScriptLineNumber  )
       writelog("[WorkflowRunSucceeded.End] Leave 'Workflow run succeeded' with no error!",1);
       OnExitDoActionManagedBlock("c6cb2c2d-c298-40ca-a94d-565ec21b1a85")
       ExitLoop 1
     WEnd  
     If $run <> 1 Then $OnSuccessRunResult = 2
    EndIf     ; Try-Block-Loop End
 
                Local $__LastAction = $g_LastAction
    Local $__TransAction = $g_TransAction
 
 
       If $g_UserExecutionAbortCode <> 1 Then
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "5416edff-83de-41f5-ae14-05ccea2feda0", "Warning",  "Finalize Block does only enter Common error handling because workflow was closed by a user exit code (e.g. Trigger or UserExit action step).", @ScriptLineNumber  )
    EndIf
   
    ;-------------------------------------------------------------------
    ; 'Workflow Run Failed' section
    ;-------------------------------------------------------------------
    $__ProcessedAtLeastOneActionStep = false
    If $SavedWorkflowRunState <> 1 Then ;  Local OnError. Loop over only if abort state is NOT reached!
                 
     writelog("[WorkflowRunFailed.Enter]",1);
 
     $Run = 1
     $OnErrorRunResult = 1
     While 1 ;  Local Catch-Loop, loop over only if abort state is NOT reached!
                                  ;  This is only if the DoAction has executed an "Exit Workflow" AS!
                   
       ; 'Workflow Run Failed' does not contain any active elements, so set error state
       $Run = -1
 
 
       If $__ProcessedAtLeastOneActionStep Then 
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "67a97a13-d7fc-4410-a666-879ed6561e9f", "InfoPlus",  "Finalize Block: ""Workflow run failed"" handling was successfully processed.", @ScriptLineNumber  )
           $OnErrorBlockHasNoActionSteps = False
       Else
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "67a97a13-d7fc-4410-a666-879ed6561e9f", "InfoPlus",  "Finalize Block: ""Workflow run failed"" handling was successfully processed but contained no further actions steps.", @ScriptLineNumber  )          
           $OnErrorBlockHasNoActionSteps = True
       EndIF
       writelog("[WorkflowRunFailed.End] Leave ""Workflow run failed"" with no further errors.",1);
       OnExitDoErrorManagedBlock("67a97a13-d7fc-4410-a666-879ed6561e9f")
       ExitLoop 1
     WEnd
     If $run <> 1 Then $OnErrorRunResult = 2
  EndIf  ; OnSuccess-Block-Loop End
 
 
 
 ;-------------------------------------------------------------------
 ; Finally section
 ;-------------------------------------------------------------------
 Local $RunValueAtLevel_1 = $Run  ; DoAlways is error state neutral, so store value for current level
 $Run = 1
 $__ProcessedAtLeastOneActionStep = false
 
 writelog("[DoAlways.Enter] Following actions executed with no error handling by default!",1);
 While 1    ; Always-Block-Loop
     
    ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
    writelog("[DoAlways.End]",1)
 
   If $__ProcessedAtLeastOneActionStep Then ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "ae89ed9f-4298-4562-b4d0-fcda8e3dcf3e", "InfoPlus",  "Common finalize handling was successfully processed. Note: Possible failed actions steps do not change the workflow run result.", @ScriptLineNumber )
   ExitLoop 1
 WEnd ; Always-Block-Loop
 
 $g_TransAction = $__TransAction
 $g_LastAction = $__LastAction
 
 _StcWaCloseRegisteredSessions("5416edff-83de-41f5-ae14-05ccea2feda0","Workflow Finalization") 
 
 
 $Run = $RunValueAtLevel_1  ; DoAlways is error state neutral, so get back value for this level
     
 OnExitDoAlwaysManagedBlock("ae89ed9f-4298-4562-b4d0-fcda8e3dcf3e")  
 
 OnLeaveManagedBlock()
 
 ; if was set or is now set, the overall state belongs to pesemistic..
 ;$AbortCurrentWorkflow = $SavedWorkflowAbortState OR $AbortCurrentWorkflow
 ;$OneOrMoreMeasurementFailed = true
 ;$LastMeasurementRunSucceeded  = false
 
 
 ActionStepFeedbackEx( $WorkflowName, "Workflow", "5416edff-83de-41f5-ae14-05ccea2feda0", "Info", "Overall consumed time for this run: " & Round(TimerStop($MeasurementOverallTimeTimer )/1000,1) & "sec." , @ScriptLineNumber ) 
 
 OnMeasurementEnd ($g_TransAction,"5416edff-83de-41f5-ae14-05ccea2feda0")    ; notify subsystem
 
 
 If $OnSuccessRunResult > 0 Then
    If $OnSuccessRunResult = 2 Then  ; OnSuccess runs into failed state! 
       ; now it depends what the user selected in Finalizer Wizard
       Switch (0)
          Case 0 ; User want to keep okay state 
             Actionstepfeedbackex( "Finalize block", "Finalize block", "c6cb2c2d-c298-40ca-a94d-565ec21b1a85", "Warning",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             Actionstepfeedbackex( "Finalize block", "Finalize block", "5416edff-83de-41f5-ae14-05ccea2feda0", "Warning",  "The activity succeeded but failed in finalizer handling. Termination mode is: Ingore failure and proceed with Success.", @scriptlinenumber  )               
             _StcSetSuccess_Workflow()  ; for TA and APM we still use Success Code
          Case 1 ; User want to proceed with process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             Actionstepfeedbackex( "Finalize block", "Finalize block", "c6cb2c2d-c298-40ca-a94d-565ec21b1a85", "Error",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "5416edff-83de-41f5-ae14-05ccea2feda0", "Error",  "Finalize handling failed. Termination mode is: Proceed Process.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_RPA_ONSUCCESS_FAILED_BUT_PROCCED) ; for TA and APM we still use measurement failed value
          Case 2 ; User want to terminate process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             Actionstepfeedbackex( "Finalize block", "Finalize block", "c6cb2c2d-c298-40ca-a94d-565ec21b1a85", "Error",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "5416edff-83de-41f5-ae14-05ccea2feda0", "Error",  "Finalize handling failed. Termination mode is: Terminate.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_Measurement_Failed) ; for TA and APM we still use measurement failed value
       EndSwitch
    Else
       _StcSetSuccess_Workflow()  ; for TA and APM we still use Success Code
    EndIf
 EndIf
 
 
 If $OnErrorRunResult > 0 Then 
    ; it doesn't matter if block failed again or not. Failed is still failed!
    ; now it depends what the user selected in Finalizer Wizard
  
    if $OnErrorRunResult = 2 AND Not $OnErrorBlockHasNoActionSteps Then ; in this case one of the actions in OnError has failed!
       ActionstepFeedbackEx( "Finalize block", "Finalize block", "67a97a13-d7fc-4410-a666-879ed6561e9f", "Error",  "One of the activities has failed.", @scriptlinenumber  )               
    EndIF
 
    Switch (1)
       Case 0 ; User want to proceed process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "5416edff-83de-41f5-ae14-05ccea2feda0", "Error",  "Activity failed. Termination mode is: Proceed Process.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_RPA_FAILED_BUT_PROCCED_PROCESS) ; for TA and APM we still use measurement failed value
       Case 1 ; User want to terminate process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "5416edff-83de-41f5-ae14-05ccea2feda0", "Error",  "Activity failed. Termination mode is: Terminate.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_Measurement_Failed) ; for TA and APM we still use measurement failed value
    EndSwitch
 EndIf
 
 
 
 
 ;-----------------------------------------------------------------------
 ;# End of finalization block: Workflow Finalization;
 ;-----------------------------------------------------------------------
 


__StcRpaFlushOutParams( "addae6d9-9c01-42e3-b3b4-a73740129007", @ScriptLineNumber, "Import data into Online Template ()"  )
Local $__AcitivtyParameter_Path = StcGetLogFileFolder() & "\OutputActivityParameters.json"
Local $__AcitivtyParameter_Success = __StcSaveOutParameters($__AcitivtyParameter_Path, "addae6d9-9c01-42e3-b3b4-a73740129007", @ScriptLineNumber, "Import data into Online Template ()"    ) 


  OnWorkflowEnd(  "addae6d9-9c01-42e3-b3b4-a73740129007" )
  return $_MeasurementScriptRunFinished
EndFunc

 
 ;-----------------------------------------------------------------------
 ; Static Section for STC-Protector START
 ;-----------------------------------------------------------------------
 Func __ProtectorGetWindowTitle( $Title, $ActName, $ActId, $Line)
     Local $windowTitle = _ExpandToTitleRegEx($Title)
     If @error = 1 AND NOT $g_StcProtectorAlreadyShowsError Then 
        ActionStepFeedbackEx( $ActName, "KeyStroke", $ActId, "Error", "The window title '" & $windowTitle & "' is not a valid regular expression!", $Line )
        $g_StcProtectorAlreadyShowsError = TRUE
     EndIf
     return $windowTitle
 EndFunc
 
 Func __DecAndCheckFailCounter( $ProtID, $Title, $ActName, $ActId, $Line) 
     $g__StcProtFailCounter[$ProtID] = $g__StcProtFailCounter[$ProtID] - 1
     If $g__StcProtFailCounter[$ProtID] = 0 Then
        ActionStepFeedbackEx( $ActName, "KeyStroke", $ActId, "Warning", "Proctector for window title '" & $Title & "' disabled because of consecutive '" & $g__StcProtFailLimit & "' failures.", $Line )     
        StcProtectorDisable()
     EndIf
 EndFunc           
 
 
 ; STC-Protector, function for closing of error windows, not wanted popups like update information, check runs every 250 miliseconds
 Func STC_Protector()
     __CheckAutoItMainThread()
     If $g__StcProtSkipNextRun OR NOT $g__StcProtEnabled Then
         $g__StcProtSkipNextRun = FALSE
         return
     EndIf
         
     If NOT IsDeclared("g_StcProtectorAlreadyShowsError") Then Global $g_StcProtectorAlreadyShowsError = FALSE
     ; check and force of reboot, waits till a running measurement is finished
     If $reboot = 1 AND @hour = $reboothour AND @min = $rebootMin Then $rebootforce = 1
 
  
 
 EndFunc
 
 ;-----------------------------------------------------------------------
 ; Static Section for STC-Protector END
 ;-----------------------------------------------------------------------
 


; Run protocol template xml:
Func STC_GetWorkflowProtocolTemplate()
 return "<?xml version=""1.0"" encoding=""utf-8""?>" & @CRLF & _
"<WorkflowRunProtocol xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Id=""addae6d9-9c01-42e3-b3b4-a73740129007"" Name=""Import data into Online Template"" Type=""ActivityWorkflow"" WorkflowRevision=""0"" WorkflowProjectID=""addae6d9-9c01-42e3-b3b4-a73740129007"" ModelRevision=""9"" WorkflowEditorVersion=""6.0.15086.1"" WorkflowRun=""0"" Author=""msps"" CreationDate=""2022-11-01T18:07:32.6154013+08:00"">" & @CRLF & _
"  <Items>" & @CRLF & _
"    <Item Id=""918b7cee-3127-4b4d-bb03-80007e869aef"" Name=""Workflow Initialization"" Type=""InitializeSectionActivity"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""f0d096e6-126a-41a6-a813-390c0ecfbf49"" Name=""Activity Parameters"" Type=""ActivityParametersActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""9d0708f0-c9df-4804-b55a-f46c14cc7992"" Name=""Pattern Gallery"" Type=""SearchPatternGalleryActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""5c8895d2-c5af-4ab8-8c70-bf47cea31d74"" Name=""Settings"" Type=""WorkflowSettingsActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"    <Item Id=""7edac52b-c6ec-46ed-9ab0-be66996cb2f3"" Name=""Activity Workflow"" Type=""ActivityWorkflowMeasurement"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""4f1c64aa-2c0f-4e06-bb98-05bc65e81ea9"" Name=""Transaction"" Type=""Transaction"">" & @CRLF & _
"          <Items>" & @CRLF & _
"            <Item Id=""b70f68e3-12e6-4840-b7a2-ff90127469aa"" Name=""Group: Get Number of Rows &amp; Columns in CSV"" Type=""BlockSectionActivity"">" & @CRLF & _
"              <Items>" & @CRLF & _
"                <Item xsi:type=""Loop"" Id=""aa3d9927-f1bd-41ad-9e51-3a65c7e21173"" Name=""File controlled Loop"" Type=""ReadFileActivity"">" & @CRLF & _
"                  <Items>" & @CRLF & _
"                    <Item Id=""8941abe6-1753-4093-a357-0c5a6cee455d"" Name=""String to Array"" Type=""StringToArrayActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""f116dbc5-6b74-40cb-8ff2-6c78be16c0cc"" Name=""Get Array Count"" Type=""GetArrayCountActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""aaf77705-8b76-4ad0-a3e5-761560525d54"" Name=""Set Variable: Set Number of Columns"" Type=""SetVariableActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""12725c12-8262-44ba-866f-37517b23aa00"" Name=""Math Operations"" Type=""MathOperationsActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""13b7eed6-2a3b-49ec-aae7-e08698e7bea0"" Name=""Set Variable"" Type=""SetVariableActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                  </Items>" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""536d15c6-1c01-476c-9d0c-7b25f7f67ae6"" Name=""Message Box"" Type=""MessageBoxActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"              </Items>" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item Id=""d3ca5c09-1aa6-485c-bca4-630fbe98ab82"" Name=""Run Program"" Type=""RunActivity"">" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item Id=""e22cd84d-50a8-43f3-a5eb-873c5a514079"" Name=""Keystrokes: Format &amp; Copy Data From CSV File"" Type=""KeystrokeActivity"">" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item Id=""440b49cc-c45d-4800-95e6-88519d947414"" Name=""Web Session (Chrome)"" Type=""WASessionChromeActivity"">" & @CRLF & _
"              <Items>" & @CRLF & _
"                <Item Id=""c6319f82-1ebe-448c-9c25-aaad5c206f03"" Name=""Window Wait"" Type=""WindowWaitActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""916c14c4-b74f-4dd3-a55f-e8dda387b2de"" Name=""Keystrokes: Paste Data into Google Sheets"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""0f3c520b-02d6-495f-b3ca-ed201396bb29"" Name=""Sleep"" Type=""SleepActivity"" Description="""">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""d9669cf9-7f60-4a7a-a0ec-1d7192b7eeda"" Name=""Keystrokes: Switch to Valid Shipment Sheets in Gsheets"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"              </Items>" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"            <Item Id=""0f5f1a7c-83e5-48a4-b918-717b34a7a7fd"" Name=""Window set State"" Type=""WindowSetStateActivity"">" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"          </Items>" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"    <Item Id=""5416edff-83de-41f5-ae14-05ccea2feda0"" Name=""Workflow Finalization"" Type=""WorkflowFinalizationActivity"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""c6cb2c2d-c298-40ca-a94d-565ec21b1a85"" Name=""Workflow run succeeded"" Type=""OnSuccessSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""67a97a13-d7fc-4410-a666-879ed6561e9f"" Name=""Workflow run failed"" Type=""OnErrorSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""ae89ed9f-4298-4562-b4d0-fcda8e3dcf3e"" Name=""Common finalization handling"" Type=""DoAlwaysSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"  </Items>" & @CRLF & _
"  <RunResult State=""NotExecuted"" />" & @CRLF & _
"</WorkflowRunProtocol>"  
EndFunc

