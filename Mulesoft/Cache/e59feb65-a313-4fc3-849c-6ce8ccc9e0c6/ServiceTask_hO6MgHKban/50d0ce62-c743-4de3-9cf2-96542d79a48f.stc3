;-------------------------------------------------------------------------------
; Code was generated by MuleSoft RPA Builder 6.0.15086.1
; Type is: RPA
; Copyright © MuleSoft LLC 2022
; Template Revision: $Revision: 6.0.1.0 $
; RPA-Workflow Author: msps
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; include of standard functions
;-------------------------------------------------------------------------------
#include "StcFuncLib.stc3"

;-------------------------------------------------------------------------------
; Global value Setting 
;-------------------------------------------------------------------------------
Local $FutureUse = true  ; for now the scriptfeedback is always on!

; Don't change or remove following line! 
$g_UsedWorkflowEditorVersion = "6.0.15086.1"

;-------------------------------------------------------------------------------
; Set the workflow type for this workflow
;-------------------------------------------------------------------------------
_StcSetWfeWorkfowTypeId( 3 )

;-------------------------------------------------------------------------------
; Registering of runtime package cache paths (must be before Init is called!)
;-------------------------------------------------------------------------------

__StcRegisterRuntimePackageModul( "CommonRuntime_6_0_057BEB3330D7CDF6BEB5F9453118434D")  ; Source on WFE generated this script: $item.Value   

__StcRegisterRuntimePackageModul( "Web-Session_6_0_0E1C0D01D60DB01E9EF5AFA2BC0AC6B7")  ; Source on WFE generated this script: $item.Value   

__StcRegisterRuntimePackageModul( "Chrome-Driver_52D2B3366E1D9648F81DFDF08AA8107B")  ; Source on WFE generated this script: $item.Value   


;-------------------------------------------------------------------------------
; Registering of runtime package cache paths (must be before Init is called!)
;-------------------------------------------------------------------------------

;--------------------------------------------------------------------------------

Local $MaxStcLogfile = 1 ;1MB
InitStcFunclib($MaxStcLogfile, $FutureUse, 0)

StcSetScreenShotExtension(".bmp")                                     ; default store as BMP (productive)

writelog("Info - Script was built by X1DS Rev.  : " & $g_UsedWorkflowEditorVersion & " []" & " at 6:08:03 PM ; Tuesday, November 1, 2022 (local time)" )
writelog("Info - Script was built on machine    : johnzhong-pc, OS Typ/Version: " & "Windows 10 x64 v10.0.19044" )
writelog("--------------------------------------------------------------------------------------------------------------")


;-------------------------------------------------------------------------------
;STC-Guard Konfiguration
;-------------------------------------------------------------------------------
__SetStcGuardOperationMode( True )    ; enable or disable Guard by project settings.
__StcRegisterKillByStcGuard( "")
__StcRegisterKillOnExit("" )
__StcRegisterKeepAliveList( "" )


;-------------------------------------------------------------------------------
;   Measurement values
;-------------------------------------------------------------------------------
; counter to count the number of tries
$enter = 1


;-------------------------------------------------------------------------------
;   Global Master Data Settings
;-------------------------------------------------------------------------------
$WorkflowName = "Export Valid Shipment data into Excel" ;StcServerMasterDataVariable( "Workflowname", "STRING",  "Export Valid Shipment data into Excel"  )
; For now the Applname ist not configurable in case of RPA type Workflows! 
; So in all cases where the application name is part of an output we should write: n/a !
$ApplName = "<n/a>"


;-------------------------------------------------------------------------------
;  Image processing settings       
;-------------------------------------------------------------------------------
StcEnableAutoBitsPerPixelFallback()                     


;-------------------------------------------------------------------------------
;  External Library Includes       
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
; Check if project uses AIS Functions. If so we call a special init to 
; precompile needed code. Otherwise first pattern search take more time than othhers!
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
;   Start of scheduler and measurement
; 
;-------------------------------------------------------------------------------
schedule()  ; !!! Ths is the main entry!!!!
   
;-------------------------------------------------------------------------------
; Start of Workflow
;   Measurement Workflows
;-------------------------------------------------------------------------------
Func measurement ()

  Local $LoopErrorHandling = 0
  Local $DoNotExecute = False

  __StcAisGlobalConfigs( $g__StcUseLegacyStaticAnalyseImages)
  
  OnWorkflowStart( "50d0ce62-c743-4de3-9cf2-96542d79a48f",  STC_GetWorkflowProtocolTemplate() )

  ;---------------------------------------------------------------------------
  ;  Master Daten Section
  ;-------------------------------------------------------------------------------
  ActionStepFeedbackEx( "Export Valid Shipment data into Excel ()", "Activity", "50d0ce62-c743-4de3-9cf2-96542d79a48f", "Info", "Process name    : OSRA-22 case.", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Export Valid Shipment data into Excel ()", "Activity", "50d0ce62-c743-4de3-9cf2-96542d79a48f", "Info", "Activity name   : Export Valid Shipment data into Excel.", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Export Valid Shipment data into Excel ()", "Activity", "50d0ce62-c743-4de3-9cf2-96542d79a48f", "Info", "Workflow type is: " & StcGetWfeWorkflowType() & ".", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "Export Valid Shipment data into Excel ()", "Activity", "50d0ce62-c743-4de3-9cf2-96542d79a48f", "Info", "Executed by user: '" & @UserName & "' at machine name: '" & @ComputerName & "'. OS-Version: " & @OSVersion & ".", @ScriptLineNumber ) 

  ;-------------------------------------------------------------------------------
  ;   Measurement Point INIT-Section 
  ;-------------------------------------------------------------------------------

  ; Simple Measurement Point Registration 
   
   ; Timer related Measurement Point Registration
   
   
 ;-----------------------------------------------------------------------
 ;# Start of Initialization Section: Workflow Initialization;
 ;-----------------------------------------------------------------------
 Local $__gStcInitSectionSuccess = True ; may set to false in one of the herein called init section AS
     
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Activity Parameters"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "83a95fb1-f83e-4ff9-806e-e0327f646597", "Activity_Parameters", False, "EhNormal", @ScriptLineNumber)
   If True Then
   $LogfileIdent = 2 
   $TransStep = ("Activity Parameters")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of Activity Parameter Definitions: Activity Parameters;
   ;-----------------------------------------------------------------------
   Local $__AcitivtyParameter_Path = StcGetLogFileFolder() & "\InputActivityParameters.json"
   Local $__AcitivtyParameter_Success = __StcInitInParameters($__AcitivtyParameter_Path, "83a95fb1-f83e-4ff9-806e-e0327f646597", @ScriptLineNumber, "Activity Parameters"    ) 
   Local $__AcitivtyParameter_Value ; the last retrieved value as it is used within the variable system. Intrinic is as it is, complex is Jason
   Local $__ActivityParameter_Display ; the value i an always readable format.
   
   If $__AcitivtyParameter_Success Then
   Local $__AcitivtyParameter_ReadSuccess = True;
      ; List of in variables 
      Local $__Success = __StcRpaGetActivityParameterValue("dfltWebSession", 12, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":12,""Id"":""00000000-0000-0000-0000-000000000000""},""Name"":""dfltWebSession"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "83a95fb1-f83e-4ff9-806e-e0327f646597", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_dfltWebSession = $__AcitivtyParameter_Value
      Local $__Success = __StcRpaGetActivityParameterValue("nRowCounter", 0, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":0,""IntValue"":0},""Name"":""nRowCounter"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "83a95fb1-f83e-4ff9-806e-e0327f646597", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_nRowCounter = $__AcitivtyParameter_Value
      Local $__Success = __StcRpaGetActivityParameterValue("nColumnCounter", 1, $__AcitivtyParameter_Value, $__ActivityParameter_Display, "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":1,""StringValue"":""9""},""Name"":""nColumnCounter"",""Id"":""00000000-0000-0000-0000-000000000000"",""Access"":""RW"",""Tags"":null}", "83a95fb1-f83e-4ff9-806e-e0327f646597", @ScriptLineNumber, "Activity Parameters"   )  
      If Not $__Success Then $__AcitivtyParameter_ReadSuccess = False
      Global $Activity_Parameters_nColumnCounter = $__AcitivtyParameter_Value
   If Not $__AcitivtyParameter_ReadSuccess then  $__gStcInitSectionSuccess = False  ; set global error at init flag!
   
   
   ; Register process out variables:
   __StcRpaRegisterOutParams( "Activity_Parameters_dfltWebSession", "dfltWebSession" )
   Global $Activity_Parameters_dfltWebSession_Changed = False
   __StcRpaRegisterOutParams( "Activity_Parameters_nRowCounter", "nRowCounter" )
   Global $Activity_Parameters_nRowCounter_Changed = False
   __StcRpaRegisterOutParams( "Activity_Parameters_nColumnCounter", "nColumnCounter" )
   Global $Activity_Parameters_nColumnCounter_Changed = False
   Else
      $__gStcInitSectionSuccess=False  ; set global error at init flag!
   Endif
   
   $Run = CheckErrorHandling(1, $__AcitivtyParameter_Success ? 1 : -1 , "83a95fb1-f83e-4ff9-806e-e0327f646597", @ScriptLineNumber, "Activity Parameters"  ) 
   
   
   ;-----------------------------------------------------------------------
   ;## End of Activity Parameter Definitions: Activity Parameters;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "83a95fb1-f83e-4ff9-806e-e0327f646597", true )
        
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Pattern Gallery"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "a2a9ea13-45cf-4241-b97f-26469f1cbd38", "Pattern_Gallery", True, "EhNormal", @ScriptLineNumber)
   If _StcVarSysValidateVarReference( "Pattern_Gallery", "a2a9ea13-45cf-4241-b97f-26469f1cbd38", @ScriptLineNumber, "EhNormal" ) Then
   $LogfileIdent = 2 
   $TransStep = ("Pattern Gallery")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of transaction step: Pattern Gallery;
   ;-----------------------------------------------------------------------
   $ErrorHandling = 1
   
   	
   
   ;-----------------------------------------------------------------------
   ;## End of transaction step: Pattern Gallery;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "a2a9ea13-45cf-4241-b97f-26469f1cbd38", true )
        
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Settings"
   
   $OutboundVar_BasePathOut = Default 
     
   Global $AutoProp_BasePath = "%temp%", $AutoProp_BasePath_HasVarMapping = False 
   Global $AutoProp_RemoveBasePathSubfolderOnExit = True, $AutoProp_RemoveBasePathSubfolderOnExit_HasVarMapping = False   
   Global $AutoProp_GenerateSubFolder = True, $AutoProp_GenerateSubFolder_HasVarMapping = False   
   Global $AutoProp_UseAllowedPathsLimitation = False, $AutoProp_UseAllowedPathsLimitation_HasVarMapping = False   
   Global $AutoProp_ProxySettingAsInt = 0, $AutoProp_ProxySettingAsInt_HasVarMapping = False   
   Global $AutoProp_IsUseProxyAuthChecked = False, $AutoProp_IsUseProxyAuthChecked_HasVarMapping = False   
   Global $AutoProp_ProxyUrl = "", $AutoProp_ProxyUrl_HasVarMapping = False 
   Global $AutoProp_ProxyAccount = "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":"""",""Token"":"""",""Password"":"""",""CryptUser"":"""",""CryptPassword"":""""},""Name"":""Name"",""Id"":""51e07320-f3aa-4e09-b968-d71d7e9814fd"",""Access"":""RW"",""Tags"":null}", $AutoProp_ProxyAccount_HasVarMapping = False   
   Global $AutoProp_ProxyAccountAsString = "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":"""",""Token"":"""",""Password"":"""",""CryptUser"":"""",""CryptPassword"":""""},""Name"":""Name"",""Id"":""51e07320-f3aa-4e09-b968-d71d7e9814fd"",""Access"":""RW"",""Tags"":null}", $AutoProp_ProxyAccountAsString_HasVarMapping = False 
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "957f80ce-2c16-4569-b9ce-a02f2ce98e7c", "Settings", True, "EhNormal", @ScriptLineNumber)
   If _StcVarSysValidateVarReference( "Settings", "957f80ce-2c16-4569-b9ce-a02f2ce98e7c", @ScriptLineNumber, "EhNormal" ) Then
   $LogfileIdent = 2 
   $TransStep = ("Settings")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of transaction step: Settings;
   ;-----------------------------------------------------------------------
   $__gStcRemoveBasePathSubfolderOnExit = $AutoProp_RemoveBasePathSubfolderOnExit
   $translatedBasePath = TranslateText($AutoProp_BasePath)
   
   ;Handle run-sub folder generation & removal
   if $AutoProp_GenerateSubFolder then 
   $OutboundVar_BasePathOut = $translatedBasePath & "\" & $StcRunGuid & "\"
   ActionStepFeedbackEx("Workflow Settings","Action","957f80ce-2c16-4569-b9ce-a02f2ce98e7c", "Info", "An additional subfolder: " & $StcRunGuid &" will be generated for the current workflow run.",0)
   _NgCoreLogAnnotationText( "957f80ce-2c16-4569-b9ce-a02f2ce98e7c", "An additional subfolder: " & $StcRunGuid &" was generated for the current workflow run.")
   If True then
   ActionStepFeedbackEx("Workflow Settings","Action","957f80ce-2c16-4569-b9ce-a02f2ce98e7c", "Info", "Removing Base Path subfolder on exit is enabled.",0)
   _NgCoreLogAnnotationText( "957f80ce-2c16-4569-b9ce-a02f2ce98e7c", "Removing Base Path subfolder on exit was enabled.")
   else
   ActionStepFeedbackEx("Workflow Settings","Action","957f80ce-2c16-4569-b9ce-a02f2ce98e7c", "Info", "Removing Base Path subfolder on exit is disabled.",0)
   EndIf
   
   else
   
   $OutboundVar_BasePathOut = $translatedBasePath & "\"
   
   EndIf
   
   
   
   ;Base Path registration
   If FileExists($translatedBasePath) Then
   
   	StcSetBasePathFolder($OutboundVar_BasePathOut)
   
   	Local $p_ResultText
   	Local $__Success = True ; local check for NgCore Call success
   	$__Success = __StcNgRegisterBasePath($OutboundVar_BasePathOut, $p_ResultText, "957f80ce-2c16-4569-b9ce-a02f2ce98e7c",  @ScriptLineNumber, "Settings")
   
   	Local $__BasePathFeedbackType = $__Success ? "Info" : "Error"
   	Local $__BasePathMessage = $__Success ? "StwsBasePath registration for the current run succeeded: '" & $OutboundVar_BasePathOut & "'" _
   			  : ("StwsBasePath registration for the current run failed. Error details: " & $p_ResultText)
   
   	ActionStepFeedbackEx("Workflow Settings","Action","957f80ce-2c16-4569-b9ce-a02f2ce98e7c", $__BasePathFeedbackType, $__BasePathMessage, 0)
   	_NgCoreLogAnnotationText( "957f80ce-2c16-4569-b9ce-a02f2ce98e7c", $__BasePathMessage)
   
   	;Allowed paths registration
   	
   	If $__Success Then
   					__DisableAllowedPathsLimitation("957f80ce-2c16-4569-b9ce-a02f2ce98e7c",  @ScriptLineNumber, "Settings")
   			writelog("Allowed Path Limitation for File Operations is disabled")
   			ActionStepFeedbackEx("Workflow Settings","Action","957f80ce-2c16-4569-b9ce-a02f2ce98e7c", "Info", "Allowed Path Limitation for File Operations is disabled.",0)
   		
   		$__Success = __StcNgRegisterProxySettings($AutoProp_ProxySettingAsInt, $AutoProp_ProxyUrl, $AutoProp_IsUseProxyAuthChecked, $AutoProp_ProxyAccount, "957f80ce-2c16-4569-b9ce-a02f2ce98e7c",  @ScriptLineNumber, "Settings")
   	EndIf
   
   	; if one of the allowed pahts calls failed, we go to error state, but only if error handling is enabled:
   	$__gStcInitSectionSuccess = CheckErrorHandling(1, $__Success ? 1 : -1 , "957f80ce-2c16-4569-b9ce-a02f2ce98e7c", @ScriptLineNumber, "Settings" ) < 0 ? False : True
   	$__gStcGenerateSubBasePathFolder = $AutoProp_GenerateSubFolder
   
   	$Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "957f80ce-2c16-4569-b9ce-a02f2ce98e7c", @ScriptLineNumber, "Settings"  ) 
   
   Else
   
   	ActionStepFeedbackEx("Workflow Settings","Action","957f80ce-2c16-4569-b9ce-a02f2ce98e7c", "Error", "Base path does not exist: '" & $translatedBasePath & "'", 0)
   	_NgCoreLogAnnotationText( "957f80ce-2c16-4569-b9ce-a02f2ce98e7c", "Base path does not exist: '" & $translatedBasePath & "'")
   	$__gStcInitSectionSuccess = False
   	$Run = -1;
   
   EndIf
   
   
   ;-----------------------------------------------------------------------
   ;## End of transaction step: Settings;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
     Global $Settings_BasePath = $OutboundVar_BasePathOut  ; declare variable source. Will be referenced by other action steps 
   
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "957f80ce-2c16-4569-b9ce-a02f2ce98e7c", true )
       
 OnEndOfInitSection( "d6de0397-d32c-402b-bfab-55262e186f53", true )
 ; Now it's save to enable the protector, because it may use variables defined by SBVs!
 StcProtectorEnable()
 ;-----------------------------------------------------------------------
 ;# End of Initialization Section: Workflow Initialization;
 ;-----------------------------------------------------------------------
  

   
 ;----------------<-----------------------------------------------------------
 ;--------------<
 ;------------<   Measurement: <Activity Workflow>
 ;--------------< 
 ;----------------<-----------------------------------------------------------
    Global $MeasurementName = "Activity Workflow"
    Global $Pass_Activity_Workflow
    Global $UsedErrorCycles = 0
    Global $g_LastControlBlockLevelName = ""
    Global $g_ControlBlockLevelName = "MainMeasurement"
    Global $PrepareCodeSuccess = True
    Global $MeasurementOverallTimeTimer = TimerStart()
    
    ; Set Default current measurement iteration!
    $enter = 1
 
    ; set default uuid as default uuid for actioin feedback:
    ActionFeedbackSetDefaultUuid("73769770-7a80-4b56-8876-7663269de8a4")
    ; Inform user about the disabled STC-Guard. In case of Design Mode run, the Guard may also disabled!
    If $StcDisableGuard Then ActionStepFeedbackEx( "StcGuardMode", "Action", default, "Warning", "The STC Guard is disabled by project setting.!", @ScriptLineNumber )
 
    
    StcSetGeneralTimeout( 45, True ) ;called internally!
    $g_StcMaxConfiguredExecutionTries = 1   ; internal STC funclib used value
    Local $errorcycles = $g_StcMaxConfiguredExecutionTries              ;  old legacy name, may removed in the future!
    ActionStepFeedbackEx( "Activity Workflow", "Workflow", "73769770-7a80-4b56-8876-7663269de8a4", "Info", "///-[ Workflow: 'Activity Workflow' started ]-\\\", @ScriptLineNumber ) 
    If StcIsDesignModeActive()  Then
       If $g_StcMaxConfiguredExecutionTries <> 1 Then
         $g_StcMaxConfiguredExecutionTries = 1
         ActionStepFeedbackEx( "Activity Workflow", "Workflow", "73769770-7a80-4b56-8876-7663269de8a4", "Warning", "The workflow was started from WorkflowEditor in Design mode. Retries reduced to 1.", @ScriptLineNumber ) 
       EndIf
    EndIf
    Local $retrydelay = 60
 
    OnMeasurementStart( $MeasurementName, "73769770-7a80-4b56-8876-7663269de8a4" )
    
 
    
    ;<<<<<<<<<<<<<       P r e p a r e  -- S e c t i o n    >>>>>>>>>>>>>>>>>>>>
    ; Some action steps may have prepare code which must be executed before the measurement starts.
 
 
    Do
       Local  $x = 0
       $Run = 1  ; don't make that local or global !!!
 
       ; if prepare code failed, so do abort workflow before it was started!
       If Not $PrepareCodeSuccess Then $Run = -1
         
       ;---------------------------------------------------------------------------
       ; Applications values
       ;---------------------------------------------------------------------------
       
             
       _StcTraDaHandleErrors() ; check here if TraceData Bridge error has occurred! If so script will be terminated!
 
       
       ;---------------------------------------------------------------------------
       ; Check if one of the InitSection AS has failed. If so, write action step feadback a terminate workflow run!
       If Not $__gStcInitSectionSuccess  Then
         ActionStepFeedbackEx( "Activity Workflow", "Workflow", "73769770-7a80-4b56-8876-7663269de8a4", "Error", "One of the steps in the initialize section has failed, so further execution is not possible!", @ScriptLineNumber ) 
         $Run = -1 ; abort further execution!
       EndIf
 
       ;---------------------------------------------------------------------------
       ; Start of Workflow
       ;---------------------------------------------------------------------------
       $Errortext = ""
   
       If $run > 0 AND NOT OnCheckAbortState() Then
          OnMeasurementBlockStart("Transaction", "8a42eb55-b0be-4399-9f7d-c83ca910f10a", 1, "Transaction")
            
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Transaction"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "8a42eb55-b0be-4399-9f7d-c83ca910f10a", "Transaction", False, "$Dbg.Item.ActivityErrorHandling", @ScriptLineNumber)
   If True Then
   $LogfileIdent = 2 
   $TransStep = ("Transaction")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;---------------------------------------------------------------------------
   ;## Start of Transaction: Transaction;
   ;---------------------------------------------------------------------------
   
   OnTransactionStart("Transaction", "8a42eb55-b0be-4399-9f7d-c83ca910f10a")
   $g_LastControlBlockLevelName = $g_ControlBlockLevelName
   $g_ControlBlockLevelName = "Transaction"
   
   $__gStcTransactionSqx += 1
   $g_TransAction = "Transaction" 
   $TransStep = "Transaction"
   
   If CheckBlockIteration() Then
      OnActionStart("Web Session (Chrome)", "73ba98f7-4c40-408a-b884-1682144d3bfe", 2, "Web Session (Chrome)")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Web Session (Chrome)"
      
        
      Global $AutoProp_ExtraArguments = "--user-data-dir=C:\Users\msps\AppData\Local\Google\Chrome\User Data", $AutoProp_ExtraArguments_HasVarMapping = False 
      Global $AutoProp_UserAgentString = "", $AutoProp_UserAgentString_HasVarMapping = False 
      Global $AutoProp_EnableVerboseLogging = False, $AutoProp_EnableVerboseLogging_HasVarMapping = False   
      Global $AutoProp_DisableSupportForUnpackedExtensions = False, $AutoProp_DisableSupportForUnpackedExtensions_HasVarMapping = False   
      Global $AutoProp_WebSessionId = _StcVarSysResolveVarReference( "Activity_Parameters_dfltWebSession"), $AutoProp_WebSessionId_HasVarMapping = True 
      Global $AutoProp_StartUpURL = "https://docs.google.com/spreadsheets/d/1UHS-1ZuHzo-bxjIx2PS14tlJgdD0guHFb77lqWswE60/edit#gid=676051344", $AutoProp_StartUpURL_HasVarMapping = False 
      Global $AutoProp_StartMaximized = True, $AutoProp_StartMaximized_HasVarMapping = False   
      Global $AutoProp_BrowserMismatchAsInt = 0, $AutoProp_BrowserMismatchAsInt_HasVarMapping = False   
      Global $AutoProp_KeepOutMouse = True, $AutoProp_KeepOutMouse_HasVarMapping = False   
      Global $AutoProp_RepeatMouseKeepOut = False, $AutoProp_RepeatMouseKeepOut_HasVarMapping = False   
      Global $AutoProp_HideCommandPrompt = True, $AutoProp_HideCommandPrompt_HasVarMapping = False   
      Global $AutoProp_ScriptTimeout = 5, $AutoProp_ScriptTimeout_HasVarMapping = False   
      Global $AutoProp_WebDriverTimeoutInSeconds = 60, $AutoProp_WebDriverTimeoutInSeconds_HasVarMapping = False   
      Global $AutoProp_WebdriverStartRetries = 0, $AutoProp_WebdriverStartRetries_HasVarMapping = False   
      Global $AutoProp_MouseParkingPositionValue = 1, $AutoProp_MouseParkingPositionValue_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "73ba98f7-4c40-408a-b884-1682144d3bfe", "Web_Session_28Chrome29", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Web_Session_28Chrome29", "73ba98f7-4c40-408a-b884-1682144d3bfe", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Web Session (Chrome)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
                   
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Web Session (Chrome);
      ;-----------------------------------------------------------------------
      $ErrorHandling = 1
      $ActiveBrowserHandle = -1 ; Use this variable within External Scripts!
      If $run > 0 Then 
           
         Local $__AdditonalCmdLine = ""
         Local $__DebugLevel = 0
         Local $__LogFilePath = ""
         Local $__WebDriverOptions = ""
         Local $__ProfileName = ""
         Local $__VersionCheckFailed = false
         Local $__WebdriverTimeout = 100
      
         ; First try to register remote websession host:
         Local $__WebSessionConnectionId = StcInitializeWebSessionController("Servicetrace.WebSessionHost-1.3.0.0.dll")
      
         ; further step make only sense on a valied web session connection!
         If $__WebSessionConnectionId = "" Then 
             ActionStepFeedbackEx("Web Session (Chrome)", "WebAutomation", "73ba98f7-4c40-408a-b884-1682144d3bfe", "Error", "Not able to aquire a valid websession controller connection.", @ScriptLineNumber)
             $run = -1
         Else
             $__AdditonalCmdLine = $AutoProp_ExtraArguments
      
             If StringLen($AutoProp_UserAgentString) > 0 Then 
                If StringLen($__AdditonalCmdLine) > 0 Then $__AdditonalCmdLine &= ";" 
                $__AdditonalCmdLine &= """--user-agent=" & $AutoProp_UserAgentString & """;"
             EndIf
      
             ; Chrome accepts only a path w/o a own logfile name:
             If $__LogFilePath = "" then $__LogFilePath = """" & StcGetLogFileFolder() & "stc_chrome_webdriver.log"""   
         
             If $AutoProp_EnableVerboseLogging Then  
                  If $__WebDriverOptions <> "" Then $__WebDriverOptions &= ";"
                  $__WebDriverOptions &= "EnableVerboseLogging;bool;true"
             EndIf
             If $AutoProp_HideCommandPrompt Then 
         	    If $__WebDriverOptions <> "" Then $__WebDriverOptions &= ";"
         	    ; add option to disable the command window:   
         	    $__WebDriverOptions &= "HideCommandPromptWindow;bool;true"   
             EndIf	
      
      
             $__DriverName = "Chrome" 
             $__WebdriverTimeout = $AutoProp_WebDriverTimeoutInSeconds
      
         
             If Not $IsChromeInstalled Then 
                ActionStepFeedbackEx("Web Session (Chrome)", "WebAutomation", "73ba98f7-4c40-408a-b884-1682144d3bfe", "Error", "Create chrome web session failed because the chrome browser is not installed.", @ScriptLineNumber)
                $Run = -1  
             EndIf
      
             If Not $__VersionCheckFailed And $IsChromeInstalled  Then
                 ; Evaluate contained inline and environement variables:
                 $__ProfileName = TranslateText($__ProfileName )
                 $__AdditonalCmdLine = TranslateText($__AdditonalCmdLine )
                 $__DebugLevel = TranslateText($__DebugLevel )
                 $__LogFilePath = TranslateText($__LogFilePath )
                 $__WebDriverOptions = TranslateText($__WebDriverOptions )
      
                 writelog( $__DriverName & "-Webdriver arguments: " & $__AdditonalCmdLine )
                 writelog( $__DriverName & "-Webdriver options string: " & $__WebDriverOptions )
                 writelog( $__DriverName & "-Webdriver debug path: " & $__LogFilePath )
                 writelog( $__DriverName & "-Webdriver loglevel: " & $__DebugLevel )
      
                 Local $WaErrorCode = $SWE_OK
                 Local $__URL =  TranslateText($AutoProp_StartUpURL, False, False)
         
                 Local $p_WsId, $p_Result
      
                 Local $__Success = __StcNgWaCreateChromeSession( $AutoProp_WebSessionId, _
                                                                   $__URL, _
                                                                  $__AdditonalCmdLine, _
                                                                  $__DebugLevel, _
                                                                  $__LogFilePath, _
                                                                  $__WebDriverOptions, _
                                                                  $__ProfileName, _
                                                                  $__WebdriverTimeout, _
                                                                  $AutoProp_DisableSupportForUnpackedExtensions, _
                                                                  $AutoProp_ScriptTimeout, _
                                                                  $AutoProp_WebdriverStartRetries, _
                                                                  $AutoProp_BrowserMismatchAsInt, _
                                                                  $__WebSessionConnectionId, _
                                                                  $p_WsId, _
                                                                  $p_Result, _
                                                                 "73ba98f7-4c40-408a-b884-1682144d3bfe", @ScriptLineNumber, "Web Session (Chrome)")  
      
                 $Web_Session_28Chrome29_1429501 = $p_WsId
      
                 If Not $__Success Then $run = -1
              
                                                                                                                                   If $__Success Then
                         If $AutoProp_WebSessionId_HasVarMapping Then
                             $Activity_Parameters_dfltWebSession = $p_Result
      
                                                    If IsDeclared( "Activity_Parameters_dfltWebSession" & "_Changed") Then Assign( "Activity_Parameters_dfltWebSession" & "_Changed", "True", 4)
      
                         EndIf
                     EndIf
                                                                                                                                                                                                                                                        
                If @error <> 0 Then $WaErrorCode = @error
      
             Else  
                 $WaErrorCode = $WaErrNotSupportedVersion
             EndIf
      
             If $WaErrorCode = $SWE_OK Then
                Local $__Pos =  _GetFreeDesktopArea()
                Local $p_Success = true;
                If $AutoProp_StartMaximized Then __StcNgWaSetBrowserWindowSize($Web_Session_28Chrome29_1429501, $__Pos[0],$__Pos[1], $__Pos[2],$__Pos[3], _
                                                                              $StcWebSessionConnectionId, _
                                                                              $p_Success, "73ba98f7-4c40-408a-b884-1682144d3bfe", @ScriptLineNumber, "Web Session (Chrome)" )
                If @error <> 0 Then $WaErrorCode = @error
            EndIf
      
            If $AutoProp_KeepOutMouse Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
      
            If $WaErrorCode = $SWE_OK Then
              $ActiveBrowserHandle = $Web_Session_28Chrome29_1429501
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Convert String", "365e1fc1-7f49-4d04-b7d0-2d297d73b9a9", 3, "Convert String")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Convert String"
          
          $OutboundVar_OutValAsBool = Default 
          $OutboundVar_OutValAsInt = Default 
          $OutboundVar_OutValAsDouble = Default 
          $OutboundVar_OutValAsString = Default 
          $OutboundVar_OutValueAsStringArrayType = Default 
            
          Global $AutoProp_SourceString = _StcVarSysResolveVarReference( "Activity_Parameters_nColumnCounter"), $AutoProp_SourceString_HasVarMapping = True 
          Global $AutoProp_RegEx = "", $AutoProp_RegEx_HasVarMapping = False 
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "365e1fc1-7f49-4d04-b7d0-2d297d73b9a9", "Convert_String", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Convert_String", "365e1fc1-7f49-4d04-b7d0-2d297d73b9a9", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Convert String")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Convert String;
          ;-----------------------------------------------------------------------
          StcAsConvertString( $AutoProp_SourceString, $AutoProp_RegEx, $OutboundVar_OutValAsBool, $OutboundVar_OutValAsInt, $OutboundVar_OutValAsDouble, $OutboundVar_OutValAsString, $OutboundVar_OutValueAsStringArrayType, "365e1fc1-7f49-4d04-b7d0-2d297d73b9a9", @ScriptLineNumber, "Convert String",1)
          StcSetResultValue($OutboundVar_OutValAsString)
          StcSetResultInfo("Value as string: ")
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Convert String;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Convert_String_AsBool = $OutboundVar_OutValAsBool  ; declare variable source. Will be referenced by other action steps 
           Global $Convert_String_AsInt = $OutboundVar_OutValAsInt  ; declare variable source. Will be referenced by other action steps 
           Global $Convert_String_AsDouble = $OutboundVar_OutValAsDouble  ; declare variable source. Will be referenced by other action steps 
           Global $Convert_String_AsString = $OutboundVar_OutValAsString  ; declare variable source. Will be referenced by other action steps 
           Global $Convert_String_AsStringArray = $OutboundVar_OutValueAsStringArrayType  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Convert String", $run, "365e1fc1-7f49-4d04-b7d0-2d297d73b9a9", 3, "Convert String")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Math Operations", "5b008773-f156-4b3e-be0d-ae45393bf0fb", 3, "Math Operations")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Math Operations ({a}={a}-1)"
          
          $OutboundVar_ResultAsInt = Default 
            
          Global $AutoProp_Variable1 = _StcVarSysResolveVarReference( "Convert_String_AsInt"), $AutoProp_Variable1_HasVarMapping = True 
          Global $AutoProp_Variable2 = 0, $AutoProp_Variable2_HasVarMapping = False   
          Global $AutoProp_Variable3 = 0, $AutoProp_Variable3_HasVarMapping = False   
          Global $AutoProp_Variable4 = 0, $AutoProp_Variable4_HasVarMapping = False   
          Global $AutoProp_Variable5 = 0, $AutoProp_Variable5_HasVarMapping = False   
          Global $AutoProp_Variable6 = 0, $AutoProp_Variable6_HasVarMapping = False   
          Global $AutoProp_Variable7 = 0, $AutoProp_Variable7_HasVarMapping = False   
          Global $AutoProp_Variable8 = 0, $AutoProp_Variable8_HasVarMapping = False   
          Global $AutoProp_Variable9 = 0, $AutoProp_Variable9_HasVarMapping = False   
          Global $AutoProp_Variable10 = 0, $AutoProp_Variable10_HasVarMapping = False   
          Global $AutoProp_MathExpressionInUserInputFormat = "{a}={a}-1", $AutoProp_MathExpressionInUserInputFormat_HasVarMapping = False 
          Global $AutoProp_OutboundVariableTypeAsInt = 1, $AutoProp_OutboundVariableTypeAsInt_HasVarMapping = False   
          Global $AutoProp_MathExpression = "va0=va0-1", $AutoProp_MathExpression_HasVarMapping = False 
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "5b008773-f156-4b3e-be0d-ae45393bf0fb", "Math_Operations_287Ba7D3D7Ba7D2D129", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Math_Operations_287Ba7D3D7Ba7D2D129", "5b008773-f156-4b3e-be0d-ae45393bf0fb", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Math Operations ({a}={a}-1)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Math Operations ({a}={a}-1);
          ;-----------------------------------------------------------------------
          
          Global $Math_Operations_out_Success
          Global $Math_Operations_out_ResultAsFloat
          Global $Math_Operations_out_ResultAsInt
          Global $Math_Operations_out_ErrorCode
          
          Local $__Success = __StcNgPerformMathOperation( _
                                      $AutoProp_Variable1, _
                                      $AutoProp_Variable2, _
                                      $AutoProp_Variable3, _
                                      $AutoProp_Variable4, _
                                      $AutoProp_Variable5, _
                                      $AutoProp_Variable6, _
                                      $AutoProp_Variable7, _
                                      $AutoProp_Variable8, _
                                      $AutoProp_Variable9, _
                                      $AutoProp_Variable10, _
          							$AutoProp_MathExpression, _
          							$AutoProp_OutboundVariableTypeAsInt, _
                                      $Math_Operations_out_Success, _
                                      $Math_Operations_out_ResultAsFloat, _
                                      $Math_Operations_out_ResultAsInt, _
                                      $Math_Operations_out_ErrorCode, _
                                      "5b008773-f156-4b3e-be0d-ae45393bf0fb",  @ScriptLineNumber, "Math Operations ({a}={a}-1)")  
          $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "5b008773-f156-4b3e-be0d-ae45393bf0fb", @ScriptLineNumber, "Math Operations ({a}={a}-1)"  ) 
          
          $OutboundVar_ResultAsFloat = $Math_Operations_out_ResultAsFloat
          $OutboundVar_ResultAsInt = $Math_Operations_out_ResultAsInt
          
          $AsResultValue = $AutoProp_OutboundVariableTypeAsInt == 0 ? $OutboundVar_ResultAsFloat : $OutboundVar_ResultAsInt           ; the result of the calculation as float or int, depending on outbound variable type (0 stands for float, 1 stands for int)
          $AsResultInfo = "Expression Result"
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Math Operations ({a}={a}-1);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Math_Operations_ResultAsInt = $OutboundVar_ResultAsInt  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Math Operations", $run, "5b008773-f156-4b3e-be0d-ae45393bf0fb", 3, "Math Operations")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", 3, "Loop")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Loop"
          
          $OutboundVar_Iteration = Default 
            
          Global $AutoProp_IterationCount = _StcVarSysResolveVarReference( "Math_Operations_ResultAsInt"), $AutoProp_IterationCount_HasVarMapping = True 
          Global $AutoProp_InitialValue = 1, $AutoProp_InitialValue_HasVarMapping = False   
          Global $AutoProp_IncrementValue = 1, $AutoProp_IncrementValue_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "2d1d5011-5c07-4b87-965b-0d399a304da6", "Loop", True, "$Dbg.Item.ActivityErrorHandling", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", @ScriptLineNumber, "$Dbg.Item.ActivityErrorHandling" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Loop")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          Local $Loop__IterationCount = $AutoProp_IterationCount
          
          ;~ Check if InBound Variables are integer
          If IsInt($AutoProp_InitialValue) <> 1 Then
          	$run = -1 
          	ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Error", "Loop not executed : The initial value '" & $AutoProp_InitialValue & "' is not a number.", @ScriptLineNumber ) 
          EndIf
          If IsInt($Loop__IterationCount) <> 1 Then
          	$run = -1 
          	ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Error", "Loop not executed: The iteration count '" & $Loop__IterationCount & "' is not a number.", @ScriptLineNumber ) 
          EndIf
          If IsInt($AutoProp_IncrementValue) <> 1 Then
          	$run = -1 
          	ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Error", "Loop not executed: The increment value '" & $AutoProp_IncrementValue & "' is not a number.", @ScriptLineNumber ) 
          EndIf
          
          Local $l_EndValue = $AutoProp_InitialValue + ($Loop__IterationCount*$AutoProp_IncrementValue) - ($Loop__IterationCount * $AutoProp_IncrementValue < 0 ? -1 : 1)
          
          ;-----------------------------------------------------------------------
          ;#### Start of Loop: Loop;
          ;-----------------------------------------------------------------------
          $LogfileIdent = 4
          $g_LastControlBlockLevelName = $g_ControlBlockLevelName
          $g_ControlBlockLevelName = "Loop"
          $BreakLoopWithError = False  
          $BreakNextLoop      = False  
          $__StcLoopIter_i = 0
          ; Variables unique for each nested loop:
          Local $Loop__StartedLoopIterations = 0
          
          If $Loop__IterationCount > 2147483647 OR $Loop__IterationCount < 0 Then
          	$run = -1 
          	ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Error", "Loop not executed: The iteration count " & $Loop__IterationCount & " is out of range. The loops increment value must be betweeen 1 and 2147483647.", @ScriptLineNumber ) 
          EndIf
          If $AutoProp_IncrementValue > 2147483647 OR $AutoProp_IncrementValue < -2147483648 Then
          	$run = -1
          	ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Error", "Loop not executed: The increment value " & $AutoProp_IncrementValue & " is out of range. The loops increment value must be betweeen -2147483648 and 2147483647.", @ScriptLineNumber ) 
          EndIf
          If $AutoProp_InitialValue > 2147483647 OR $AutoProp_InitialValue < -2147483648 Then
          	$run = -1
          	ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Error", "Loop not executed: The initial value " & $AutoProp_InitialValue & " is out of range. The loops initial value must be betweeen -2147483648 and 2147483647.", @ScriptLineNumber ) 
          EndIf
          If $l_EndValue > 2147483647 OR $l_EndValue < -2147483648 Then
          	$run = -1
          	ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Error", "Loop not executed: The calculated end value " & $l_EndValue & " is out of range. The loops end value must be betweeen -2147483648 and 2147483647.", @ScriptLineNumber ) 
          EndIf
          
          
          If $run <> -1 Then
          	For $__StcLoopIter_i = $AutoProp_InitialValue to $l_EndValue Step $AutoProp_IncrementValue
          		writelog("[Loop: Loop] Start Iteration with value: " & $__StcLoopIter_i & "]",4)
          		OnStartLoopIteration("2d1d5011-5c07-4b87-965b-0d399a304da6")
          		$Loop__StartedLoopIterations += 1
          
          		
          		Local  $i = $__StcLoopIter_i   ; for backward compatibility to WFE < V3.0; Note: Simple $i may result in name clashes with External Script $i variables! 
          		Global $Loop = $__StcLoopIter_i  			 ; support for old inline variable
          		Global $Loop_Iteration = $Loop ; support vor new variable system
          
          				
          			If CheckBlockIteration() Then
          				OnActionStart("Navigate to last Empty Column", "9d53ea33-7b84-48ae-aeba-e8bfbe4b51e6", 4, "Keystrokes")
          				     
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Navigate to last Empty Column (Keystrokes)"
               
                 
               Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
               Global $AutoProp_CommonWindowTitle = "Addendum Template - Google Sheets - Google Chrome", $AutoProp_CommonWindowTitle_HasVarMapping = False 
               Global $AutoProp_Pause = 50, $AutoProp_Pause_HasVarMapping = False   
               
                    Global $AutoProp_Content[1] 
                       Global $AutoProp_WindowTitle[1] 
                       Global $AutoProp_WindowText[1] 
                            $AutoProp_Content[0] = "{RIGHT}"                         
                       $AutoProp_WindowTitle[0] = "Addendum Template - Google Sheets - Google Chrome"                         
                       $AutoProp_WindowText[0] = ""                         
                 Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
               Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
               Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
               Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "9d53ea33-7b84-48ae-aeba-e8bfbe4b51e6", "Navigate_to_last_Empty_Column_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Navigate_to_last_Empty_Column_28Keystrokes29", "9d53ea33-7b84-48ae-aeba-e8bfbe4b51e6", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Navigate to last Empty Column (Keystrokes)")
               Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of Transaction step: Navigate to last Empty Column (Keystrokes);
               ;-----------------------------------------------------------------------
               $ErrorHandling = 1
               
               For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
                   Local $windowText = ""
                   Local $windowTitle = $AutoProp_WindowTitle[$idx]
                   If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
                   If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
                   If @error = 1 Then ActionStepFeedbackEx( "Navigate to last Empty Column (Keystrokes)", "KeyStroke", "9d53ea33-7b84-48ae-aeba-e8bfbe4b51e6", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
                   If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
                   StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "9d53ea33-7b84-48ae-aeba-e8bfbe4b51e6", @ScriptLineNumber, "Navigate to last Empty Column (Keystrokes)" )
               Next
               ;-----------------------------------------------------------------------
               ;##### End of Transaction step: Navigate to last Empty Column (Keystrokes);
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
          				OnActionEnd("Navigate to last Empty Column", $run, "9d53ea33-7b84-48ae-aeba-e8bfbe4b51e6", 4, "Keystrokes")
          			EndIf
          				If OnCheckAbortState() Then
          			If Not _StcIsUserExitCausedBy_ExitOk() AND Not _StcIsStatusExitCode() Then
          				$run = -1
          			EndIf
          			ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Info", "Loop exit in Iteration " & $Loop__StartedLoopIterations & " time(s) of " & $Loop__IterationCount & ".", @ScriptLineNumber )  
          			writelog("[Exit Loop: Workflow was left due to the Action Step Exit Workflow.] User initiated exit workflow", 4)
          			ExitLoop
          		EndIf
          
          		If $run < 0 Then
          			Switch 2 ; After V1.1 RC7 we decide to hide this function for now, maybe comes back in the future.... (static value is 2!)
          				Case 0    ; do nothing
          					Sleep(0)
          				Case 1  ; continue on head
          					$run = 1
          					ContinueLoop
          				Case 2  ; exit loop with error (for now the only possible case!)
          					$run = -1
          					$DoNotExecute = True
          					writelog("[Exit Loop: Loop with error.] Reason is an error at Keystrokes: Navigate to last Empty Column",4)
          					OnEndLoopIteration("2d1d5011-5c07-4b87-965b-0d399a304da6")
          					ExitLoop
          				Case 3  ; exit loop w/o error
          					$run = 1
          					$DoNotExecute = True
          					writelog("[Exit Loop: Loop with ignored error state.] Reason is an error at Keystrokes: Navigate to last Empty Column",4)
          					OnEndLoopIteration("2d1d5011-5c07-4b87-965b-0d399a304da6")
          					ExitLoop
          			EndSwitch
          		EndIf
          		
          		ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Info", "Loop passed " & $Loop__StartedLoopIterations & " time(s) of " & $Loop__IterationCount & ". Loop value: " & $__StcLoopIter_i, @ScriptLineNumber )   
          		OnEndLoopIteration("2d1d5011-5c07-4b87-965b-0d399a304da6")
          
          		If $BreakNextLoop Then exitloop
          
          		writelog("[Loop: Loop] End of loop iteration with value: " & $__StcLoopIter_i & "]",4)
          	Next
          EndIf
          
          If $BreakNextLoop Then  
              If $BreakLoopWithError Then 
                 $run = -1
                 ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Error", "Loop was interrupted in iteration " & $Loop__StartedLoopIterations & " due a BreakLoop action item. Error state is explicitly set.", @ScriptLineNumber ) 
              Else
                 ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Warning", "Loop was interrupted in iteration " & $Loop__StartedLoopIterations & " due a BreakLoop action item. Error state is untouched.", @ScriptLineNumber ) 
              EndIf
          Else
          			writelog("[End Loop: Loop]",4)
          		
          	If $run = -1 Then
          		ActionStepFeedbackEx( "Loop", "Loop", "2d1d5011-5c07-4b87-965b-0d399a304da6", "Warning", "Option 'Loop ends with error' is set, so Loop was exited after iteration " & $Loop__StartedLoopIterations & " with error state set true.", @ScriptLineNumber ) 
          	EndIF
          EndIf
          
          OnEndLoopExecuted( "2d1d5011-5c07-4b87-965b-0d399a304da6", $Loop__StartedLoopIterations, $Loop__IterationCount )
          
          $BreakNextLoop = FALSE       ; reset for next level
          $BreakLoopWithError = FALSE  ; dito
          $g_ControlBlockLevelName = $g_LastControlBlockLevelName
          ;-----------------------------------------------------------------------
          ;#### End of : Loop;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Loop_Iteration = $OutboundVar_Iteration  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Loop", $run, "2d1d5011-5c07-4b87-965b-0d399a304da6", 3, "Loop")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Apply Filter", "a04195ad-c146-4b11-a9bc-8080103bafde", 3, "Keystrokes")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Apply Filter (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 50, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[4] 
                  Global $AutoProp_WindowTitle[4] 
                  Global $AutoProp_WindowText[4] 
                                                                          $AutoProp_Content[0] = "=OR(ARRAYFORMULA(ISBLANK(A1:H1)))"                         
                  $AutoProp_WindowTitle[0] = ""                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "{ENTER}"                         
                  $AutoProp_WindowTitle[1] = ""                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{CTRLDOWN}{SPACE}{CTRLUP}"                         
                  $AutoProp_WindowTitle[2] = ""                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "{CTRLDOWN}d{CTRLUP}"                         
                  $AutoProp_WindowTitle[3] = ""                         
                  $AutoProp_WindowText[3] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "a04195ad-c146-4b11-a9bc-8080103bafde", "Apply_Filter_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Apply_Filter_28Keystrokes29", "a04195ad-c146-4b11-a9bc-8080103bafde", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Apply Filter (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Apply Filter (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Apply Filter (Keystrokes)", "KeyStroke", "a04195ad-c146-4b11-a9bc-8080103bafde", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "a04195ad-c146-4b11-a9bc-8080103bafde", @ScriptLineNumber, "Apply Filter (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Apply Filter (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Apply Filter", $run, "a04195ad-c146-4b11-a9bc-8080103bafde", 3, "Keystrokes")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Select Rows that have atleast one empty cell", "12064558-28d3-47aa-a444-66437737b58e", 3, "Keystrokes")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Select Rows that have atleast one empty cell (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = False, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 500, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[5] 
                  Global $AutoProp_WindowTitle[5] 
                  Global $AutoProp_WindowText[5] 
                                                                                           $AutoProp_Content[0] = "{ALTDOWN}d{ALTUP}"                         
                  $AutoProp_WindowTitle[0] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "f"                         
                  $AutoProp_WindowTitle[1] = ""                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{UP}"                         
                  $AutoProp_WindowTitle[2] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "{CTRLDOWN}{ALTDOWN}r{ALTUP}{CTRLUP}"                         
                  $AutoProp_WindowTitle[3] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[3] = ""                         
                    $AutoProp_Content[4] = "{UP}{TAB}{TAB}{TAB}{TAB}{TAB}{ENTER}{TAB}TRUE{ENTER}{TAB}{TAB}{ENTER}"                         
                  $AutoProp_WindowTitle[4] = ""                         
                  $AutoProp_WindowText[4] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "12064558-28d3-47aa-a444-66437737b58e", "Select_Rows_that_have_atleast_one_empty_cell_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Select_Rows_that_have_atleast_one_empty_cell_28Keystrokes29", "12064558-28d3-47aa-a444-66437737b58e", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Select Rows that have atleast one empty cell (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Select Rows that have atleast one empty cell (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Select Rows that have atleast one empty cell (Keystrokes)", "KeyStroke", "12064558-28d3-47aa-a444-66437737b58e", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "12064558-28d3-47aa-a444-66437737b58e", @ScriptLineNumber, "Select Rows that have atleast one empty cell (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Select Rows that have atleast one empty cell (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Select Rows that have atleast one empty cell", $run, "12064558-28d3-47aa-a444-66437737b58e", 3, "Keystrokes")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Keystrokes1", "e76a5b3c-1158-4595-ba44-e6b9961e4662", 3, "Keystrokes")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Keystrokes1"
          
            
          Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "Addendum Template - Google Sheets - Google Chrome", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 50, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[4] 
                  Global $AutoProp_WindowTitle[4] 
                  Global $AutoProp_WindowText[4] 
                                                                          $AutoProp_Content[0] = "{DOWN}"                         
                  $AutoProp_WindowTitle[0] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "{CTRLDOWN}{SHIFTDOWN}{DOWN}{SHIFTUP}{CTRLUP}"                         
                  $AutoProp_WindowTitle[1] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{SHIFTDOWN}{SPACE}{SHIFTUP}"                         
                  $AutoProp_WindowTitle[2] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "{ALTDOWN}e{ALTUP}"                         
                  $AutoProp_WindowTitle[3] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[3] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "e76a5b3c-1158-4595-ba44-e6b9961e4662", "Keystrokes1", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Keystrokes1", "e76a5b3c-1158-4595-ba44-e6b9961e4662", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Keystrokes1")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Keystrokes1;
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Keystrokes1", "KeyStroke", "e76a5b3c-1158-4595-ba44-e6b9961e4662", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "e76a5b3c-1158-4595-ba44-e6b9961e4662", @ScriptLineNumber, "Keystrokes1" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Keystrokes1;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Keystrokes1", $run, "e76a5b3c-1158-4595-ba44-e6b9961e4662", 3, "Keystrokes")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Delete rows that have atleast one cell empty", "4da314ff-15ba-43c8-a6f6-d5733f3cbed9", 3, "Keystrokes")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Delete rows that have atleast one cell empty (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = True, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 500, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[3] 
                  Global $AutoProp_WindowTitle[3] 
                  Global $AutoProp_WindowText[3] 
                                                         $AutoProp_Content[0] = "d"                         
                  $AutoProp_WindowTitle[0] = ""                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "{DOWN}"                         
                  $AutoProp_WindowTitle[1] = ""                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "{ENTER}"                         
                  $AutoProp_WindowTitle[2] = ""                         
                  $AutoProp_WindowText[2] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "4da314ff-15ba-43c8-a6f6-d5733f3cbed9", "Delete_rows_that_have_atleast_one_cell_empty_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Delete_rows_that_have_atleast_one_cell_empty_28Keystrokes29", "4da314ff-15ba-43c8-a6f6-d5733f3cbed9", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Delete rows that have atleast one cell empty (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Delete rows that have atleast one cell empty (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Delete rows that have atleast one cell empty (Keystrokes)", "KeyStroke", "4da314ff-15ba-43c8-a6f6-d5733f3cbed9", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "4da314ff-15ba-43c8-a6f6-d5733f3cbed9", @ScriptLineNumber, "Delete rows that have atleast one cell empty (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Delete rows that have atleast one cell empty (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Delete rows that have atleast one cell empty", $run, "4da314ff-15ba-43c8-a6f6-d5733f3cbed9", 3, "Keystrokes")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Remove Filter", "4b8c7c60-9501-45c0-bf83-12de920e842e", 3, "Keystrokes")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Remove Filter (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = False, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "Addendum Template - Google Sheets - Google Chrome", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 500, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[6] 
                  Global $AutoProp_WindowTitle[6] 
                  Global $AutoProp_WindowText[6] 
                                                                                                            $AutoProp_Content[0] = "{UP}"                         
                  $AutoProp_WindowTitle[0] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "{ALTDOWN}d{ALTUP}"                         
                  $AutoProp_WindowTitle[1] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "f"                         
                  $AutoProp_WindowTitle[2] = ""                         
                  $AutoProp_WindowText[2] = ""                         
                    $AutoProp_Content[3] = "{CTRLDOWN}{SPACE}{CTRLUP}"                         
                  $AutoProp_WindowTitle[3] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[3] = ""                         
                    $AutoProp_Content[4] = "{DELETE}"                         
                  $AutoProp_WindowTitle[4] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[4] = ""                         
                    $AutoProp_Content[5] = "{HOME}"                         
                  $AutoProp_WindowTitle[5] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[5] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "4b8c7c60-9501-45c0-bf83-12de920e842e", "Remove_Filter_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Remove_Filter_28Keystrokes29", "4b8c7c60-9501-45c0-bf83-12de920e842e", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Remove Filter (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Remove Filter (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Remove Filter (Keystrokes)", "KeyStroke", "4b8c7c60-9501-45c0-bf83-12de920e842e", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "4b8c7c60-9501-45c0-bf83-12de920e842e", @ScriptLineNumber, "Remove Filter (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Remove Filter (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Remove Filter", $run, "4b8c7c60-9501-45c0-bf83-12de920e842e", 3, "Keystrokes")
              EndIf ; CheckBlock...
              
                        
              If CheckBlockIteration() Then  
                 OnActionStart("Export File as CSV", "4fe67369-3168-45ac-882d-fafe146c21fe", 3, "Keystrokes")
                 If $AutoProp_KeepOutMouse AND $AutoProp_RepeatMouseKeepOut Then StcMoveMouseToParkposition( $AutoProp_MouseParkingPositionValue )
                     
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Export File as CSV (Keystrokes)"
          
            
          Global $AutoProp_UseCommonWindowTitle = False, $AutoProp_UseCommonWindowTitle_HasVarMapping = False   
          Global $AutoProp_CommonWindowTitle = "Addendum Template - Google Sheets - Google Chrome", $AutoProp_CommonWindowTitle_HasVarMapping = False 
          Global $AutoProp_Pause = 500, $AutoProp_Pause_HasVarMapping = False   
          
               Global $AutoProp_Content[3] 
                  Global $AutoProp_WindowTitle[3] 
                  Global $AutoProp_WindowText[3] 
                                                         $AutoProp_Content[0] = "{ALTDOWN}f{ALTUP}"                         
                  $AutoProp_WindowTitle[0] = "Addendum Template - Google Sheets - Google Chrome"                         
                  $AutoProp_WindowText[0] = ""                         
                    $AutoProp_Content[1] = "d"                         
                  $AutoProp_WindowTitle[1] = ""                         
                  $AutoProp_WindowText[1] = ""                         
                    $AutoProp_Content[2] = "c"                         
                  $AutoProp_WindowTitle[2] = ""                         
                  $AutoProp_WindowText[2] = ""                         
            Global $AutoProp_KeyUpDelay = 5, $AutoProp_KeyUpDelay_HasVarMapping = False   
          Global $AutoProp_KeyDownDelay = 5, $AutoProp_KeyDownDelay_HasVarMapping = False   
          Global $AutoProp_UseWindowText = False, $AutoProp_UseWindowText_HasVarMapping = False   
          Global $AutoProp_UseRegEx = False, $AutoProp_UseRegEx_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "4fe67369-3168-45ac-882d-fafe146c21fe", "Export_File_as_CSV_28Keystrokes29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Export_File_as_CSV_28Keystrokes29", "4fe67369-3168-45ac-882d-fafe146c21fe", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Export File as CSV (Keystrokes)")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of Transaction step: Export File as CSV (Keystrokes);
          ;-----------------------------------------------------------------------
          $ErrorHandling = 1
          
          For $idx = 0 to  UBound( $AutoProp_WindowText ) - 1 
              Local $windowText = ""
              Local $windowTitle = $AutoProp_WindowTitle[$idx]
              If $AutoProp_UseCommonWindowTitle Then $windowTitle = $AutoProp_CommonWindowTitle
              If $AutoProp_UseRegEx Then $windowTitle = _ExpandToTitleRegEx($windowTitle)
              If @error = 1 Then ActionStepFeedbackEx( "Export File as CSV (Keystrokes)", "KeyStroke", "4fe67369-3168-45ac-882d-fafe146c21fe", "Error", "The window text '" & $windowTitle & "' is not a valid regular expression!", @ScriptLineNumber )
              If $AutoProp_UseWindowText Then $windowText = $AutoProp_WindowText[$idx]
              StcAsSendKeystroke($g_TransAction, $AutoProp_Content[$idx], $windowTitle, $windowText, $AutoProp_Pause, $AutoProp_KeyUpDelay, $AutoProp_KeyDownDelay, "4fe67369-3168-45ac-882d-fafe146c21fe", @ScriptLineNumber, "Export File as CSV (Keystrokes)" )
          Next
          ;-----------------------------------------------------------------------
          ;#### End of Transaction step: Export File as CSV (Keystrokes);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
           
          ;---------<[ End of debug suffix section!  ]>------------------
      
                        
                 OnActionEnd("Export File as CSV", $run, "4fe67369-3168-45ac-882d-fafe146c21fe", 3, "Keystrokes")
              EndIf ; CheckBlock...
              
                    EndIf ; If @error  
      
        EndIf ; If $__WebSessionConnectionId
        
        If $run = -1 AND $StcScreenshotMode = 1 Then screenshot( "Start Web Session (Chrome) failed! See screenshot for details:", "73ba98f7-4c40-408a-b884-1682144d3bfe")
      
        If Not $AutoProp_WebSessionId_HasVarMapping Then
          If $ActiveBrowserHandle <> -1 Then __StcNgWaCloseSession($Web_Session_28Chrome29_1429501, _
                                              $__WebSessionConnectionId, _
                                              "73ba98f7-4c40-408a-b884-1682144d3bfe", @ScriptLineNumber, "Web Session (Chrome)")
        EndIf
      EndIf
      
      $Run = CheckErrorHandling($ErrorHandling, $Run, "73ba98f7-4c40-408a-b884-1682144d3bfe", @ScriptLineNumber, "Web Session (Chrome)" )
      
      ;-----------------------------------------------------------------------
      ;### End of transaction step: Web Session (Chrome);
      ;-----------------------------------------------------------------------
       
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Web Session (Chrome)", $run, "73ba98f7-4c40-408a-b884-1682144d3bfe", 2, "Web Session (Chrome)")
   EndIf
   
   $g_ControlBlockLevelName = $g_LastControlBlockLevelName
   OnTransactionEnd("Transaction", "8a42eb55-b0be-4399-9f7d-c83ca910f10a")
   ;---------------------------------------------------------------------------
   ;## End of Transaction: Transaction;
   ;---------------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
          OnMeasurementBlockEnd("Transaction", "8a42eb55-b0be-4399-9f7d-c83ca910f10a", 1, "Transaction")
       EndIf
  
       ;---------------------------------------------------------------------------
       ; Application exit, handling for return
       ;---------------------------------------------------------------------------
 
       If ($run < 0 OR OnCheckAbortState()) AND Not (_StcIsUserExitCausedBy_ExitOk()  or _StcIsStatusExitCode()) Then    ; negativ run or OnCheckAbortState() return true indicates a problem
          $Pass_Activity_Workflow = 0
 
          OnMeasurementTryFailed ("73769770-7a80-4b56-8876-7663269de8a4" )    ; notify Funclib subsystem 
          OnLastMeasurementExecuted("73769770-7a80-4b56-8876-7663269de8a4", False)
 
          ActionStepFeedbackEx( "Activity Workflow", "Workflow", "73769770-7a80-4b56-8876-7663269de8a4", "Error", StcMessages_AppExit_1( $MeasurementName) , @ScriptLineNumber ) 
          If OnCheckAbortState() Then
             writelog( StcMessages_AppExit_2($MeasurementName)  )
          Else
             writelog(  StcMessages_AppExit_3($MeasurementName) )
          EndIf
 
          If $enter >= $g_StcMaxConfiguredExecutionTries OR OnCheckAbortState() Then ; no hope, the end of retries was reached...
             $UsedErrorCycles = $enter                         ; pass current used error cycles to XML output variable
             ExitLoop 1
          Else  ;$enter < $g_StcMaxConfiguredExecutionTries     ; ok, one more again...
             writelog("<-------------------------------------------------------------------------------------------------------------------------------------->")
             writelog("[Enter Measurement Retry] Try: " & $enter+1 & " of " & $g_StcMaxConfiguredExecutionTries)
             StcErrorBox("Application measurement", StcMessages_AppExit_4($MeasurementName,  $retrydelay) , $retrydelay)
             ActionStepFeedbackEx( "Activity Workflow", "Workflow", "73769770-7a80-4b56-8876-7663269de8a4", "Warning", "Workflow now restarted due to prior error. This is measurement cycle: " & $enter+1 & " of " & $g_StcMaxConfiguredExecutionTries , @ScriptLineNumber ) 
             OnMeasurementLoopFailedAfterWaitDlg(STC_GetWorkflowProtocolTemplate())    ; notify subsystem after the message box was displayed! Otherwise the dialog time influence the measurement time.
             $enter += 1           ; next try
          EndIf
 
          Clearkeys ()                     ; take care about key states!
 
       Else
          OnLastMeasurementExecuted("73769770-7a80-4b56-8876-7663269de8a4", TRUE)
          ; some debug, if user has it selected
          writelog( StcMessages_AppExit_5($MeasurementName,  $retrydelay, $enter)  )
          ActionStepFeedbackEx( "Activity Workflow", "Workflow", "73769770-7a80-4b56-8876-7663269de8a4", "Info", StcMessages_AppExit_6( $MeasurementName, $enter, $g_StcMaxConfiguredExecutionTries ) , @ScriptLineNumber ) 
 
          $g_TransAction = "SUM_" & $MeasurementName ; Sum of Responsetimes in Process
          $UsedErrorCycles = $enter-1         ; pass current used error cycles to XML output variable
 
          $Pass_Activity_Workflow = $Pass_Activity_Workflow + 1 ; number of runs without errors
          writelog(  StcMessages_AppExit_7($MeasurementName, $enter, $Pass_Activity_Workflow) )
          ExitLoop 1
       EndIf
    Until $enter > $g_StcMaxConfiguredExecutionTries
 
   
 
 

   
 
 
 ;-----------------------------------------------------------------------
 ;# Start of finalization block: Workflow Finalization;
 ;-----------------------------------------------------------------------
 ; StcAssert(false, "$Run=" & $Run )
 ; StcAssert(false, "$AbortCurrentWorkflow=" & $AbortCurrentWorkflow )
 ; StcAssert(false, "$g_UserExecutionAbortCode=" & $g_UserExecutionAbortCode ) ; May contain 800 for Trigger case
 ; StcAssert(false, "$BreakNextLoop=" & $BreakNextLoop )
 ; StcAssert(false, "CheckBlockIteration()=" & CheckBlockIteration() )
 
 ; Save last workflow run state:
 Local $SavedWorkflowRunState = $Run
 Local $SavedWorkflowAbortState = $AbortCurrentWorkflow
 Local $SavedWorkflowBreakNextLoop = $BreakNextLoop
 Local $OnSuccessRunResult = 0 ; 0-> not processed 1->processed with okay  2->processed but failed
 Local $OnErrorRunResult = 0   ; 0-> not processed 1->processed with okay  2->processed but failed
 Local $OnErrorBlockHasNoActionSteps=False
 
 StcResetErrorState()
 $AbortCurrentWorkflow = False
 $BreakNextLoop = False
 
 $LogfileIdent = 1
 $g_ControlBlockLevelName = "Workflow Finalization"
 
 
 
 OnEnterManagedBlock()
 
 ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "cca8736b-08b9-44b0-bc81-0393792c5db4", "Info",  "Finalize Block reached. Finalize Block may change the overall workflow result!", @ScriptLineNumber  )
 
    ;-------------------------------------------------------------------
    ; 'Workflow run succeeded' section
    ;-------------------------------------------------------------------
    Local $__ProcessedAtLeastOneActionStep = false
    If $SavedWorkflowRunState = 1 AND $g_UserExecutionAbortCode = 1 Then     ; On Success Block
     writelog("[WorkflowRunSucceeded.Enter]",1);
     $OnSuccessRunResult = 1
     While 1     ; Try-Block-Loop
             
       ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
             
       If $__ProcessedAtLeastOneActionStep Then ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "0c45328e-7467-4568-a54d-1da1da1ec8f4", "InfoPlus",  "Finalize Block: OnSuccess handling was successfully processed.", @ScriptLineNumber  )
       writelog("[WorkflowRunSucceeded.End] Leave 'Workflow run succeeded' with no error!",1);
       OnExitDoActionManagedBlock("0c45328e-7467-4568-a54d-1da1da1ec8f4")
       ExitLoop 1
     WEnd  
     If $run <> 1 Then $OnSuccessRunResult = 2
    EndIf     ; Try-Block-Loop End
 
                Local $__LastAction = $g_LastAction
    Local $__TransAction = $g_TransAction
 
 
       If $g_UserExecutionAbortCode <> 1 Then
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "cca8736b-08b9-44b0-bc81-0393792c5db4", "Warning",  "Finalize Block does only enter Common error handling because workflow was closed by a user exit code (e.g. Trigger or UserExit action step).", @ScriptLineNumber  )
    EndIf
   
    ;-------------------------------------------------------------------
    ; 'Workflow Run Failed' section
    ;-------------------------------------------------------------------
    $__ProcessedAtLeastOneActionStep = false
    If $SavedWorkflowRunState <> 1 Then ;  Local OnError. Loop over only if abort state is NOT reached!
                 
     writelog("[WorkflowRunFailed.Enter]",1);
 
     $Run = 1
     $OnErrorRunResult = 1
     While 1 ;  Local Catch-Loop, loop over only if abort state is NOT reached!
                                  ;  This is only if the DoAction has executed an "Exit Workflow" AS!
                   
       ; 'Workflow Run Failed' does not contain any active elements, so set error state
       $Run = -1
 
 
       If $__ProcessedAtLeastOneActionStep Then 
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "240d47b1-8a11-42d1-83ab-52c28dec0494", "InfoPlus",  "Finalize Block: ""Workflow run failed"" handling was successfully processed.", @ScriptLineNumber  )
           $OnErrorBlockHasNoActionSteps = False
       Else
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "240d47b1-8a11-42d1-83ab-52c28dec0494", "InfoPlus",  "Finalize Block: ""Workflow run failed"" handling was successfully processed but contained no further actions steps.", @ScriptLineNumber  )          
           $OnErrorBlockHasNoActionSteps = True
       EndIF
       writelog("[WorkflowRunFailed.End] Leave ""Workflow run failed"" with no further errors.",1);
       OnExitDoErrorManagedBlock("240d47b1-8a11-42d1-83ab-52c28dec0494")
       ExitLoop 1
     WEnd
     If $run <> 1 Then $OnErrorRunResult = 2
  EndIf  ; OnSuccess-Block-Loop End
 
 
 
 ;-------------------------------------------------------------------
 ; Finally section
 ;-------------------------------------------------------------------
 Local $RunValueAtLevel_1 = $Run  ; DoAlways is error state neutral, so store value for current level
 $Run = 1
 $__ProcessedAtLeastOneActionStep = false
 
 writelog("[DoAlways.Enter] Following actions executed with no error handling by default!",1);
 While 1    ; Always-Block-Loop
     
    ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
    writelog("[DoAlways.End]",1)
 
   If $__ProcessedAtLeastOneActionStep Then ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "315e2a71-3e16-419e-a626-cee98b60ff8d", "InfoPlus",  "Common finalize handling was successfully processed. Note: Possible failed actions steps do not change the workflow run result.", @ScriptLineNumber )
   ExitLoop 1
 WEnd ; Always-Block-Loop
 
 $g_TransAction = $__TransAction
 $g_LastAction = $__LastAction
 
 _StcWaCloseRegisteredSessions("cca8736b-08b9-44b0-bc81-0393792c5db4","Workflow Finalization") 
 
 
 $Run = $RunValueAtLevel_1  ; DoAlways is error state neutral, so get back value for this level
     
 OnExitDoAlwaysManagedBlock("315e2a71-3e16-419e-a626-cee98b60ff8d")  
 
 OnLeaveManagedBlock()
 
 ; if was set or is now set, the overall state belongs to pesemistic..
 ;$AbortCurrentWorkflow = $SavedWorkflowAbortState OR $AbortCurrentWorkflow
 ;$OneOrMoreMeasurementFailed = true
 ;$LastMeasurementRunSucceeded  = false
 
 
 ActionStepFeedbackEx( $WorkflowName, "Workflow", "cca8736b-08b9-44b0-bc81-0393792c5db4", "Info", "Overall consumed time for this run: " & Round(TimerStop($MeasurementOverallTimeTimer )/1000,1) & "sec." , @ScriptLineNumber ) 
 
 OnMeasurementEnd ($g_TransAction,"cca8736b-08b9-44b0-bc81-0393792c5db4")    ; notify subsystem
 
 
 If $OnSuccessRunResult > 0 Then
    If $OnSuccessRunResult = 2 Then  ; OnSuccess runs into failed state! 
       ; now it depends what the user selected in Finalizer Wizard
       Switch (0)
          Case 0 ; User want to keep okay state 
             Actionstepfeedbackex( "Finalize block", "Finalize block", "0c45328e-7467-4568-a54d-1da1da1ec8f4", "Warning",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             Actionstepfeedbackex( "Finalize block", "Finalize block", "cca8736b-08b9-44b0-bc81-0393792c5db4", "Warning",  "The activity succeeded but failed in finalizer handling. Termination mode is: Ingore failure and proceed with Success.", @scriptlinenumber  )               
             _StcSetSuccess_Workflow()  ; for TA and APM we still use Success Code
          Case 1 ; User want to proceed with process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             Actionstepfeedbackex( "Finalize block", "Finalize block", "0c45328e-7467-4568-a54d-1da1da1ec8f4", "Error",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "cca8736b-08b9-44b0-bc81-0393792c5db4", "Error",  "Finalize handling failed. Termination mode is: Proceed Process.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_RPA_ONSUCCESS_FAILED_BUT_PROCCED) ; for TA and APM we still use measurement failed value
          Case 2 ; User want to terminate process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             Actionstepfeedbackex( "Finalize block", "Finalize block", "0c45328e-7467-4568-a54d-1da1da1ec8f4", "Error",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "cca8736b-08b9-44b0-bc81-0393792c5db4", "Error",  "Finalize handling failed. Termination mode is: Terminate.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_Measurement_Failed) ; for TA and APM we still use measurement failed value
       EndSwitch
    Else
       _StcSetSuccess_Workflow()  ; for TA and APM we still use Success Code
    EndIf
 EndIf
 
 
 If $OnErrorRunResult > 0 Then 
    ; it doesn't matter if block failed again or not. Failed is still failed!
    ; now it depends what the user selected in Finalizer Wizard
  
    if $OnErrorRunResult = 2 AND Not $OnErrorBlockHasNoActionSteps Then ; in this case one of the actions in OnError has failed!
       ActionstepFeedbackEx( "Finalize block", "Finalize block", "240d47b1-8a11-42d1-83ab-52c28dec0494", "Error",  "One of the activities has failed.", @scriptlinenumber  )               
    EndIF
 
    Switch (1)
       Case 0 ; User want to proceed process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "cca8736b-08b9-44b0-bc81-0393792c5db4", "Error",  "Activity failed. Termination mode is: Proceed Process.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_RPA_FAILED_BUT_PROCCED_PROCESS) ; for TA and APM we still use measurement failed value
       Case 1 ; User want to terminate process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "cca8736b-08b9-44b0-bc81-0393792c5db4", "Error",  "Activity failed. Termination mode is: Terminate.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_Measurement_Failed) ; for TA and APM we still use measurement failed value
    EndSwitch
 EndIf
 
 
 
 
 ;-----------------------------------------------------------------------
 ;# End of finalization block: Workflow Finalization;
 ;-----------------------------------------------------------------------
 


__StcRpaFlushOutParams( "50d0ce62-c743-4de3-9cf2-96542d79a48f", @ScriptLineNumber, "Export Valid Shipment data into Excel ()"  )
Local $__AcitivtyParameter_Path = StcGetLogFileFolder() & "\OutputActivityParameters.json"
Local $__AcitivtyParameter_Success = __StcSaveOutParameters($__AcitivtyParameter_Path, "50d0ce62-c743-4de3-9cf2-96542d79a48f", @ScriptLineNumber, "Export Valid Shipment data into Excel ()"    ) 


  OnWorkflowEnd(  "50d0ce62-c743-4de3-9cf2-96542d79a48f" )
  return $_MeasurementScriptRunFinished
EndFunc

 
 ;-----------------------------------------------------------------------
 ; Static Section for STC-Protector START
 ;-----------------------------------------------------------------------
 Func __ProtectorGetWindowTitle( $Title, $ActName, $ActId, $Line)
     Local $windowTitle = _ExpandToTitleRegEx($Title)
     If @error = 1 AND NOT $g_StcProtectorAlreadyShowsError Then 
        ActionStepFeedbackEx( $ActName, "KeyStroke", $ActId, "Error", "The window title '" & $windowTitle & "' is not a valid regular expression!", $Line )
        $g_StcProtectorAlreadyShowsError = TRUE
     EndIf
     return $windowTitle
 EndFunc
 
 Func __DecAndCheckFailCounter( $ProtID, $Title, $ActName, $ActId, $Line) 
     $g__StcProtFailCounter[$ProtID] = $g__StcProtFailCounter[$ProtID] - 1
     If $g__StcProtFailCounter[$ProtID] = 0 Then
        ActionStepFeedbackEx( $ActName, "KeyStroke", $ActId, "Warning", "Proctector for window title '" & $Title & "' disabled because of consecutive '" & $g__StcProtFailLimit & "' failures.", $Line )     
        StcProtectorDisable()
     EndIf
 EndFunc           
 
 
 ; STC-Protector, function for closing of error windows, not wanted popups like update information, check runs every 250 miliseconds
 Func STC_Protector()
     __CheckAutoItMainThread()
     If $g__StcProtSkipNextRun OR NOT $g__StcProtEnabled Then
         $g__StcProtSkipNextRun = FALSE
         return
     EndIf
         
     If NOT IsDeclared("g_StcProtectorAlreadyShowsError") Then Global $g_StcProtectorAlreadyShowsError = FALSE
     ; check and force of reboot, waits till a running measurement is finished
     If $reboot = 1 AND @hour = $reboothour AND @min = $rebootMin Then $rebootforce = 1
 
  
 
 EndFunc
 
 ;-----------------------------------------------------------------------
 ; Static Section for STC-Protector END
 ;-----------------------------------------------------------------------
 


; Run protocol template xml:
Func STC_GetWorkflowProtocolTemplate()
 return "<?xml version=""1.0"" encoding=""utf-8""?>" & @CRLF & _
"<WorkflowRunProtocol xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Id=""50d0ce62-c743-4de3-9cf2-96542d79a48f"" Name=""Export Valid Shipment data into Excel"" Type=""ActivityWorkflow"" WorkflowRevision=""0"" WorkflowProjectID=""50d0ce62-c743-4de3-9cf2-96542d79a48f"" ModelRevision=""9"" WorkflowEditorVersion=""6.0.15086.1"" WorkflowRun=""0"" Author=""msps"" CreationDate=""2022-11-01T18:07:33.4258633+08:00"">" & @CRLF & _
"  <Items>" & @CRLF & _
"    <Item Id=""d6de0397-d32c-402b-bfab-55262e186f53"" Name=""Workflow Initialization"" Type=""InitializeSectionActivity"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""83a95fb1-f83e-4ff9-806e-e0327f646597"" Name=""Activity Parameters"" Type=""ActivityParametersActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""a2a9ea13-45cf-4241-b97f-26469f1cbd38"" Name=""Pattern Gallery"" Type=""SearchPatternGalleryActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""957f80ce-2c16-4569-b9ce-a02f2ce98e7c"" Name=""Settings"" Type=""WorkflowSettingsActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"    <Item Id=""73769770-7a80-4b56-8876-7663269de8a4"" Name=""Activity Workflow"" Type=""ActivityWorkflowMeasurement"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""8a42eb55-b0be-4399-9f7d-c83ca910f10a"" Name=""Transaction"" Type=""Transaction"">" & @CRLF & _
"          <Items>" & @CRLF & _
"            <Item Id=""73ba98f7-4c40-408a-b884-1682144d3bfe"" Name=""Web Session (Chrome)"" Type=""WASessionChromeActivity"">" & @CRLF & _
"              <Items>" & @CRLF & _
"                <Item Id=""365e1fc1-7f49-4d04-b7d0-2d297d73b9a9"" Name=""Convert String"" Type=""ConvertStringActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""5b008773-f156-4b3e-be0d-ae45393bf0fb"" Name=""Math Operations"" Type=""MathOperationsActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item xsi:type=""Loop"" Id=""2d1d5011-5c07-4b87-965b-0d399a304da6"" Name=""Loop"" Type=""LoopOperator"">" & @CRLF & _
"                  <Items>" & @CRLF & _
"                    <Item Id=""9d53ea33-7b84-48ae-aeba-e8bfbe4b51e6"" Name=""Keystrokes: Navigate to last Empty Column"" Type=""KeystrokeActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                  </Items>" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""a04195ad-c146-4b11-a9bc-8080103bafde"" Name=""Keystrokes: Apply Filter"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""12064558-28d3-47aa-a444-66437737b58e"" Name=""Keystrokes: Select Rows that have atleast one empty cell"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""e76a5b3c-1158-4595-ba44-e6b9961e4662"" Name=""Keystrokes: Keystrokes1"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""4da314ff-15ba-43c8-a6f6-d5733f3cbed9"" Name=""Keystrokes: Delete rows that have atleast one cell empty"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""4b8c7c60-9501-45c0-bf83-12de920e842e"" Name=""Keystrokes: Remove Filter"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""4fe67369-3168-45ac-882d-fafe146c21fe"" Name=""Keystrokes: Export File as CSV"" Type=""KeystrokeActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"              </Items>" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"          </Items>" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"    <Item Id=""cca8736b-08b9-44b0-bc81-0393792c5db4"" Name=""Workflow Finalization"" Type=""WorkflowFinalizationActivity"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""0c45328e-7467-4568-a54d-1da1da1ec8f4"" Name=""Workflow run succeeded"" Type=""OnSuccessSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""240d47b1-8a11-42d1-83ab-52c28dec0494"" Name=""Workflow run failed"" Type=""OnErrorSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""315e2a71-3e16-419e-a626-cee98b60ff8d"" Name=""Common finalization handling"" Type=""DoAlwaysSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"  </Items>" & @CRLF & _
"  <RunResult State=""NotExecuted"" />" & @CRLF & _
"</WorkflowRunProtocol>"  
EndFunc

