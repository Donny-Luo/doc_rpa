;-------------------------------------------------------------------------------
; Code was generated by MuleSoft RPA Builder 6.0.15086.1
; Type is: RPA
; Copyright © MuleSoft LLC 2022
; Template Revision: $Revision: 6.0.1.0 $
; RPA-Workflow Author: RPA
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; include of standard functions
;-------------------------------------------------------------------------------
#include "StcFuncLib.stc3"

;-------------------------------------------------------------------------------
; Global value Setting 
;-------------------------------------------------------------------------------
Local $FutureUse = true  ; for now the scriptfeedback is always on!

; Don't change or remove following line! 
$g_UsedWorkflowEditorVersion = "6.0.15086.1"

;-------------------------------------------------------------------------------
; Set the workflow type for this workflow
;-------------------------------------------------------------------------------
_StcSetWfeWorkfowTypeId( 3 )

;-------------------------------------------------------------------------------
; Registering of runtime package cache paths (must be before Init is called!)
;-------------------------------------------------------------------------------

__StcRegisterRuntimePackageModul( "CommonRuntime_6_0_057BEB3330D7CDF6BEB5F9453118434D")  ; Source on WFE generated this script: $item.Value   

__StcRegisterRuntimePackageModul( "OCR-OpenCv_6_0_598A9EE4182C5AD7FE6226E438346613")  ; Source on WFE generated this script: $item.Value   

__StcRegisterRuntimePackageModul( "Web-Session_6_0_0E1C0D01D60DB01E9EF5AFA2BC0AC6B7")  ; Source on WFE generated this script: $item.Value   

__StcRegisterRuntimePackageModul( "Chrome-Driver_52D2B3366E1D9648F81DFDF08AA8107B")  ; Source on WFE generated this script: $item.Value   

__StcRegisterRuntimePackageModul( "ExcelEngine_6_0_299FFDDA5F34D09BDCEEFA57D18F5A18")  ; Source on WFE generated this script: $item.Value   


;-------------------------------------------------------------------------------
; Registering of runtime package cache paths (must be before Init is called!)
;-------------------------------------------------------------------------------

;--------------------------------------------------------------------------------

Local $MaxStcLogfile = 1 ;1MB
InitStcFunclib($MaxStcLogfile, $FutureUse, 0)

StcSetScreenShotExtension(".bmp")                                     ; default store as BMP (productive)

writelog("Info - Script was built by X1DS Rev.  : " & $g_UsedWorkflowEditorVersion & " []" & " at 9:03:24 am ; Tuesday, 11 October 2022 (local time)" )
writelog("Info - Script was built on machine    : henryyeung-pc, OS Typ/Version: " & "Windows 10 x64 v10.0.22621" )
writelog("--------------------------------------------------------------------------------------------------------------")


;-------------------------------------------------------------------------------
;STC-Guard Konfiguration
;-------------------------------------------------------------------------------
__SetStcGuardOperationMode( True )    ; enable or disable Guard by project settings.
__StcRegisterKillByStcGuard( "")
__StcRegisterKillOnExit("" )
__StcRegisterKeepAliveList( "" )


;-------------------------------------------------------------------------------
;   Measurement values
;-------------------------------------------------------------------------------
; counter to count the number of tries
$enter = 1


;-------------------------------------------------------------------------------
;   Global Master Data Settings
;-------------------------------------------------------------------------------
$WorkflowName = "1" ;StcServerMasterDataVariable( "Workflowname", "STRING",  "1"  )
; For now the Applname ist not configurable in case of RPA type Workflows! 
; So in all cases where the application name is part of an output we should write: n/a !
$ApplName = "<n/a>"


;-------------------------------------------------------------------------------
;  Image processing settings       
;-------------------------------------------------------------------------------
StcEnableAutoBitsPerPixelFallback()                     


;-------------------------------------------------------------------------------
;  External Library Includes       
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
; Check if project uses AIS Functions. If so we call a special init to 
; precompile needed code. Otherwise first pattern search take more time than othhers!
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
;   Start of scheduler and measurement
; 
;-------------------------------------------------------------------------------
schedule()  ; !!! Ths is the main entry!!!!
   
;-------------------------------------------------------------------------------
; Start of Workflow
;   Measurement Workflows
;-------------------------------------------------------------------------------
Func measurement ()

  Local $LoopErrorHandling = 0
  Local $DoNotExecute = False

  __StcAisGlobalConfigs( $g__StcUseLegacyStaticAnalyseImages)
  
  OnWorkflowStart( "925a340c-3a10-482c-bfe5-7b5fb1b50ad9",  STC_GetWorkflowProtocolTemplate() )

  ;---------------------------------------------------------------------------
  ;  Master Daten Section
  ;-------------------------------------------------------------------------------
  ActionStepFeedbackEx( "1 ()", "Activity", "925a340c-3a10-482c-bfe5-7b5fb1b50ad9", "Info", "Process name    : Batch Document Uploader.", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "1 ()", "Activity", "925a340c-3a10-482c-bfe5-7b5fb1b50ad9", "Info", "Activity name   : 1.", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "1 ()", "Activity", "925a340c-3a10-482c-bfe5-7b5fb1b50ad9", "Info", "Workflow type is: " & StcGetWfeWorkflowType() & ".", @ScriptLineNumber ) 
  ActionStepFeedbackEx( "1 ()", "Activity", "925a340c-3a10-482c-bfe5-7b5fb1b50ad9", "Info", "Executed by user: '" & @UserName & "' at machine name: '" & @ComputerName & "'. OS-Version: " & @OSVersion & ".", @ScriptLineNumber ) 

  ;-------------------------------------------------------------------------------
  ;   Measurement Point INIT-Section 
  ;-------------------------------------------------------------------------------

  ; Simple Measurement Point Registration 
   
   ; Timer related Measurement Point Registration
   
   
 ;-----------------------------------------------------------------------
 ;# Start of Initialization Section: Workflow Initialization;
 ;-----------------------------------------------------------------------
 Local $__gStcInitSectionSuccess = True ; may set to false in one of the herein called init section AS
     
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Activity Parameters"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "0e736f80-c6c2-43fa-9841-26ca45fd2679", "Activity_Parameters", False, "EhNormal", @ScriptLineNumber)
   If True Then
   $LogfileIdent = 2 
   $TransStep = ("Activity Parameters")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of Activity Parameter Definitions: Activity Parameters;
   ;-----------------------------------------------------------------------
   Local $__AcitivtyParameter_Path = StcGetLogFileFolder() & "\InputActivityParameters.json"
   Local $__AcitivtyParameter_Success = __StcInitInParameters($__AcitivtyParameter_Path, "0e736f80-c6c2-43fa-9841-26ca45fd2679", @ScriptLineNumber, "Activity Parameters"    ) 
   Local $__AcitivtyParameter_Value ; the last retrieved value as it is used within the variable system. Intrinic is as it is, complex is Jason
   Local $__ActivityParameter_Display ; the value i an always readable format.
   
   If $__AcitivtyParameter_Success Then
   Local $__AcitivtyParameter_ReadSuccess = True;
      ; List of in variables 
   If Not $__AcitivtyParameter_ReadSuccess then  $__gStcInitSectionSuccess = False  ; set global error at init flag!
   
   
   ; Register process out variables:
   Else
      $__gStcInitSectionSuccess=False  ; set global error at init flag!
   Endif
   
   $Run = CheckErrorHandling(1, $__AcitivtyParameter_Success ? 1 : -1 , "0e736f80-c6c2-43fa-9841-26ca45fd2679", @ScriptLineNumber, "Activity Parameters"  ) 
   
   
   ;-----------------------------------------------------------------------
   ;## End of Activity Parameter Definitions: Activity Parameters;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "0e736f80-c6c2-43fa-9841-26ca45fd2679", true )
        
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Pattern Gallery"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "97cf88fc-9d2f-42d9-8f61-06d3bf00cedd", "Pattern_Gallery", True, "EhNormal", @ScriptLineNumber)
   If _StcVarSysValidateVarReference( "Pattern_Gallery", "97cf88fc-9d2f-42d9-8f61-06d3bf00cedd", @ScriptLineNumber, "EhNormal" ) Then
   $LogfileIdent = 2 
   $TransStep = ("Pattern Gallery")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of transaction step: Pattern Gallery;
   ;-----------------------------------------------------------------------
   $ErrorHandling = 1
   
   	
   
   ;-----------------------------------------------------------------------
   ;## End of transaction step: Pattern Gallery;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "97cf88fc-9d2f-42d9-8f61-06d3bf00cedd", true )
        
    If $__gStcInitSectionSuccess  Then  
         
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Settings"
   
   $OutboundVar_BasePathOut = Default 
     
   Global $AutoProp_BasePath = "%temp%", $AutoProp_BasePath_HasVarMapping = False 
   Global $AutoProp_RemoveBasePathSubfolderOnExit = True, $AutoProp_RemoveBasePathSubfolderOnExit_HasVarMapping = False   
   Global $AutoProp_GenerateSubFolder = True, $AutoProp_GenerateSubFolder_HasVarMapping = False   
   Global $AutoProp_UseAllowedPathsLimitation = False, $AutoProp_UseAllowedPathsLimitation_HasVarMapping = False   
   Global $AutoProp_ProxySettingAsInt = 0, $AutoProp_ProxySettingAsInt_HasVarMapping = False   
   Global $AutoProp_IsUseProxyAuthChecked = False, $AutoProp_IsUseProxyAuthChecked_HasVarMapping = False   
   Global $AutoProp_ProxyUrl = "", $AutoProp_ProxyUrl_HasVarMapping = False 
   Global $AutoProp_ProxyAccount = "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":"""",""Token"":"""",""Password"":"""",""CryptUser"":"""",""CryptPassword"":""""},""Name"":""Name"",""Id"":""5b61455f-7be6-4407-b618-968334eef701"",""Access"":""RW"",""Tags"":null}", $AutoProp_ProxyAccount_HasVarMapping = False   
   Global $AutoProp_ProxyAccountAsString = "{""Magic"":""$__ServiceTraceVariable__$"",""Content"":{""Type"":8,""UserName"":"""",""Token"":"""",""Password"":"""",""CryptUser"":"""",""CryptPassword"":""""},""Name"":""Name"",""Id"":""5b61455f-7be6-4407-b618-968334eef701"",""Access"":""RW"",""Tags"":null}", $AutoProp_ProxyAccountAsString_HasVarMapping = False 
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "e83d1549-028d-480d-b379-a26bc8d3d03f", "Settings", True, "EhNormal", @ScriptLineNumber)
   If _StcVarSysValidateVarReference( "Settings", "e83d1549-028d-480d-b379-a26bc8d3d03f", @ScriptLineNumber, "EhNormal" ) Then
   $LogfileIdent = 2 
   $TransStep = ("Settings")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;-----------------------------------------------------------------------
   ;## Start of transaction step: Settings;
   ;-----------------------------------------------------------------------
   $__gStcRemoveBasePathSubfolderOnExit = $AutoProp_RemoveBasePathSubfolderOnExit
   $translatedBasePath = TranslateText($AutoProp_BasePath)
   
   ;Handle run-sub folder generation & removal
   if $AutoProp_GenerateSubFolder then 
   $OutboundVar_BasePathOut = $translatedBasePath & "\" & $StcRunGuid & "\"
   ActionStepFeedbackEx("Workflow Settings","Action","e83d1549-028d-480d-b379-a26bc8d3d03f", "Info", "An additional subfolder: " & $StcRunGuid &" will be generated for the current workflow run.",0)
   _NgCoreLogAnnotationText( "e83d1549-028d-480d-b379-a26bc8d3d03f", "An additional subfolder: " & $StcRunGuid &" was generated for the current workflow run.")
   If True then
   ActionStepFeedbackEx("Workflow Settings","Action","e83d1549-028d-480d-b379-a26bc8d3d03f", "Info", "Removing Base Path subfolder on exit is enabled.",0)
   _NgCoreLogAnnotationText( "e83d1549-028d-480d-b379-a26bc8d3d03f", "Removing Base Path subfolder on exit was enabled.")
   else
   ActionStepFeedbackEx("Workflow Settings","Action","e83d1549-028d-480d-b379-a26bc8d3d03f", "Info", "Removing Base Path subfolder on exit is disabled.",0)
   EndIf
   
   else
   
   $OutboundVar_BasePathOut = $translatedBasePath & "\"
   
   EndIf
   
   
   
   ;Base Path registration
   If FileExists($translatedBasePath) Then
   
   	StcSetBasePathFolder($OutboundVar_BasePathOut)
   
   	Local $p_ResultText
   	Local $__Success = True ; local check for NgCore Call success
   	$__Success = __StcNgRegisterBasePath($OutboundVar_BasePathOut, $p_ResultText, "e83d1549-028d-480d-b379-a26bc8d3d03f",  @ScriptLineNumber, "Settings")
   
   	Local $__BasePathFeedbackType = $__Success ? "Info" : "Error"
   	Local $__BasePathMessage = $__Success ? "StwsBasePath registration for the current run succeeded: '" & $OutboundVar_BasePathOut & "'" _
   			  : ("StwsBasePath registration for the current run failed. Error details: " & $p_ResultText)
   
   	ActionStepFeedbackEx("Workflow Settings","Action","e83d1549-028d-480d-b379-a26bc8d3d03f", $__BasePathFeedbackType, $__BasePathMessage, 0)
   	_NgCoreLogAnnotationText( "e83d1549-028d-480d-b379-a26bc8d3d03f", $__BasePathMessage)
   
   	;Allowed paths registration
   	
   	If $__Success Then
   					__DisableAllowedPathsLimitation("e83d1549-028d-480d-b379-a26bc8d3d03f",  @ScriptLineNumber, "Settings")
   			writelog("Allowed Path Limitation for File Operations is disabled")
   			ActionStepFeedbackEx("Workflow Settings","Action","e83d1549-028d-480d-b379-a26bc8d3d03f", "Info", "Allowed Path Limitation for File Operations is disabled.",0)
   		
   		$__Success = __StcNgRegisterProxySettings($AutoProp_ProxySettingAsInt, $AutoProp_ProxyUrl, $AutoProp_IsUseProxyAuthChecked, $AutoProp_ProxyAccount, "e83d1549-028d-480d-b379-a26bc8d3d03f",  @ScriptLineNumber, "Settings")
   	EndIf
   
   	; if one of the allowed pahts calls failed, we go to error state, but only if error handling is enabled:
   	$__gStcInitSectionSuccess = CheckErrorHandling(1, $__Success ? 1 : -1 , "e83d1549-028d-480d-b379-a26bc8d3d03f", @ScriptLineNumber, "Settings" ) < 0 ? False : True
   	$__gStcGenerateSubBasePathFolder = $AutoProp_GenerateSubFolder
   
   	$Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "e83d1549-028d-480d-b379-a26bc8d3d03f", @ScriptLineNumber, "Settings"  ) 
   
   Else
   
   	ActionStepFeedbackEx("Workflow Settings","Action","e83d1549-028d-480d-b379-a26bc8d3d03f", "Error", "Base path does not exist: '" & $translatedBasePath & "'", 0)
   	_NgCoreLogAnnotationText( "e83d1549-028d-480d-b379-a26bc8d3d03f", "Base path does not exist: '" & $translatedBasePath & "'")
   	$__gStcInitSectionSuccess = False
   	$Run = -1;
   
   EndIf
   
   
   ;-----------------------------------------------------------------------
   ;## End of transaction step: Settings;
   ;-----------------------------------------------------------------------
   
   
   EndIf  
     Global $Settings_BasePath = $OutboundVar_BasePathOut  ; declare variable source. Will be referenced by other action steps 
   
   ;---------<[ End of debug suffix section!  ]>------------------
 
    EndIf
    OnEndOfInitSectionItem( "e83d1549-028d-480d-b379-a26bc8d3d03f", true )
       
 OnEndOfInitSection( "9acb5337-7481-49e9-b661-d51deba2e384", true )
 ; Now it's save to enable the protector, because it may use variables defined by SBVs!
 StcProtectorEnable()
 ;-----------------------------------------------------------------------
 ;# End of Initialization Section: Workflow Initialization;
 ;-----------------------------------------------------------------------
  

   
 ;----------------<-----------------------------------------------------------
 ;--------------<
 ;------------<   Measurement: <Activity Workflow>
 ;--------------< 
 ;----------------<-----------------------------------------------------------
    Global $MeasurementName = "Activity Workflow"
    Global $Pass_Activity_Workflow
    Global $UsedErrorCycles = 0
    Global $g_LastControlBlockLevelName = ""
    Global $g_ControlBlockLevelName = "MainMeasurement"
    Global $PrepareCodeSuccess = True
    Global $MeasurementOverallTimeTimer = TimerStart()
    
    ; Set Default current measurement iteration!
    $enter = 1
 
    ; set default uuid as default uuid for actioin feedback:
    ActionFeedbackSetDefaultUuid("1ea1e082-d894-43a7-a028-2ace0fcda713")
    ; Inform user about the disabled STC-Guard. In case of Design Mode run, the Guard may also disabled!
    If $StcDisableGuard Then ActionStepFeedbackEx( "StcGuardMode", "Action", default, "Warning", "The STC Guard is disabled by project setting.!", @ScriptLineNumber )
 
    
    StcSetGeneralTimeout( 1, True ) ;called internally!
    $g_StcMaxConfiguredExecutionTries = 1   ; internal STC funclib used value
    Local $errorcycles = $g_StcMaxConfiguredExecutionTries              ;  old legacy name, may removed in the future!
    ActionStepFeedbackEx( "Activity Workflow", "Workflow", "1ea1e082-d894-43a7-a028-2ace0fcda713", "Info", "///-[ Workflow: 'Activity Workflow' started ]-\\\", @ScriptLineNumber ) 
    If StcIsDesignModeActive()  Then
       If $g_StcMaxConfiguredExecutionTries <> 1 Then
         $g_StcMaxConfiguredExecutionTries = 1
         ActionStepFeedbackEx( "Activity Workflow", "Workflow", "1ea1e082-d894-43a7-a028-2ace0fcda713", "Warning", "The workflow was started from WorkflowEditor in Design mode. Retries reduced to 1.", @ScriptLineNumber ) 
       EndIf
    EndIf
    Local $retrydelay = 60
 
    OnMeasurementStart( $MeasurementName, "1ea1e082-d894-43a7-a028-2ace0fcda713" )
    
 
    
    ;<<<<<<<<<<<<<       P r e p a r e  -- S e c t i o n    >>>>>>>>>>>>>>>>>>>>
    ; Some action steps may have prepare code which must be executed before the measurement starts.
 
 
    Do
       Local  $x = 0
       $Run = 1  ; don't make that local or global !!!
 
       ; if prepare code failed, so do abort workflow before it was started!
       If Not $PrepareCodeSuccess Then $Run = -1
         
       ;---------------------------------------------------------------------------
       ; Applications values
       ;---------------------------------------------------------------------------
       
             
       _StcTraDaHandleErrors() ; check here if TraceData Bridge error has occurred! If so script will be terminated!
 
       
       ;---------------------------------------------------------------------------
       ; Check if one of the InitSection AS has failed. If so, write action step feadback a terminate workflow run!
       If Not $__gStcInitSectionSuccess  Then
         ActionStepFeedbackEx( "Activity Workflow", "Workflow", "1ea1e082-d894-43a7-a028-2ace0fcda713", "Error", "One of the steps in the initialize section has failed, so further execution is not possible!", @ScriptLineNumber ) 
         $Run = -1 ; abort further execution!
       EndIf
 
       ;---------------------------------------------------------------------------
       ; Start of Workflow
       ;---------------------------------------------------------------------------
       $Errortext = ""
   
       If $run > 0 AND NOT OnCheckAbortState() Then
          OnMeasurementBlockStart("Transaction", "d8bd5ba9-77a0-4a78-9fa8-8e429e2a6b61", 1, "Transaction")
            
   ;---------<[ Auto generated WFE debug prefix section!  ]>------
   _StcVarSysResetValidation()
   $AsLastResultValue = $AsResultValue
   $AsLastResultInfo  = $AsResultInfo
   $AsResultValue = 0
   $AsResultInfo  = "no Info"
   $g_LastAction = "Transaction"
   
     
   
   _DbgSetCurrentLevel( 2 )
   OnPrefixCodeExecuted( "d8bd5ba9-77a0-4a78-9fa8-8e429e2a6b61", "Transaction", False, "$Dbg.Item.ActivityErrorHandling", @ScriptLineNumber)
   If True Then
   $LogfileIdent = 2 
   $TransStep = ("Transaction")
   Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
   $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
   ;---------<[ End of debug prefix section!  ]>------------------
   
   ;---------------------------------------------------------------------------
   ;## Start of Transaction: Transaction;
   ;---------------------------------------------------------------------------
   
   OnTransactionStart("Transaction", "d8bd5ba9-77a0-4a78-9fa8-8e429e2a6b61")
   $g_LastControlBlockLevelName = $g_ControlBlockLevelName
   $g_ControlBlockLevelName = "Transaction"
   
   $__gStcTransactionSqx += 1
   $g_TransAction = "Transaction" 
   $TransStep = "Transaction"
   
      ; Actionstep: 'Run Program' is  disabled . No code generated!
   
      ; Actionstep: 'AI OCR (screen-based)' is  disabled . No code generated!
   
      ; Actionstep: 'Mouse Actions' is  disabled . No code generated!
   
      ; Actionstep: 'Web Session (Chrome)' is  disabled . No code generated!
   
   If CheckBlockIteration() Then
      OnActionStart("Excel Session", "c9932f49-c8c3-424f-bef1-6990e87312e9", 2, "Excel Session")
         
      ;---------<[ Auto generated WFE debug prefix section!  ]>------
      _StcVarSysResetValidation()
      $AsLastResultValue = $AsResultValue
      $AsLastResultInfo  = $AsResultInfo
      $AsResultValue = 0
      $AsResultInfo  = "no Info"
      $g_LastAction = "Excel Session (Excel Session - Read and write to the same file)"
      
        
      Global $AutoProp_DirectoryPathSource = "C:\Users\RPA\Downloads", $AutoProp_DirectoryPathSource_HasVarMapping = False 
      Global $AutoProp_FileNameSource = "Missing 六聯單 Upload.xlsx", $AutoProp_FileNameSource_HasVarMapping = False 
      Global $AutoProp_UseSeperateExecutionPathSource = False, $AutoProp_UseSeperateExecutionPathSource_HasVarMapping = False   
      Global $AutoProp_SeperateExecutionPathSource = "", $AutoProp_SeperateExecutionPathSource_HasVarMapping = False 
      Global $AutoProp_UseSeperateExecutionFileNameSource = False, $AutoProp_UseSeperateExecutionFileNameSource_HasVarMapping = False   
      Global $AutoProp_SeperateExecutionFileNameSource = "", $AutoProp_SeperateExecutionFileNameSource_HasVarMapping = False 
      Global $AutoProp_DirectoryPathDestination = "%STWS_BASEPATH%", $AutoProp_DirectoryPathDestination_HasVarMapping = False 
      Global $AutoProp_FileNameDestination = "", $AutoProp_FileNameDestination_HasVarMapping = False 
      Global $AutoProp_CreateDstIfNotExists = False, $AutoProp_CreateDstIfNotExists_HasVarMapping = False   
      Global $AutoProp_SheetToBeCreated = "", $AutoProp_SheetToBeCreated_HasVarMapping = False 
      Global $AutoProp_UseSeperateExecutionPathDestination = False, $AutoProp_UseSeperateExecutionPathDestination_HasVarMapping = False   
      Global $AutoProp_SeperateExecutionPathDestination = "", $AutoProp_SeperateExecutionPathDestination_HasVarMapping = False 
      Global $AutoProp_UseSeperateExecutionFileNameDestination = False, $AutoProp_UseSeperateExecutionFileNameDestination_HasVarMapping = False   
      Global $AutoProp_SeperateExecutionFileNameDestination = "", $AutoProp_SeperateExecutionFileNameDestination_HasVarMapping = False 
      Global $AutoProp_ExcelSessionNameAsString = "Excel_Session", $AutoProp_ExcelSessionNameAsString_HasVarMapping = False 
      Global $AutoProp_ExcelOperationModeAsInt = 1, $AutoProp_ExcelOperationModeAsInt_HasVarMapping = False   
      Global $AutoProp_UseGeneralTimeout = True, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
      Global $AutoProp_Timeout = 1, $AutoProp_Timeout_HasVarMapping = False   
      
      _DbgSetCurrentLevel( 3 )
      OnPrefixCodeExecuted( "c9932f49-c8c3-424f-bef1-6990e87312e9", "Excel_Session_28Excel_Session_2D_Read_and_write_to_the_same_file29", True, "EhNormal", @ScriptLineNumber)
      If _StcVarSysValidateVarReference( "Excel_Session_28Excel_Session_2D_Read_and_write_to_the_same_file29", "c9932f49-c8c3-424f-bef1-6990e87312e9", @ScriptLineNumber, "EhNormal" ) Then
      $LogfileIdent = 3 
      $TransStep = ("Excel Session (Excel Session - Read and write to the same file)")
      Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
      $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
      ;---------<[ End of debug prefix section!  ]>------------------
      
      ;-----------------------------------------------------------------------
      ;### Start of transaction step: Excel Session (Excel Session - Read and write to the same file);
      ;-----------------------------------------------------------------------
      $g_LastControlBlockLevelName = $g_ControlBlockLevelName
      $g_ControlBlockLevelName = "Excel Session (Excel Session - Read and write to the same file)"
      
      Local $Excel_Timeout = $AutoProp_UseGeneralTimeout ? StcGetGeneralTimeout() : $AutoProp_Timeout
      
      Local $HasActionStepError = False, $__SuccessSource, $__SuccessDst = True, $SourceActionHandle
      
      Global $Excel_Session_SourceActionHandle, $Excel_Session_DestinationActionHandle
      
      If $AutoProp_ExcelOperationModeAsInt >= 0 Then  ; Read only mode
      
      	Local $translatedDirectoryPathSource = TranslateText($AutoProp_DirectoryPathSource), $translateSeperateExecutionPathSource = TranslateText($AutoProp_SeperateExecutionPathSource)
      
      	$__SuccessSource = __StcNgCreateSourceExcelSession( String($translatedDirectoryPathSource), _
      	String($AutoProp_FileNameSource), _
      	$AutoProp_UseSeperateExecutionPathSource, _
      	String($translateSeperateExecutionPathSource), _
      	$AutoProp_UseSeperateExecutionFileNameSource, _
      	String($AutoProp_SeperateExecutionFileNameSource), _
      	$Excel_Timeout, _
      	$SourceActionHandle, _
      	"c9932f49-c8c3-424f-bef1-6990e87312e9", @ScriptLineNumber, "Excel Session (Excel Session - Read and write to the same file)") 
      
      	; Session Code  (activityName => ExcelSessionName!)
      	$Excel_Session_SourceActionHandle = $SourceActionHandle  ; Setze die ActionHandle
      EndIf
      
      If $AutoProp_ExcelOperationModeAsInt = 1 Then  ; Read and Write to source file
      	; Session Code  (activityName => ExcelSessionName!)
      	$Excel_Session_DestinationActionHandle = $SourceActionHandle  ; Setze die ActionHandle
      EndIf
      
      If $AutoProp_ExcelOperationModeAsInt = 2 And $__SuccessSource Then  ; Read and write to new destination file
      
      	Local $DestinationActionHandle = 0
      
      	Local $translateDirectoryDestination = TranslateText($AutoProp_DirectoryPathDestination), $translateDirectorySeparateDestination = TranslateText($AutoProp_SeperateExecutionPathDestination)
      	Local $translateDirectorySource = TranslateText($AutoProp_DirectoryPathSource), $translateDirectorySeparateSource = TranslateText($AutoProp_SeperateExecutionPathSource)
      	$__SuccessDst = __StcNgCreateDestinationExcelSession( String($translateDirectoryDestination), _
      														String($AutoProp_FileNameDestination), _
      														$AutoProp_UseSeperateExecutionPathDestination, _
      														String($translateDirectorySeparateDestination), _
      														$AutoProp_UseSeperateExecutionFileNameDestination, _
      														String($AutoProp_SeperateExecutionFileNameDestination), _
      														$AutoProp_CreateDstIfNotExists, _
      														$AutoProp_SheetToBeCreated, _
      														$Excel_Timeout, _
      														$DestinationActionHandle, _
      														String($translateDirectorySource), _
      														$AutoProp_UseSeperateExecutionPathSource, _
      														String($AutoProp_FileNameSource), _
      														String($translateDirectorySeparateSource), _
      														$AutoProp_UseSeperateExecutionFileNameSource, _
      														String($AutoProp_SeperateExecutionFileNameSource), _
      														"c9932f49-c8c3-424f-bef1-6990e87312e9",  @ScriptLineNumber, "Excel Session (Excel Session - Read and write to the same file)") 	
      			
      		; Session Code  (activityName => ExcelSessionName!)
      	$Excel_Session_DestinationActionHandle = $DestinationActionHandle  ; Setze die ActionHandle
      EndIf
      
      Local $__Success = $__SuccessSource And $__SuccessDst
      If $__Success Then
      	;-------------------------------------------------------------------------------------------
      	; 	
      		If CheckBlockIteration() Then
      		OnActionStart("Read from Excel File", "54860e64-3cd5-4312-a1d6-7b9fe11e4414", 3, "Read from Excel File")
      		    
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Read from Excel File (Read from Excel File - Read mode Column)"
          
          $OutboundVar_Result = Default 
          $OutboundVar_ResultAsArray = Default 
          $OutboundVar_HasContent = Default 
            
          Global $AutoProp_Column = "C", $AutoProp_Column_HasVarMapping = False 
          Global $AutoProp_Row = 1, $AutoProp_Row_HasVarMapping = False   
          Global $AutoProp_ModeAsInt = 2, $AutoProp_ModeAsInt_HasVarMapping = False   
          Global $AutoProp_SheetName = "sheet1", $AutoProp_SheetName_HasVarMapping = False 
          Global $AutoProp_UseGeneralTimeout = False, $AutoProp_UseGeneralTimeout_HasVarMapping = False   
          Global $AutoProp_Timeout = 30, $AutoProp_Timeout_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "54860e64-3cd5-4312-a1d6-7b9fe11e4414", "Read_from_Excel_File_28Read_from_Excel_File_2D_Read_mode_Column29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Read_from_Excel_File_28Read_from_Excel_File_2D_Read_mode_Column29", "54860e64-3cd5-4312-a1d6-7b9fe11e4414", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Read from Excel File (Read from Excel File - Read mode Column)")
          Local $__StcTempActionStepSqx = INT("1")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Read from Excel File (Read from Excel File - Read mode Column);
          ;-----------------------------------------------------------------------
          
          $read_excel_timeout = $AutoProp_UseGeneralTimeout ? StcGetGeneralTimeout() : $AutoProp_Timeout
          
          Local $p_HasContent, $p_Result, $p_ResultAsArray, $SessionActionHandle = Eval("Excel_Session" & "_SourceActionHandle")
          
          Local $__Success = __StcNgReadExcelFile( $SessionActionHandle, _
                                                  $AutoProp_SheetName, _
                                                  $AutoProp_ModeAsInt, _
                                                  $AutoProp_Column, _
                                                  $AutoProp_Row, _
          									    $read_excel_timeout, _
                                                  $p_HasContent, _
                                                  $p_Result, _
          										$p_ResultAsArray, _
                                                  "54860e64-3cd5-4312-a1d6-7b9fe11e4414",  @ScriptLineNumber, "Read from Excel File (Read from Excel File - Read mode Column)") 
          
          $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "54860e64-3cd5-4312-a1d6-7b9fe11e4414", @ScriptLineNumber, "Read from Excel File (Read from Excel File - Read mode Column)"  ) 
          
          $OutboundVar_HasContent = $p_HasContent = "true" ? true : false
          $OutboundVar_Result = $p_Result
          $OutboundVar_ResultAsArray = $p_ResultAsArray
          
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Read from Excel File (Read from Excel File - Read mode Column);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Read_from_Excel_File_Result = $OutboundVar_Result  ; declare variable source. Will be referenced by other action steps 
           Global $Read_from_Excel_File_ResultAsArray = $OutboundVar_ResultAsArray  ; declare variable source. Will be referenced by other action steps 
           Global $Read_from_Excel_File_HasContent = $OutboundVar_HasContent  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
      		OnActionEnd("Read from Excel File", $run, "54860e64-3cd5-4312-a1d6-7b9fe11e4414", 3, "Read from Excel File")
      		EndIf
      			
      		If CheckBlockIteration() Then
      		OnActionStart("Get Array Count", "154e54e0-7381-4418-8fd3-afe6a0d61636", 3, "Get Array Count")
      		    
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Get Array Count (Get Array Count mapped to Read from Excel File.ResultAsArray)"
          
          $OutboundVar_ArrayCount = Default 
            
          Global $AutoProp_Variable = _StcVarSysResolveVarReference( "Read_from_Excel_File_ResultAsArray"), $AutoProp_Variable_HasVarMapping = True 
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "154e54e0-7381-4418-8fd3-afe6a0d61636", "Get_Array_Count_28Get_Array_Count_mapped_to_Read_from_Excel_File2EResultAsArray29", True, "EhNormal", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Get_Array_Count_28Get_Array_Count_mapped_to_Read_from_Excel_File2EResultAsArray29", "154e54e0-7381-4418-8fd3-afe6a0d61636", @ScriptLineNumber, "EhNormal" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Get Array Count (Get Array Count mapped to Read from Excel File.ResultAsArray)")
          Local $__StcTempActionStepSqx = INT("2")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          ;-----------------------------------------------------------------------
          ;#### Start of transaction step: Get Array Count (Get Array Count mapped to Read from Excel File.ResultAsArray);
          ;-----------------------------------------------------------------------
          
          Local $p_ArrayCount, $p_ReturnCode
          
          Local $__Success = __StcNgVsGetArrayCount( $AutoProp_Variable, _
                                                  $p_ArrayCount, _
                                                  $p_ReturnCode, _
                                                  "154e54e0-7381-4418-8fd3-afe6a0d61636",  @ScriptLineNumber, "Get Array Count (Get Array Count mapped to Read from Excel File.ResultAsArray)")  
          
          $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "154e54e0-7381-4418-8fd3-afe6a0d61636", @ScriptLineNumber, "Get Array Count (Get Array Count mapped to Read from Excel File.ResultAsArray)"  ) 
          
          
          $OutboundVar_ArrayCount = $p_ArrayCount
          
          ;-----------------------------------------------------------------------
          ;#### End of transaction step: Get Array Count (Get Array Count mapped to Read from Excel File.ResultAsArray);
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Get_Array_Count_Array_Count = $OutboundVar_ArrayCount  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
      		OnActionEnd("Get Array Count", $run, "154e54e0-7381-4418-8fd3-afe6a0d61636", 3, "Get Array Count")
      		EndIf
      			
      		If CheckBlockIteration() Then
      		OnActionStart("Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", 3, "Loop")
      		    
          ;---------<[ Auto generated WFE debug prefix section!  ]>------
          _StcVarSysResetValidation()
          $AsLastResultValue = $AsResultValue
          $AsLastResultInfo  = $AsResultInfo
          $AsResultValue = 0
          $AsResultInfo  = "no Info"
          $g_LastAction = "Loop"
          
          $OutboundVar_Iteration = Default 
            
          Global $AutoProp_IterationCount = _StcVarSysResolveVarReference( "Get_Array_Count_Array_Count"), $AutoProp_IterationCount_HasVarMapping = True 
          Global $AutoProp_InitialValue = 2, $AutoProp_InitialValue_HasVarMapping = False   
          Global $AutoProp_IncrementValue = 1, $AutoProp_IncrementValue_HasVarMapping = False   
          
          _DbgSetCurrentLevel( 4 )
          OnPrefixCodeExecuted( "0c82de7b-a489-4d83-8325-e077bebb2514", "Loop", True, "$Dbg.Item.ActivityErrorHandling", @ScriptLineNumber)
          If _StcVarSysValidateVarReference( "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", @ScriptLineNumber, "$Dbg.Item.ActivityErrorHandling" ) Then
          $LogfileIdent = 4 
          $TransStep = ("Loop")
          Local $__StcTempActionStepSqx = INT("$Dbg.Item.StepNumber")
          $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
          ;---------<[ End of debug prefix section!  ]>------------------
          
          Local $Loop__IterationCount = $AutoProp_IterationCount
          
          ;~ Check if InBound Variables are integer
          If IsInt($AutoProp_InitialValue) <> 1 Then
          	$run = -1 
          	ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Error", "Loop not executed : The initial value '" & $AutoProp_InitialValue & "' is not a number.", @ScriptLineNumber ) 
          EndIf
          If IsInt($Loop__IterationCount) <> 1 Then
          	$run = -1 
          	ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Error", "Loop not executed: The iteration count '" & $Loop__IterationCount & "' is not a number.", @ScriptLineNumber ) 
          EndIf
          If IsInt($AutoProp_IncrementValue) <> 1 Then
          	$run = -1 
          	ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Error", "Loop not executed: The increment value '" & $AutoProp_IncrementValue & "' is not a number.", @ScriptLineNumber ) 
          EndIf
          
          Local $l_EndValue = $AutoProp_InitialValue + ($Loop__IterationCount*$AutoProp_IncrementValue) - ($Loop__IterationCount * $AutoProp_IncrementValue < 0 ? -1 : 1)
          
          ;-----------------------------------------------------------------------
          ;#### Start of Loop: Loop;
          ;-----------------------------------------------------------------------
          $LogfileIdent = 4
          $g_LastControlBlockLevelName = $g_ControlBlockLevelName
          $g_ControlBlockLevelName = "Loop"
          $BreakLoopWithError = False  
          $BreakNextLoop      = False  
          $__StcLoopIter_i = 0
          ; Variables unique for each nested loop:
          Local $Loop__StartedLoopIterations = 0
          
          If $Loop__IterationCount > 2147483647 OR $Loop__IterationCount < 0 Then
          	$run = -1 
          	ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Error", "Loop not executed: The iteration count " & $Loop__IterationCount & " is out of range. The loops increment value must be betweeen 1 and 2147483647.", @ScriptLineNumber ) 
          EndIf
          If $AutoProp_IncrementValue > 2147483647 OR $AutoProp_IncrementValue < -2147483648 Then
          	$run = -1
          	ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Error", "Loop not executed: The increment value " & $AutoProp_IncrementValue & " is out of range. The loops increment value must be betweeen -2147483648 and 2147483647.", @ScriptLineNumber ) 
          EndIf
          If $AutoProp_InitialValue > 2147483647 OR $AutoProp_InitialValue < -2147483648 Then
          	$run = -1
          	ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Error", "Loop not executed: The initial value " & $AutoProp_InitialValue & " is out of range. The loops initial value must be betweeen -2147483648 and 2147483647.", @ScriptLineNumber ) 
          EndIf
          If $l_EndValue > 2147483647 OR $l_EndValue < -2147483648 Then
          	$run = -1
          	ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Error", "Loop not executed: The calculated end value " & $l_EndValue & " is out of range. The loops end value must be betweeen -2147483648 and 2147483647.", @ScriptLineNumber ) 
          EndIf
          
          
          If $run <> -1 Then
          	For $__StcLoopIter_i = $AutoProp_InitialValue to $l_EndValue Step $AutoProp_IncrementValue
          		writelog("[Loop: Loop] Start Iteration with value: " & $__StcLoopIter_i & "]",4)
          		OnStartLoopIteration("0c82de7b-a489-4d83-8325-e077bebb2514")
          		$Loop__StartedLoopIterations += 1
          
          		
          		Local  $i = $__StcLoopIter_i   ; for backward compatibility to WFE < V3.0; Note: Simple $i may result in name clashes with External Script $i variables! 
          		Global $Loop = $__StcLoopIter_i  			 ; support for old inline variable
          		Global $Loop_Iteration = $Loop ; support vor new variable system
          
          				
          		; Actionstep: 'String to Array' is  disabled . No code generated!
          				If OnCheckAbortState() Then
          			If Not _StcIsUserExitCausedBy_ExitOk() AND Not _StcIsStatusExitCode() Then
          				$run = -1
          			EndIf
          			ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Info", "Loop exit in Iteration " & $Loop__StartedLoopIterations & " time(s) of " & $Loop__IterationCount & ".", @ScriptLineNumber )  
          			writelog("[Exit Loop: Workflow was left due to the Action Step Exit Workflow.] User initiated exit workflow", 4)
          			ExitLoop
          		EndIf
          
          		If $run < 0 Then
          			Switch 2 ; After V1.1 RC7 we decide to hide this function for now, maybe comes back in the future.... (static value is 2!)
          				Case 0    ; do nothing
          					Sleep(0)
          				Case 1  ; continue on head
          					$run = 1
          					ContinueLoop
          				Case 2  ; exit loop with error (for now the only possible case!)
          					$run = -1
          					$DoNotExecute = True
          					writelog("[Exit Loop: Loop with error.] Reason is an error at String to Array: String to Array",4)
          					OnEndLoopIteration("0c82de7b-a489-4d83-8325-e077bebb2514")
          					ExitLoop
          				Case 3  ; exit loop w/o error
          					$run = 1
          					$DoNotExecute = True
          					writelog("[Exit Loop: Loop with ignored error state.] Reason is an error at String to Array: String to Array",4)
          					OnEndLoopIteration("0c82de7b-a489-4d83-8325-e077bebb2514")
          					ExitLoop
          			EndSwitch
          		EndIf
          				
          			If CheckBlockIteration() Then
          				OnActionStart("String Operations", "2d020a4c-22fa-4caf-81cb-9bbfa513a49d", 4, "String Operations")
          				     
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "String Operations"
               
               $OutboundVar_Result = Default 
                 
               Global $AutoProp_StringOperationTypeAsInt = 2, $AutoProp_StringOperationTypeAsInt_HasVarMapping = False   
               Global $AutoProp_InputString = _StcVarSysResolveVarReference( "Loop_Iteration"), $AutoProp_InputString_HasVarMapping = True 
               Global $AutoProp_StringToFind = "", $AutoProp_StringToFind_HasVarMapping = False 
               Global $AutoProp_StringToReplaceWith = "", $AutoProp_StringToReplaceWith_HasVarMapping = False 
               Global $AutoProp_NumberOfCharacters = 10, $AutoProp_NumberOfCharacters_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "2d020a4c-22fa-4caf-81cb-9bbfa513a49d", "String_Operations", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "String_Operations", "2d020a4c-22fa-4caf-81cb-9bbfa513a49d", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("String Operations")
               Local $__StcTempActionStepSqx = INT("3")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
               
               ;-----------------------------------------------------------------------
               ;##### Start of transaction step: String Operations;
               ;-----------------------------------------------------------------------
               
               Global $String_Operations_out_Success
               Global $String_Operations_out_Result
               
               Local $__Success = __StcNgPerformStringOperation( _
                                           $AutoProp_StringOperationTypeAsInt, _
                                           $AutoProp_InputString, _
                                           $AutoProp_StringToFind, _
                                           $AutoProp_StringToReplaceWith, _
                                           $AutoProp_NumberOfCharacters, _
                                           $String_Operations_out_Success, _
                                           $String_Operations_out_Result, _
                                           "2d020a4c-22fa-4caf-81cb-9bbfa513a49d",  @ScriptLineNumber, "String Operations")  
               $Run = CheckErrorHandling(1, $__Success ? 1 : -1 , "2d020a4c-22fa-4caf-81cb-9bbfa513a49d", @ScriptLineNumber, "String Operations"  ) 
               
               $OutboundVar_Result = $String_Operations_out_Result
               
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: String Operations;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                 Global $String_Operations_Result = $OutboundVar_Result  ; declare variable source. Will be referenced by other action steps 
               
               ;---------<[ End of debug suffix section!  ]>------------------
          
          				OnActionEnd("String Operations", $run, "2d020a4c-22fa-4caf-81cb-9bbfa513a49d", 4, "String Operations")
          			EndIf
          				If OnCheckAbortState() Then
          			If Not _StcIsUserExitCausedBy_ExitOk() AND Not _StcIsStatusExitCode() Then
          				$run = -1
          			EndIf
          			ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Info", "Loop exit in Iteration " & $Loop__StartedLoopIterations & " time(s) of " & $Loop__IterationCount & ".", @ScriptLineNumber )  
          			writelog("[Exit Loop: Workflow was left due to the Action Step Exit Workflow.] User initiated exit workflow", 4)
          			ExitLoop
          		EndIf
          
          		If $run < 0 Then
          			Switch 2 ; After V1.1 RC7 we decide to hide this function for now, maybe comes back in the future.... (static value is 2!)
          				Case 0    ; do nothing
          					Sleep(0)
          				Case 1  ; continue on head
          					$run = 1
          					ContinueLoop
          				Case 2  ; exit loop with error (for now the only possible case!)
          					$run = -1
          					$DoNotExecute = True
          					writelog("[Exit Loop: Loop with error.] Reason is an error at String Operations: String Operations",4)
          					OnEndLoopIteration("0c82de7b-a489-4d83-8325-e077bebb2514")
          					ExitLoop
          				Case 3  ; exit loop w/o error
          					$run = 1
          					$DoNotExecute = True
          					writelog("[Exit Loop: Loop with ignored error state.] Reason is an error at String Operations: String Operations",4)
          					OnEndLoopIteration("0c82de7b-a489-4d83-8325-e077bebb2514")
          					ExitLoop
          			EndSwitch
          		EndIf
          				
          			If CheckBlockIteration() Then
          				OnActionStart("Message Box1", "e5832028-b817-42e7-8a8a-febcb331f16c", 4, "Message Box")
          				     
               ;---------<[ Auto generated WFE debug prefix section!  ]>------
               _StcVarSysResetValidation()
               $AsLastResultValue = $AsResultValue
               $AsLastResultInfo  = $AsResultInfo
               $AsResultValue = 0
               $AsResultInfo  = "no Info"
               $g_LastAction = "Message Box1"
               
                 
               Global $AutoProp_Title = "123", $AutoProp_Title_HasVarMapping = False 
               Global $AutoProp_Text = _StcVarSysResolveVarReference( "String_Operations_Result"), $AutoProp_Text_HasVarMapping = True 
               Global $AutoProp_Timeout = 10, $AutoProp_Timeout_HasVarMapping = False   
               Global $AutoProp_UseTimeout = True, $AutoProp_UseTimeout_HasVarMapping = False   
               Global $AutoProp_WinFlags = 4096, $AutoProp_WinFlags_HasVarMapping = False   
               
               _DbgSetCurrentLevel( 5 )
               OnPrefixCodeExecuted( "e5832028-b817-42e7-8a8a-febcb331f16c", "Message_Box1", True, "EhNormal", @ScriptLineNumber)
               If _StcVarSysValidateVarReference( "Message_Box1", "e5832028-b817-42e7-8a8a-febcb331f16c", @ScriptLineNumber, "EhNormal" ) Then
               $LogfileIdent = 5 
               $TransStep = ("Message Box1")
               Local $__StcTempActionStepSqx = INT("4")
               $__gStcActionStepSqx = $__StcTempActionStepSqx = 0 ? $__gStcActionStepSqx : $__StcTempActionStepSqx   ; Sqx is 0 for block elements, so don't set an new number!
               ;---------<[ End of debug prefix section!  ]>------------------
                
               ;-----------------------------------------------------------------------
               ;##### Start of XXXX MessageBox step: Message Box1;
               ;-----------------------------------------------------------------------
               $ErrorHandling = 1
               
               If $run > 0 Then
                  If $AutoProp_UseTimeout Then
                     StcAsMsgBox($AutoProp_WinFlags, $AutoProp_Title, $AutoProp_Text, $AutoProp_Timeout)
                     ActionStepFeedbackEx( "Message Box1", "MessageBox", "e5832028-b817-42e7-8a8a-febcb331f16c", "Info", "Messagebox '" & $AutoProp_Title & "' displayed. Closed automatically after " & $AutoProp_Timeout & "seconds. ", @ScriptLineNumber )
                  Else
                     StcAsMsgBox($AutoProp_WinFlags, $AutoProp_Title, $AutoProp_Text)
                     ActionStepFeedbackEx( "Message Box1", "MessageBox", "e5832028-b817-42e7-8a8a-febcb331f16c", "Warning", "Messagebox '" & $AutoProp_Title & "' displayed. No auto close activated! Must be closed manually by user action.", @ScriptLineNumber )
                  Endif
                  _NgCoreLogAnnotationText( "e5832028-b817-42e7-8a8a-febcb331f16c", "Text: " & $AutoProp_Text)
               EndIf
               ;-----------------------------------------------------------------------
               ;##### End of transaction step: Message Box1;
               ;-----------------------------------------------------------------------
               
               
               EndIf  
                
               ;---------<[ End of debug suffix section!  ]>------------------
          
          				OnActionEnd("Message Box1", $run, "e5832028-b817-42e7-8a8a-febcb331f16c", 4, "Message Box")
          			EndIf
          				If OnCheckAbortState() Then
          			If Not _StcIsUserExitCausedBy_ExitOk() AND Not _StcIsStatusExitCode() Then
          				$run = -1
          			EndIf
          			ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Info", "Loop exit in Iteration " & $Loop__StartedLoopIterations & " time(s) of " & $Loop__IterationCount & ".", @ScriptLineNumber )  
          			writelog("[Exit Loop: Workflow was left due to the Action Step Exit Workflow.] User initiated exit workflow", 4)
          			ExitLoop
          		EndIf
          
          		If $run < 0 Then
          			Switch 2 ; After V1.1 RC7 we decide to hide this function for now, maybe comes back in the future.... (static value is 2!)
          				Case 0    ; do nothing
          					Sleep(0)
          				Case 1  ; continue on head
          					$run = 1
          					ContinueLoop
          				Case 2  ; exit loop with error (for now the only possible case!)
          					$run = -1
          					$DoNotExecute = True
          					writelog("[Exit Loop: Loop with error.] Reason is an error at Message Box: Message Box1",4)
          					OnEndLoopIteration("0c82de7b-a489-4d83-8325-e077bebb2514")
          					ExitLoop
          				Case 3  ; exit loop w/o error
          					$run = 1
          					$DoNotExecute = True
          					writelog("[Exit Loop: Loop with ignored error state.] Reason is an error at Message Box: Message Box1",4)
          					OnEndLoopIteration("0c82de7b-a489-4d83-8325-e077bebb2514")
          					ExitLoop
          			EndSwitch
          		EndIf
          		
          		ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Info", "Loop passed " & $Loop__StartedLoopIterations & " time(s) of " & $Loop__IterationCount & ". Loop value: " & $__StcLoopIter_i, @ScriptLineNumber )   
          		OnEndLoopIteration("0c82de7b-a489-4d83-8325-e077bebb2514")
          
          		If $BreakNextLoop Then exitloop
          
          		writelog("[Loop: Loop] End of loop iteration with value: " & $__StcLoopIter_i & "]",4)
          	Next
          EndIf
          
          If $BreakNextLoop Then  
              If $BreakLoopWithError Then 
                 $run = -1
                 ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Error", "Loop was interrupted in iteration " & $Loop__StartedLoopIterations & " due a BreakLoop action item. Error state is explicitly set.", @ScriptLineNumber ) 
              Else
                 ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Warning", "Loop was interrupted in iteration " & $Loop__StartedLoopIterations & " due a BreakLoop action item. Error state is untouched.", @ScriptLineNumber ) 
              EndIf
          Else
          			writelog("[End Loop: Loop]",4)
          		
          	If $run = -1 Then
          		ActionStepFeedbackEx( "Loop", "Loop", "0c82de7b-a489-4d83-8325-e077bebb2514", "Warning", "Option 'Loop ends with error' is set, so Loop was exited after iteration " & $Loop__StartedLoopIterations & " with error state set true.", @ScriptLineNumber ) 
          	EndIF
          EndIf
          
          OnEndLoopExecuted( "0c82de7b-a489-4d83-8325-e077bebb2514", $Loop__StartedLoopIterations, $Loop__IterationCount )
          
          $BreakNextLoop = FALSE       ; reset for next level
          $BreakLoopWithError = FALSE  ; dito
          $g_ControlBlockLevelName = $g_LastControlBlockLevelName
          ;-----------------------------------------------------------------------
          ;#### End of : Loop;
          ;-----------------------------------------------------------------------
          
          
          EndIf  
            Global $Loop_Iteration = $OutboundVar_Iteration  ; declare variable source. Will be referenced by other action steps 
          
          ;---------<[ End of debug suffix section!  ]>------------------
      
      		OnActionEnd("Loop", $run, "0c82de7b-a489-4d83-8325-e077bebb2514", 3, "Loop")
      		EndIf
      				; Actionstep: 'Excel Controlled Loop' is  disabled . No code generated!
      		
      	$HasActionStepError = Not StcGetErrorState()
      EndIf
      
      If $AutoProp_ExcelOperationModeAsInt >= 0 And $__SuccessSource Then
      	Local $p_SaveExcelFileBeforeClosing = False
      
      	If $AutoProp_ExcelOperationModeAsInt == 1 Then
      		$p_SaveExcelFileBeforeClosing = True
      	EndIf
      
      	$__Success = __StcNgEvictExcelPackage($Excel_Session_SourceActionHandle, $p_SaveExcelFileBeforeClosing, "c9932f49-c8c3-424f-bef1-6990e87312e9",  @ScriptLineNumber, "Excel Session (Excel Session - Read and write to the same file)"); Cleanup Service! Must be called after last call to interface!
      EndIf
      
      If $AutoProp_ExcelOperationModeAsInt = 2 And $__SuccessDst And $__SuccessSource Then  ; Read and write to new destination file
      	$__Success = __StcNgEvictExcelPackage($Excel_Session_DestinationActionHandle, True, "c9932f49-c8c3-424f-bef1-6990e87312e9",  @ScriptLineNumber, "Excel Session (Excel Session - Read and write to the same file)"); Cleanup Service! Must be called after last call to interface!
      EndIf
      
      $Run = CheckErrorHandling(1, $__Success And $HasActionStepError ? 1 : -1 , "c9932f49-c8c3-424f-bef1-6990e87312e9", @ScriptLineNumber, "Excel Session (Excel Session - Read and write to the same file)"  )
      
      If Not ($__Success And $HasActionStepError) Then
      	StcSetErrorState()
      EndIf
      
      $g_ControlBlockLevelName = $g_LastControlBlockLevelName
      ;-----------------------------------------------------------------------
      ;### End of transaction step: Excel Session (Excel Session - Read and write to the same file);
      ;-----------------------------------------------------------------------
      
      
      EndIf  
       
      ;---------<[ End of debug suffix section!  ]>------------------
   
      OnActionEnd("Excel Session", $run, "c9932f49-c8c3-424f-bef1-6990e87312e9", 2, "Excel Session")
   EndIf
   
   $g_ControlBlockLevelName = $g_LastControlBlockLevelName
   OnTransactionEnd("Transaction", "d8bd5ba9-77a0-4a78-9fa8-8e429e2a6b61")
   ;---------------------------------------------------------------------------
   ;## End of Transaction: Transaction;
   ;---------------------------------------------------------------------------
   
   
   EndIf  
    
   ;---------<[ End of debug suffix section!  ]>------------------
 
          OnMeasurementBlockEnd("Transaction", "d8bd5ba9-77a0-4a78-9fa8-8e429e2a6b61", 1, "Transaction")
       EndIf
  
       ;---------------------------------------------------------------------------
       ; Application exit, handling for return
       ;---------------------------------------------------------------------------
 
       If ($run < 0 OR OnCheckAbortState()) AND Not (_StcIsUserExitCausedBy_ExitOk()  or _StcIsStatusExitCode()) Then    ; negativ run or OnCheckAbortState() return true indicates a problem
          $Pass_Activity_Workflow = 0
 
          OnMeasurementTryFailed ("1ea1e082-d894-43a7-a028-2ace0fcda713" )    ; notify Funclib subsystem 
          OnLastMeasurementExecuted("1ea1e082-d894-43a7-a028-2ace0fcda713", False)
 
          ActionStepFeedbackEx( "Activity Workflow", "Workflow", "1ea1e082-d894-43a7-a028-2ace0fcda713", "Error", StcMessages_AppExit_1( $MeasurementName) , @ScriptLineNumber ) 
          If OnCheckAbortState() Then
             writelog( StcMessages_AppExit_2($MeasurementName)  )
          Else
             writelog(  StcMessages_AppExit_3($MeasurementName) )
          EndIf
 
          If $enter >= $g_StcMaxConfiguredExecutionTries OR OnCheckAbortState() Then ; no hope, the end of retries was reached...
             $UsedErrorCycles = $enter                         ; pass current used error cycles to XML output variable
             ExitLoop 1
          Else  ;$enter < $g_StcMaxConfiguredExecutionTries     ; ok, one more again...
             writelog("<-------------------------------------------------------------------------------------------------------------------------------------->")
             writelog("[Enter Measurement Retry] Try: " & $enter+1 & " of " & $g_StcMaxConfiguredExecutionTries)
             StcErrorBox("Application measurement", StcMessages_AppExit_4($MeasurementName,  $retrydelay) , $retrydelay)
             ActionStepFeedbackEx( "Activity Workflow", "Workflow", "1ea1e082-d894-43a7-a028-2ace0fcda713", "Warning", "Workflow now restarted due to prior error. This is measurement cycle: " & $enter+1 & " of " & $g_StcMaxConfiguredExecutionTries , @ScriptLineNumber ) 
             OnMeasurementLoopFailedAfterWaitDlg(STC_GetWorkflowProtocolTemplate())    ; notify subsystem after the message box was displayed! Otherwise the dialog time influence the measurement time.
             $enter += 1           ; next try
          EndIf
 
          Clearkeys ()                     ; take care about key states!
 
       Else
          OnLastMeasurementExecuted("1ea1e082-d894-43a7-a028-2ace0fcda713", TRUE)
          ; some debug, if user has it selected
          writelog( StcMessages_AppExit_5($MeasurementName,  $retrydelay, $enter)  )
          ActionStepFeedbackEx( "Activity Workflow", "Workflow", "1ea1e082-d894-43a7-a028-2ace0fcda713", "Info", StcMessages_AppExit_6( $MeasurementName, $enter, $g_StcMaxConfiguredExecutionTries ) , @ScriptLineNumber ) 
 
          $g_TransAction = "SUM_" & $MeasurementName ; Sum of Responsetimes in Process
          $UsedErrorCycles = $enter-1         ; pass current used error cycles to XML output variable
 
          $Pass_Activity_Workflow = $Pass_Activity_Workflow + 1 ; number of runs without errors
          writelog(  StcMessages_AppExit_7($MeasurementName, $enter, $Pass_Activity_Workflow) )
          ExitLoop 1
       EndIf
    Until $enter > $g_StcMaxConfiguredExecutionTries
 
   
 
 

   
 
 
 ;-----------------------------------------------------------------------
 ;# Start of finalization block: Workflow Finalization;
 ;-----------------------------------------------------------------------
 ; StcAssert(false, "$Run=" & $Run )
 ; StcAssert(false, "$AbortCurrentWorkflow=" & $AbortCurrentWorkflow )
 ; StcAssert(false, "$g_UserExecutionAbortCode=" & $g_UserExecutionAbortCode ) ; May contain 800 for Trigger case
 ; StcAssert(false, "$BreakNextLoop=" & $BreakNextLoop )
 ; StcAssert(false, "CheckBlockIteration()=" & CheckBlockIteration() )
 
 ; Save last workflow run state:
 Local $SavedWorkflowRunState = $Run
 Local $SavedWorkflowAbortState = $AbortCurrentWorkflow
 Local $SavedWorkflowBreakNextLoop = $BreakNextLoop
 Local $OnSuccessRunResult = 0 ; 0-> not processed 1->processed with okay  2->processed but failed
 Local $OnErrorRunResult = 0   ; 0-> not processed 1->processed with okay  2->processed but failed
 Local $OnErrorBlockHasNoActionSteps=False
 
 StcResetErrorState()
 $AbortCurrentWorkflow = False
 $BreakNextLoop = False
 
 $LogfileIdent = 1
 $g_ControlBlockLevelName = "Workflow Finalization"
 
 
 
 OnEnterManagedBlock()
 
 ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd", "Info",  "Finalize Block reached. Finalize Block may change the overall workflow result!", @ScriptLineNumber  )
 
    ;-------------------------------------------------------------------
    ; 'Workflow run succeeded' section
    ;-------------------------------------------------------------------
    Local $__ProcessedAtLeastOneActionStep = false
    If $SavedWorkflowRunState = 1 AND $g_UserExecutionAbortCode = 1 Then     ; On Success Block
     writelog("[WorkflowRunSucceeded.Enter]",1);
     $OnSuccessRunResult = 1
     While 1     ; Try-Block-Loop
             
       ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
             
       If $__ProcessedAtLeastOneActionStep Then ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "1e797202-062e-4ee2-9ec6-236503fce564", "InfoPlus",  "Finalize Block: OnSuccess handling was successfully processed.", @ScriptLineNumber  )
       writelog("[WorkflowRunSucceeded.End] Leave 'Workflow run succeeded' with no error!",1);
       OnExitDoActionManagedBlock("1e797202-062e-4ee2-9ec6-236503fce564")
       ExitLoop 1
     WEnd  
     If $run <> 1 Then $OnSuccessRunResult = 2
    EndIf     ; Try-Block-Loop End
 
                Local $__LastAction = $g_LastAction
    Local $__TransAction = $g_TransAction
 
 
       If $g_UserExecutionAbortCode <> 1 Then
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd", "Warning",  "Finalize Block does only enter Common error handling because workflow was closed by a user exit code (e.g. Trigger or UserExit action step).", @ScriptLineNumber  )
    EndIf
   
    ;-------------------------------------------------------------------
    ; 'Workflow Run Failed' section
    ;-------------------------------------------------------------------
    $__ProcessedAtLeastOneActionStep = false
    If $SavedWorkflowRunState <> 1 Then ;  Local OnError. Loop over only if abort state is NOT reached!
                 
     writelog("[WorkflowRunFailed.Enter]",1);
 
     $Run = 1
     $OnErrorRunResult = 1
     While 1 ;  Local Catch-Loop, loop over only if abort state is NOT reached!
                                  ;  This is only if the DoAction has executed an "Exit Workflow" AS!
                   
       ; 'Workflow Run Failed' does not contain any active elements, so set error state
       $Run = -1
 
 
       If $__ProcessedAtLeastOneActionStep Then 
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "e329dad1-fc31-4c50-ada7-e4de53e25232", "InfoPlus",  "Finalize Block: ""Workflow run failed"" handling was successfully processed.", @ScriptLineNumber  )
           $OnErrorBlockHasNoActionSteps = False
       Else
           ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "e329dad1-fc31-4c50-ada7-e4de53e25232", "InfoPlus",  "Finalize Block: ""Workflow run failed"" handling was successfully processed but contained no further actions steps.", @ScriptLineNumber  )          
           $OnErrorBlockHasNoActionSteps = True
       EndIF
       writelog("[WorkflowRunFailed.End] Leave ""Workflow run failed"" with no further errors.",1);
       OnExitDoErrorManagedBlock("e329dad1-fc31-4c50-ada7-e4de53e25232")
       ExitLoop 1
     WEnd
     If $run <> 1 Then $OnErrorRunResult = 2
  EndIf  ; OnSuccess-Block-Loop End
 
 
 
 ;-------------------------------------------------------------------
 ; Finally section
 ;-------------------------------------------------------------------
 Local $RunValueAtLevel_1 = $Run  ; DoAlways is error state neutral, so store value for current level
 $Run = 1
 $__ProcessedAtLeastOneActionStep = false
 
 writelog("[DoAlways.Enter] Following actions executed with no error handling by default!",1);
 While 1    ; Always-Block-Loop
     
    ; Actionstep: 'Insert Item here...' is  a dummy element . No code generated!
    writelog("[DoAlways.End]",1)
 
   If $__ProcessedAtLeastOneActionStep Then ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "db015c72-4e49-47d0-96ca-e3f0b7b41e41", "InfoPlus",  "Common finalize handling was successfully processed. Note: Possible failed actions steps do not change the workflow run result.", @ScriptLineNumber )
   ExitLoop 1
 WEnd ; Always-Block-Loop
 
 $g_TransAction = $__TransAction
 $g_LastAction = $__LastAction
 
 _StcWaCloseRegisteredSessions("b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd","Workflow Finalization") 
 
 
 $Run = $RunValueAtLevel_1  ; DoAlways is error state neutral, so get back value for this level
     
 OnExitDoAlwaysManagedBlock("db015c72-4e49-47d0-96ca-e3f0b7b41e41")  
 
 OnLeaveManagedBlock()
 
 ; if was set or is now set, the overall state belongs to pesemistic..
 ;$AbortCurrentWorkflow = $SavedWorkflowAbortState OR $AbortCurrentWorkflow
 ;$OneOrMoreMeasurementFailed = true
 ;$LastMeasurementRunSucceeded  = false
 
 
 ActionStepFeedbackEx( $WorkflowName, "Workflow", "b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd", "Info", "Overall consumed time for this run: " & Round(TimerStop($MeasurementOverallTimeTimer )/1000,1) & "sec." , @ScriptLineNumber ) 
 
 OnMeasurementEnd ($g_TransAction,"b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd")    ; notify subsystem
 
 
 If $OnSuccessRunResult > 0 Then
    If $OnSuccessRunResult = 2 Then  ; OnSuccess runs into failed state! 
       ; now it depends what the user selected in Finalizer Wizard
       Switch (0)
          Case 0 ; User want to keep okay state 
             Actionstepfeedbackex( "Finalize block", "Finalize block", "1e797202-062e-4ee2-9ec6-236503fce564", "Warning",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             Actionstepfeedbackex( "Finalize block", "Finalize block", "b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd", "Warning",  "The activity succeeded but failed in finalizer handling. Termination mode is: Ingore failure and proceed with Success.", @scriptlinenumber  )               
             _StcSetSuccess_Workflow()  ; for TA and APM we still use Success Code
          Case 1 ; User want to proceed with process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             Actionstepfeedbackex( "Finalize block", "Finalize block", "1e797202-062e-4ee2-9ec6-236503fce564", "Error",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd", "Error",  "Finalize handling failed. Termination mode is: Proceed Process.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_RPA_ONSUCCESS_FAILED_BUT_PROCCED) ; for TA and APM we still use measurement failed value
          Case 2 ; User want to terminate process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             Actionstepfeedbackex( "Finalize block", "Finalize block", "1e797202-062e-4ee2-9ec6-236503fce564", "Error",  "The activity succeeded but failed in finalizer handling.", @scriptlinenumber  )               
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd", "Error",  "Finalize handling failed. Termination mode is: Terminate.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_Measurement_Failed) ; for TA and APM we still use measurement failed value
       EndSwitch
    Else
       _StcSetSuccess_Workflow()  ; for TA and APM we still use Success Code
    EndIf
 EndIf
 
 
 If $OnErrorRunResult > 0 Then 
    ; it doesn't matter if block failed again or not. Failed is still failed!
    ; now it depends what the user selected in Finalizer Wizard
  
    if $OnErrorRunResult = 2 AND Not $OnErrorBlockHasNoActionSteps Then ; in this case one of the actions in OnError has failed!
       ActionstepFeedbackEx( "Finalize block", "Finalize block", "e329dad1-fc31-4c50-ada7-e4de53e25232", "Error",  "One of the activities has failed.", @scriptlinenumber  )               
    EndIF
 
    Switch (1)
       Case 0 ; User want to proceed process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd", "Error",  "Activity failed. Termination mode is: Proceed Process.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_RPA_FAILED_BUT_PROCCED_PROCESS) ; for TA and APM we still use measurement failed value
       Case 1 ; User want to terminate process
             $OneOrMoreMeasurementFailed = true
             $LastMeasurementRunSucceeded  = false
             ActionStepFeedbackEx( "Finalize Block", "Finalize Block", "b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd", "Error",  "Activity failed. Termination mode is: Terminate.", @ScriptLineNumber  )
             _StcSetStatusExit_Workflow($StcExit_Measurement_Failed) ; for TA and APM we still use measurement failed value
    EndSwitch
 EndIf
 
 
 
 
 ;-----------------------------------------------------------------------
 ;# End of finalization block: Workflow Finalization;
 ;-----------------------------------------------------------------------
 


__StcRpaFlushOutParams( "925a340c-3a10-482c-bfe5-7b5fb1b50ad9", @ScriptLineNumber, "1 ()"  )
Local $__AcitivtyParameter_Path = StcGetLogFileFolder() & "\OutputActivityParameters.json"
Local $__AcitivtyParameter_Success = __StcSaveOutParameters($__AcitivtyParameter_Path, "925a340c-3a10-482c-bfe5-7b5fb1b50ad9", @ScriptLineNumber, "1 ()"    ) 


  OnWorkflowEnd(  "925a340c-3a10-482c-bfe5-7b5fb1b50ad9" )
  return $_MeasurementScriptRunFinished
EndFunc

 
 ;-----------------------------------------------------------------------
 ; Static Section for STC-Protector START
 ;-----------------------------------------------------------------------
 Func __ProtectorGetWindowTitle( $Title, $ActName, $ActId, $Line)
     Local $windowTitle = _ExpandToTitleRegEx($Title)
     If @error = 1 AND NOT $g_StcProtectorAlreadyShowsError Then 
        ActionStepFeedbackEx( $ActName, "KeyStroke", $ActId, "Error", "The window title '" & $windowTitle & "' is not a valid regular expression!", $Line )
        $g_StcProtectorAlreadyShowsError = TRUE
     EndIf
     return $windowTitle
 EndFunc
 
 Func __DecAndCheckFailCounter( $ProtID, $Title, $ActName, $ActId, $Line) 
     $g__StcProtFailCounter[$ProtID] = $g__StcProtFailCounter[$ProtID] - 1
     If $g__StcProtFailCounter[$ProtID] = 0 Then
        ActionStepFeedbackEx( $ActName, "KeyStroke", $ActId, "Warning", "Proctector for window title '" & $Title & "' disabled because of consecutive '" & $g__StcProtFailLimit & "' failures.", $Line )     
        StcProtectorDisable()
     EndIf
 EndFunc           
 
 
 ; STC-Protector, function for closing of error windows, not wanted popups like update information, check runs every 250 miliseconds
 Func STC_Protector()
     __CheckAutoItMainThread()
     If $g__StcProtSkipNextRun OR NOT $g__StcProtEnabled Then
         $g__StcProtSkipNextRun = FALSE
         return
     EndIf
         
     If NOT IsDeclared("g_StcProtectorAlreadyShowsError") Then Global $g_StcProtectorAlreadyShowsError = FALSE
     ; check and force of reboot, waits till a running measurement is finished
     If $reboot = 1 AND @hour = $reboothour AND @min = $rebootMin Then $rebootforce = 1
 
  
 
 EndFunc
 
 ;-----------------------------------------------------------------------
 ; Static Section for STC-Protector END
 ;-----------------------------------------------------------------------
 


; Run protocol template xml:
Func STC_GetWorkflowProtocolTemplate()
 return "<?xml version=""1.0"" encoding=""utf-8""?>" & @CRLF & _
"<WorkflowRunProtocol xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Id=""925a340c-3a10-482c-bfe5-7b5fb1b50ad9"" Name=""1"" Type=""ActivityWorkflow"" WorkflowRevision=""0"" WorkflowProjectID=""925a340c-3a10-482c-bfe5-7b5fb1b50ad9"" ModelRevision=""9"" WorkflowEditorVersion=""6.0.15086.1"" WorkflowRun=""0"" Author=""RPA"" CreationDate=""2022-10-11T08:16:08.1031013+08:00"">" & @CRLF & _
"  <Items>" & @CRLF & _
"    <Item Id=""9acb5337-7481-49e9-b661-d51deba2e384"" Name=""Workflow Initialization"" Type=""InitializeSectionActivity"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""0e736f80-c6c2-43fa-9841-26ca45fd2679"" Name=""Activity Parameters"" Type=""ActivityParametersActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""97cf88fc-9d2f-42d9-8f61-06d3bf00cedd"" Name=""Pattern Gallery"" Type=""SearchPatternGalleryActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""e83d1549-028d-480d-b379-a26bc8d3d03f"" Name=""Settings"" Type=""WorkflowSettingsActivity"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"    <Item Id=""1ea1e082-d894-43a7-a028-2ace0fcda713"" Name=""Activity Workflow"" Type=""ActivityWorkflowMeasurement"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""d8bd5ba9-77a0-4a78-9fa8-8e429e2a6b61"" Name=""Transaction"" Type=""Transaction"">" & @CRLF & _
"          <Items>" & @CRLF & _
"            <Item Id=""c9932f49-c8c3-424f-bef1-6990e87312e9"" Name=""Excel Session"" Type=""ExcelSessionActivity"">" & @CRLF & _
"              <Items>" & @CRLF & _
"                <Item Id=""54860e64-3cd5-4312-a1d6-7b9fe11e4414"" Name=""Read from Excel File"" Type=""ReadExcelFileActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item Id=""154e54e0-7381-4418-8fd3-afe6a0d61636"" Name=""Get Array Count"" Type=""GetArrayCountActivity"">" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"                <Item xsi:type=""Loop"" Id=""0c82de7b-a489-4d83-8325-e077bebb2514"" Name=""Loop"" Type=""LoopOperator"">" & @CRLF & _
"                  <Items>" & @CRLF & _
"                    <Item Id=""2d020a4c-22fa-4caf-81cb-9bbfa513a49d"" Name=""String Operations"" Type=""StringOperationsActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                    <Item Id=""e5832028-b817-42e7-8a8a-febcb331f16c"" Name=""Message Box: Message Box1"" Type=""MessageBoxActivity"">" & @CRLF & _
"                      <RunResult State=""NotExecuted"" />" & @CRLF & _
"                    </Item>" & @CRLF & _
"                  </Items>" & @CRLF & _
"                  <RunResult State=""NotExecuted"" />" & @CRLF & _
"                </Item>" & @CRLF & _
"              </Items>" & @CRLF & _
"              <RunResult State=""NotExecuted"" />" & @CRLF & _
"            </Item>" & @CRLF & _
"          </Items>" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"    <Item Id=""b37a5d9a-d3c4-4ade-bd75-4d5836d78cbd"" Name=""Workflow Finalization"" Type=""WorkflowFinalizationActivity"">" & @CRLF & _
"      <Items>" & @CRLF & _
"        <Item Id=""1e797202-062e-4ee2-9ec6-236503fce564"" Name=""Workflow run succeeded"" Type=""OnSuccessSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""e329dad1-fc31-4c50-ada7-e4de53e25232"" Name=""Workflow run failed"" Type=""OnErrorSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"        <Item Id=""db015c72-4e49-47d0-96ca-e3f0b7b41e41"" Name=""Common finalization handling"" Type=""DoAlwaysSection"">" & @CRLF & _
"          <RunResult State=""NotExecuted"" />" & @CRLF & _
"        </Item>" & @CRLF & _
"      </Items>" & @CRLF & _
"      <RunResult State=""NotExecuted"" />" & @CRLF & _
"    </Item>" & @CRLF & _
"  </Items>" & @CRLF & _
"  <RunResult State=""NotExecuted"" />" & @CRLF & _
"</WorkflowRunProtocol>"  
EndFunc

